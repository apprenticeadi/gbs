DEBUG 2022-02-14 16:45:25,745 bytecode dump:
>          0	NOP(arg=None, lineno=83)
           2	LOAD_FAST(arg=1, lineno=83)
           4	LOAD_CONST(arg=1, lineno=83)
           6	BINARY_SUBSCR(arg=None, lineno=83)
           8	STORE_FAST(arg=7, lineno=83)
          10	LOAD_FAST(arg=0, lineno=84)
          12	LOAD_CONST(arg=1, lineno=84)
          14	LOAD_CONST(arg=0, lineno=84)
          16	LOAD_CONST(arg=0, lineno=84)
          18	BUILD_SLICE(arg=2, lineno=84)
          20	BUILD_TUPLE(arg=2, lineno=84)
          22	BINARY_SUBSCR(arg=None, lineno=84)
          24	STORE_FAST(arg=8, lineno=84)
          26	LOAD_FAST(arg=1, lineno=88)
          28	LOAD_CONST(arg=2, lineno=88)
          30	BINARY_SUBSCR(arg=None, lineno=88)
          32	STORE_FAST(arg=9, lineno=88)
          34	LOAD_FAST(arg=0, lineno=89)
          36	LOAD_CONST(arg=2, lineno=89)
          38	LOAD_CONST(arg=0, lineno=89)
          40	LOAD_CONST(arg=0, lineno=89)
          42	BUILD_SLICE(arg=2, lineno=89)
          44	BUILD_TUPLE(arg=2, lineno=89)
          46	BINARY_SUBSCR(arg=None, lineno=89)
          48	STORE_FAST(arg=10, lineno=89)
          50	LOAD_FAST(arg=0, lineno=91)
          52	LOAD_ATTR(arg=0, lineno=91)
          54	LOAD_CONST(arg=1, lineno=91)
          56	BINARY_SUBSCR(arg=None, lineno=91)
          58	STORE_FAST(arg=11, lineno=91)
          60	LOAD_CONST(arg=3, lineno=92)
          62	LOAD_FAST(arg=2, lineno=92)
          64	LOAD_METHOD(arg=1, lineno=92)
          66	CALL_METHOD(arg=0, lineno=92)
          68	BINARY_MULTIPLY(arg=None, lineno=92)
          70	LOAD_CONST(arg=2, lineno=92)
          72	BINARY_ADD(arg=None, lineno=92)
          74	STORE_FAST(arg=12, lineno=92)
          76	LOAD_FAST(arg=12, lineno=93)
          78	LOAD_CONST(arg=3, lineno=93)
          80	LOAD_FAST(arg=3, lineno=93)
          82	BINARY_MULTIPLY(arg=None, lineno=93)
          84	BINARY_ADD(arg=None, lineno=93)
          86	LOAD_FAST(arg=4, lineno=93)
          88	BINARY_ADD(arg=None, lineno=93)
          90	LOAD_CONST(arg=2, lineno=93)
          92	BINARY_ADD(arg=None, lineno=93)
          94	STORE_FAST(arg=13, lineno=93)
          96	LOAD_GLOBAL(arg=2, lineno=95)
          98	LOAD_METHOD(arg=3, lineno=95)
         100	LOAD_GLOBAL(arg=2, lineno=95)
         102	LOAD_METHOD(arg=4, lineno=95)
         104	LOAD_FAST(arg=3, lineno=95)
         106	LOAD_CONST(arg=2, lineno=95)
         108	BUILD_LIST(arg=2, lineno=95)
         110	CALL_METHOD(arg=1, lineno=95)
         112	LOAD_FAST(arg=2, lineno=95)
         114	BUILD_TUPLE(arg=2, lineno=95)
         116	CALL_METHOD(arg=1, lineno=95)
         118	STORE_FAST(arg=14, lineno=95)
         120	LOAD_GLOBAL(arg=2, lineno=96)
         122	LOAD_METHOD(arg=5, lineno=96)
         124	LOAD_FAST(arg=14, lineno=96)
         126	LOAD_CONST(arg=2, lineno=96)
         128	BINARY_ADD(arg=None, lineno=96)
         130	CALL_METHOD(arg=1, lineno=96)
         132	STORE_FAST(arg=15, lineno=96)
         134	LOAD_FAST(arg=14, lineno=98)
         136	LOAD_METHOD(arg=6, lineno=98)
         138	CALL_METHOD(arg=0, lineno=98)
         140	LOAD_FAST(arg=4, lineno=98)
         142	BINARY_ADD(arg=None, lineno=98)
         144	STORE_FAST(arg=16, lineno=98)
         146	LOAD_GLOBAL(arg=7, lineno=99)
         148	LOAD_FAST(arg=16, lineno=99)
         150	CALL_FUNCTION(arg=1, lineno=99)
         152	STORE_FAST(arg=17, lineno=99)
         154	LOAD_GLOBAL(arg=2, lineno=101)
         156	LOAD_ATTR(arg=8, lineno=101)
         158	LOAD_CONST(arg=3, lineno=101)
         160	LOAD_FAST(arg=3, lineno=101)
         162	BINARY_MULTIPLY(arg=None, lineno=101)
         164	LOAD_FAST(arg=4, lineno=101)
         166	BINARY_ADD(arg=None, lineno=101)
         168	LOAD_CONST(arg=3, lineno=101)
         170	BINARY_ADD(arg=None, lineno=101)
         172	LOAD_GLOBAL(arg=2, lineno=101)
         174	LOAD_ATTR(arg=9, lineno=101)
         176	LOAD_CONST(arg=4, lineno=101)
         178	CALL_FUNCTION_KW(arg=2, lineno=101)
         180	STORE_FAST(arg=18, lineno=101)
         182	LOAD_GLOBAL(arg=10, lineno=102)
         184	LOAD_METHOD(arg=11, lineno=102)
         186	LOAD_FAST(arg=15, lineno=102)
         188	CALL_METHOD(arg=1, lineno=102)
         190	GET_ITER(arg=None, lineno=102)
>        192	FOR_ITER(arg=470, lineno=102)
         196	STORE_FAST(arg=19, lineno=102)
         198	LOAD_GLOBAL(arg=2, lineno=104)
         200	LOAD_ATTR(arg=8, lineno=104)
         202	LOAD_CONST(arg=3, lineno=104)
         204	LOAD_FAST(arg=3, lineno=104)
         206	BINARY_MULTIPLY(arg=None, lineno=104)
         208	LOAD_FAST(arg=4, lineno=104)
         210	BINARY_ADD(arg=None, lineno=104)
         212	LOAD_CONST(arg=3, lineno=104)
         214	BINARY_ADD(arg=None, lineno=104)
         216	LOAD_GLOBAL(arg=2, lineno=104)
         218	LOAD_ATTR(arg=9, lineno=104)
         220	LOAD_CONST(arg=4, lineno=104)
         222	CALL_FUNCTION_KW(arg=2, lineno=104)
         224	STORE_FAST(arg=20, lineno=104)
         226	LOAD_GLOBAL(arg=12, lineno=106)
         228	LOAD_FAST(arg=19, lineno=106)
         230	LOAD_FAST(arg=14, lineno=106)
         232	CALL_FUNCTION(arg=2, lineno=106)
         234	STORE_FAST(arg=21, lineno=106)
         236	LOAD_FAST(arg=21, lineno=107)
         238	LOAD_METHOD(arg=1, lineno=107)
         240	CALL_METHOD(arg=0, lineno=107)
         242	STORE_FAST(arg=22, lineno=107)
         244	LOAD_CONST(arg=5, lineno=109)
         246	STORE_FAST(arg=23, lineno=109)
         248	LOAD_GLOBAL(arg=13, lineno=110)
         250	LOAD_CONST(arg=2, lineno=110)
         252	LOAD_FAST(arg=11, lineno=110)
         254	LOAD_CONST(arg=3, lineno=110)
         256	BINARY_FLOOR_DIVIDE(arg=None, lineno=110)
         258	CALL_FUNCTION(arg=2, lineno=110)
         260	GET_ITER(arg=None, lineno=110)
>        262	FOR_ITER(arg=30, lineno=110)
         264	STORE_FAST(arg=24, lineno=110)
         266	LOAD_FAST(arg=23, lineno=111)
         268	LOAD_FAST(arg=17, lineno=111)
         270	LOAD_FAST(arg=14, lineno=111)
         272	LOAD_FAST(arg=24, lineno=111)
         274	BINARY_SUBSCR(arg=None, lineno=111)
         276	LOAD_FAST(arg=21, lineno=111)
         278	LOAD_FAST(arg=24, lineno=111)
         280	BINARY_SUBSCR(arg=None, lineno=111)
         282	BUILD_TUPLE(arg=2, lineno=111)
         284	BINARY_SUBSCR(arg=None, lineno=111)
         286	INPLACE_MULTIPLY(arg=None, lineno=111)
         288	STORE_FAST(arg=23, lineno=111)
         290	JUMP_ABSOLUTE(arg=262, lineno=111)
>        294	LOAD_FAST(arg=6, lineno=113)
         296	POP_JUMP_IF_FALSE(arg=314, lineno=113)
         300	LOAD_CONST(arg=3, lineno=114)
         302	LOAD_FAST(arg=21, lineno=114)
         304	BINARY_MULTIPLY(arg=None, lineno=114)
         306	LOAD_FAST(arg=14, lineno=114)
         308	BINARY_SUBTRACT(arg=None, lineno=114)
         310	STORE_FAST(arg=25, lineno=114)
         312	JUMP_FORWARD(arg=4, lineno=114)
>        314	LOAD_FAST(arg=21, lineno=116)
         316	STORE_FAST(arg=25, lineno=116)
>        318	LOAD_GLOBAL(arg=14, lineno=118)
         320	LOAD_FAST(arg=25, lineno=118)
         322	LOAD_FAST(arg=0, lineno=118)
         324	LOAD_FAST(arg=1, lineno=118)
         326	LOAD_FAST(arg=8, lineno=118)
         328	CALL_FUNCTION(arg=4, lineno=118)
         330	UNPACK_SEQUENCE(arg=4, lineno=118)
         332	STORE_FAST(arg=26, lineno=118)
         334	STORE_FAST(arg=27, lineno=118)
         336	STORE_FAST(arg=28, lineno=118)
         338	STORE_FAST(arg=29, lineno=118)
         340	LOAD_GLOBAL(arg=15, lineno=120)
         342	LOAD_FAST(arg=26, lineno=120)
         344	CALL_FUNCTION(arg=1, lineno=120)
         346	STORE_FAST(arg=30, lineno=120)
         348	LOAD_FAST(arg=21, lineno=122)
         350	LOAD_CONST(arg=1, lineno=122)
         352	BINARY_SUBSCR(arg=None, lineno=122)
         354	LOAD_CONST(arg=1, lineno=122)
         356	COMPARE_OP(arg=2, lineno=122)
         358	POP_JUMP_IF_FALSE(arg=450, lineno=122)
         362	LOAD_FAST(arg=21, lineno=122)
         364	LOAD_CONST(arg=2, lineno=122)
         366	BINARY_SUBSCR(arg=None, lineno=122)
         368	LOAD_CONST(arg=1, lineno=122)
         370	COMPARE_OP(arg=2, lineno=122)
         372	POP_JUMP_IF_FALSE(arg=450, lineno=122)
         376	LOAD_GLOBAL(arg=16, lineno=123)
         378	LOAD_FAST(arg=25, lineno=123)
         380	LOAD_FAST(arg=10, lineno=123)
         382	CALL_FUNCTION(arg=2, lineno=123)
         384	STORE_FAST(arg=31, lineno=123)
         386	LOAD_CONST(arg=6, lineno=124)
         388	LOAD_FAST(arg=12, lineno=124)
         390	LOAD_CONST(arg=3, lineno=124)
         392	BINARY_FLOOR_DIVIDE(arg=None, lineno=124)
         394	LOAD_FAST(arg=22, lineno=124)
         396	BINARY_SUBTRACT(arg=None, lineno=124)
         398	BINARY_POWER(arg=None, lineno=124)
         400	STORE_FAST(arg=32, lineno=124)
         402	LOAD_GLOBAL(arg=17, lineno=125)
         404	LOAD_FAST(arg=30, lineno=125)
         406	LOAD_FAST(arg=26, lineno=125)
         408	LOAD_FAST(arg=27, lineno=125)
         410	LOAD_FAST(arg=28, lineno=125)
         412	LOAD_FAST(arg=12, lineno=125)
         414	LOAD_FAST(arg=9, lineno=125)
         416	LOAD_FAST(arg=31, lineno=125)
         418	CALL_FUNCTION(arg=7, lineno=125)
         420	LOAD_FAST(arg=12, lineno=125)
         422	BINARY_SUBSCR(arg=None, lineno=125)
         424	STORE_FAST(arg=33, lineno=125)
         426	LOAD_FAST(arg=18, lineno=126)
         428	LOAD_CONST(arg=1, lineno=126)
         430	DUP_TOP_TWO(arg=None, lineno=126)
         432	BINARY_SUBSCR(arg=None, lineno=126)
         434	LOAD_FAST(arg=23, lineno=126)
         436	LOAD_FAST(arg=32, lineno=126)
         438	BINARY_MULTIPLY(arg=None, lineno=126)
         440	LOAD_FAST(arg=33, lineno=126)
         442	BINARY_MULTIPLY(arg=None, lineno=126)
         444	INPLACE_ADD(arg=None, lineno=126)
         446	ROT_THREE(arg=None, lineno=126)
         448	STORE_SUBSCR(arg=None, lineno=126)
>        450	LOAD_GLOBAL(arg=18, lineno=128)
         452	LOAD_FAST(arg=30, lineno=128)
         454	LOAD_FAST(arg=26, lineno=128)
         456	LOAD_FAST(arg=27, lineno=128)
         458	LOAD_FAST(arg=28, lineno=128)
         460	LOAD_FAST(arg=13, lineno=128)
         462	CALL_FUNCTION(arg=5, lineno=128)
         464	STORE_FAST(arg=34, lineno=128)
         466	LOAD_GLOBAL(arg=17, lineno=129)
         468	LOAD_FAST(arg=30, lineno=129)
         470	LOAD_FAST(arg=26, lineno=129)
         472	LOAD_FAST(arg=27, lineno=129)
         474	LOAD_FAST(arg=28, lineno=129)
         476	LOAD_FAST(arg=13, lineno=129)
         478	LOAD_FAST(arg=7, lineno=129)
         480	LOAD_FAST(arg=29, lineno=129)
         482	CALL_FUNCTION(arg=7, lineno=129)
         484	STORE_FAST(arg=35, lineno=129)
         486	LOAD_GLOBAL(arg=13, lineno=131)
         488	LOAD_CONST(arg=3, lineno=131)
         490	LOAD_FAST(arg=21, lineno=131)
         492	LOAD_CONST(arg=1, lineno=131)
         494	BINARY_SUBSCR(arg=None, lineno=131)
         496	BINARY_MULTIPLY(arg=None, lineno=131)
         498	LOAD_CONST(arg=2, lineno=131)
         500	BINARY_ADD(arg=None, lineno=131)
         502	LOAD_CONST(arg=3, lineno=131)
         504	LOAD_FAST(arg=3, lineno=131)
         506	BINARY_MULTIPLY(arg=None, lineno=131)
         508	LOAD_FAST(arg=4, lineno=131)
         510	BINARY_ADD(arg=None, lineno=131)
         512	LOAD_CONST(arg=3, lineno=131)
         514	BINARY_ADD(arg=None, lineno=131)
         516	CALL_FUNCTION(arg=2, lineno=131)
         518	GET_ITER(arg=None, lineno=131)
>        520	FOR_ITER(arg=134, lineno=131)
         522	STORE_FAST(arg=36, lineno=131)
         524	LOAD_FAST(arg=12, lineno=132)
         526	LOAD_FAST(arg=36, lineno=132)
         528	BINARY_ADD(arg=None, lineno=132)
         530	STORE_FAST(arg=37, lineno=132)
         532	LOAD_CONST(arg=6, lineno=133)
         534	LOAD_FAST(arg=37, lineno=133)
         536	LOAD_CONST(arg=3, lineno=133)
         538	BINARY_FLOOR_DIVIDE(arg=None, lineno=133)
         540	LOAD_FAST(arg=22, lineno=133)
         542	BINARY_SUBTRACT(arg=None, lineno=133)
         544	BINARY_POWER(arg=None, lineno=133)
         546	STORE_FAST(arg=32, lineno=133)
         548	LOAD_FAST(arg=17, lineno=135)
         550	LOAD_FAST(arg=36, lineno=135)
         552	LOAD_CONST(arg=2, lineno=135)
         554	BINARY_SUBTRACT(arg=None, lineno=135)
         556	LOAD_CONST(arg=3, lineno=135)
         558	BINARY_FLOOR_DIVIDE(arg=None, lineno=135)
         560	LOAD_FAST(arg=21, lineno=135)
         562	LOAD_CONST(arg=1, lineno=135)
         564	BINARY_SUBSCR(arg=None, lineno=135)
         566	BUILD_TUPLE(arg=2, lineno=135)
         568	BINARY_SUBSCR(arg=None, lineno=135)
         570	LOAD_FAST(arg=23, lineno=135)
         572	BINARY_MULTIPLY(arg=None, lineno=135)
         574	STORE_FAST(arg=38, lineno=135)
         576	LOAD_FAST(arg=37, lineno=137)
         578	LOAD_CONST(arg=3, lineno=137)
         580	BINARY_MODULO(arg=None, lineno=137)
         582	LOAD_CONST(arg=1, lineno=137)
         584	COMPARE_OP(arg=2, lineno=137)
         586	POP_JUMP_IF_FALSE(arg=624, lineno=137)
         590	LOAD_FAST(arg=20, lineno=138)
         592	LOAD_FAST(arg=36, lineno=138)
         594	DUP_TOP_TWO(arg=None, lineno=138)
         596	BINARY_SUBSCR(arg=None, lineno=138)
         598	LOAD_FAST(arg=38, lineno=138)
         600	LOAD_FAST(arg=32, lineno=138)
         602	BINARY_MULTIPLY(arg=None, lineno=138)
         604	LOAD_FAST(arg=34, lineno=138)
         606	LOAD_FAST(arg=37, lineno=138)
         608	LOAD_CONST(arg=3, lineno=138)
         610	BINARY_FLOOR_DIVIDE(arg=None, lineno=138)
         612	BINARY_SUBSCR(arg=None, lineno=138)
         614	BINARY_MULTIPLY(arg=None, lineno=138)
         616	INPLACE_ADD(arg=None, lineno=138)
         618	ROT_THREE(arg=None, lineno=138)
         620	STORE_SUBSCR(arg=None, lineno=138)
         622	JUMP_FORWARD(arg=28, lineno=138)
>        624	LOAD_FAST(arg=20, lineno=140)
         626	LOAD_FAST(arg=36, lineno=140)
         628	DUP_TOP_TWO(arg=None, lineno=140)
         630	BINARY_SUBSCR(arg=None, lineno=140)
         632	LOAD_FAST(arg=38, lineno=140)
         634	LOAD_FAST(arg=32, lineno=140)
         636	BINARY_MULTIPLY(arg=None, lineno=140)
         638	LOAD_FAST(arg=35, lineno=140)
         640	LOAD_FAST(arg=37, lineno=140)
         642	BINARY_SUBSCR(arg=None, lineno=140)
         644	BINARY_MULTIPLY(arg=None, lineno=140)
         646	INPLACE_ADD(arg=None, lineno=140)
         648	ROT_THREE(arg=None, lineno=140)
         650	STORE_SUBSCR(arg=None, lineno=140)
>        652	JUMP_ABSOLUTE(arg=520, lineno=140)
>        656	LOAD_FAST(arg=18, lineno=142)
         658	LOAD_FAST(arg=20, lineno=142)
         660	INPLACE_ADD(arg=None, lineno=142)
         662	STORE_FAST(arg=18, lineno=142)
         664	JUMP_ABSOLUTE(arg=192, lineno=142)
>        666	LOAD_FAST(arg=6, lineno=144)
         668	POP_JUMP_IF_FALSE(arg=726, lineno=144)
         672	LOAD_GLOBAL(arg=13, lineno=145)
         674	LOAD_FAST(arg=18, lineno=145)
         676	LOAD_ATTR(arg=0, lineno=145)
         678	LOAD_CONST(arg=1, lineno=145)
         680	BINARY_SUBSCR(arg=None, lineno=145)
         682	CALL_FUNCTION(arg=1, lineno=145)
         684	GET_ITER(arg=None, lineno=145)
>        686	FOR_ITER(arg=38, lineno=145)
         688	STORE_FAST(arg=19, lineno=145)
         690	LOAD_FAST(arg=12, lineno=146)
         692	LOAD_FAST(arg=19, lineno=146)
         694	BINARY_ADD(arg=None, lineno=146)
         696	STORE_FAST(arg=39, lineno=146)
         698	LOAD_FAST(arg=18, lineno=147)
         700	LOAD_FAST(arg=19, lineno=147)
         702	DUP_TOP_TWO(arg=None, lineno=147)
         704	BINARY_SUBSCR(arg=None, lineno=147)
         706	LOAD_CONST(arg=7, lineno=147)
         708	LOAD_FAST(arg=39, lineno=147)
         710	LOAD_CONST(arg=3, lineno=147)
         712	BINARY_FLOOR_DIVIDE(arg=None, lineno=147)
         714	BINARY_POWER(arg=None, lineno=147)
         716	INPLACE_MULTIPLY(arg=None, lineno=147)
         718	ROT_THREE(arg=None, lineno=147)
         720	STORE_SUBSCR(arg=None, lineno=147)
         722	JUMP_ABSOLUTE(arg=686, lineno=147)
>        726	LOAD_FAST(arg=18, lineno=149)
         728	RETURN_VALUE(arg=None, lineno=149)
DEBUG 2022-02-14 16:45:25,746 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:25,746 stack: []
DEBUG 2022-02-14 16:45:25,746 dispatch pc=0, inst=NOP(arg=None, lineno=83)
DEBUG 2022-02-14 16:45:25,746 stack []
DEBUG 2022-02-14 16:45:25,746 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=83)
DEBUG 2022-02-14 16:45:25,746 stack []
DEBUG 2022-02-14 16:45:25,746 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=83)
DEBUG 2022-02-14 16:45:25,746 stack ['$D2.0']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=83)
DEBUG 2022-02-14 16:45:25,747 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=83)
DEBUG 2022-02-14 16:45:25,747 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=84)
DEBUG 2022-02-14 16:45:25,747 stack []
DEBUG 2022-02-14 16:45:25,747 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=84)
DEBUG 2022-02-14 16:45:25,747 stack ['$A10.3']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=84)
DEBUG 2022-02-14 16:45:25,747 stack ['$A10.3', '$const12.4']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=84)
DEBUG 2022-02-14 16:45:25,747 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=84)
DEBUG 2022-02-14 16:45:25,747 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-02-14 16:45:25,747 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=84)
DEBUG 2022-02-14 16:45:25,748 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=84)
DEBUG 2022-02-14 16:45:25,748 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=24, inst=STORE_FAST(arg=8, lineno=84)
DEBUG 2022-02-14 16:45:25,748 stack ['$22binary_subscr.10']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=88)
DEBUG 2022-02-14 16:45:25,748 stack []
DEBUG 2022-02-14 16:45:25,748 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=88)
DEBUG 2022-02-14 16:45:25,748 stack ['$D26.11']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=88)
DEBUG 2022-02-14 16:45:25,748 stack ['$D26.11', '$const28.12']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=32, inst=STORE_FAST(arg=9, lineno=88)
DEBUG 2022-02-14 16:45:25,748 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:45:25,748 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=89)
DEBUG 2022-02-14 16:45:25,748 stack []
DEBUG 2022-02-14 16:45:25,749 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=38, inst=LOAD_CONST(arg=0, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14', '$const36.15']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14', '$const36.15', '$const38.16']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14', '$const36.15', '$const38.16', '$const40.17']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=44, inst=BUILD_TUPLE(arg=2, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14', '$const36.15', '$42build_slice.19']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$A34.14', '$44build_tuple.20']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=48, inst=STORE_FAST(arg=10, lineno=89)
DEBUG 2022-02-14 16:45:25,749 stack ['$46binary_subscr.21']
DEBUG 2022-02-14 16:45:25,749 dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=91)
DEBUG 2022-02-14 16:45:25,749 stack []
DEBUG 2022-02-14 16:45:25,750 dispatch pc=52, inst=LOAD_ATTR(arg=0, lineno=91)
DEBUG 2022-02-14 16:45:25,750 stack ['$A50.22']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=91)
DEBUG 2022-02-14 16:45:25,750 stack ['$52load_attr.23']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=91)
DEBUG 2022-02-14 16:45:25,750 stack ['$52load_attr.23', '$const54.24']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=58, inst=STORE_FAST(arg=11, lineno=91)
DEBUG 2022-02-14 16:45:25,750 stack ['$56binary_subscr.25']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=60, inst=LOAD_CONST(arg=3, lineno=92)
DEBUG 2022-02-14 16:45:25,750 stack []
DEBUG 2022-02-14 16:45:25,750 dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=92)
DEBUG 2022-02-14 16:45:25,750 stack ['$const60.26']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=64, inst=LOAD_METHOD(arg=1, lineno=92)
DEBUG 2022-02-14 16:45:25,750 stack ['$const60.26', '$fixed_edge_reps62.27']
DEBUG 2022-02-14 16:45:25,750 dispatch pc=66, inst=CALL_METHOD(arg=0, lineno=92)
DEBUG 2022-02-14 16:45:25,751 stack ['$const60.26', '$64load_method.28']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=68, inst=BINARY_MULTIPLY(arg=None, lineno=92)
DEBUG 2022-02-14 16:45:25,751 stack ['$const60.26', '$66call_method.29']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=92)
DEBUG 2022-02-14 16:45:25,751 stack ['$68binary_multiply.30']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=72, inst=BINARY_ADD(arg=None, lineno=92)
DEBUG 2022-02-14 16:45:25,751 stack ['$68binary_multiply.30', '$const70.31']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=74, inst=STORE_FAST(arg=12, lineno=92)
DEBUG 2022-02-14 16:45:25,751 stack ['$72binary_add.32']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=76, inst=LOAD_FAST(arg=12, lineno=93)
DEBUG 2022-02-14 16:45:25,751 stack []
DEBUG 2022-02-14 16:45:25,751 dispatch pc=78, inst=LOAD_CONST(arg=3, lineno=93)
DEBUG 2022-02-14 16:45:25,751 stack ['$N_fixed76.33']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=93)
DEBUG 2022-02-14 16:45:25,751 stack ['$N_fixed76.33', '$const78.34']
DEBUG 2022-02-14 16:45:25,751 dispatch pc=82, inst=BINARY_MULTIPLY(arg=None, lineno=93)
DEBUG 2022-02-14 16:45:25,751 stack ['$N_fixed76.33', '$const78.34', '$batch_max80.35']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=84, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$N_fixed76.33', '$82binary_multiply.36']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$84binary_add.37']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$84binary_add.37', '$even_cutoff86.38']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$88binary_add.39']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=92, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$88binary_add.39', '$const90.40']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=94, inst=STORE_FAST(arg=13, lineno=93)
DEBUG 2022-02-14 16:45:25,752 stack ['$92binary_add.41']
DEBUG 2022-02-14 16:45:25,752 dispatch pc=96, inst=LOAD_GLOBAL(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,752 stack []
DEBUG 2022-02-14 16:45:25,753 dispatch pc=98, inst=LOAD_METHOD(arg=3, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$96load_global.42']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=100, inst=LOAD_GLOBAL(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=102, inst=LOAD_METHOD(arg=4, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$100load_global.44']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$102load_method.45']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$102load_method.45', '$batch_max104.46']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=108, inst=BUILD_LIST(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$102load_method.45', '$batch_max104.46', '$const106.47']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=110, inst=CALL_METHOD(arg=1, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$102load_method.45', '$108build_list.48']
DEBUG 2022-02-14 16:45:25,753 dispatch pc=112, inst=LOAD_FAST(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,753 stack ['$98load_method.43', '$110call_method.49']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=114, inst=BUILD_TUPLE(arg=2, lineno=95)
DEBUG 2022-02-14 16:45:25,754 stack ['$98load_method.43', '$110call_method.49', '$fixed_edge_reps112.50']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=95)
DEBUG 2022-02-14 16:45:25,754 stack ['$98load_method.43', '$114build_tuple.51']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=95)
DEBUG 2022-02-14 16:45:25,754 stack ['$116call_method.52']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=96)
DEBUG 2022-02-14 16:45:25,754 stack []
DEBUG 2022-02-14 16:45:25,754 dispatch pc=122, inst=LOAD_METHOD(arg=5, lineno=96)
DEBUG 2022-02-14 16:45:25,754 stack ['$120load_global.53']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=124, inst=LOAD_FAST(arg=14, lineno=96)
DEBUG 2022-02-14 16:45:25,754 stack ['$122load_method.54']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=126, inst=LOAD_CONST(arg=2, lineno=96)
DEBUG 2022-02-14 16:45:25,754 stack ['$122load_method.54', '$edge_reps124.55']
DEBUG 2022-02-14 16:45:25,754 dispatch pc=128, inst=BINARY_ADD(arg=None, lineno=96)
DEBUG 2022-02-14 16:45:25,755 stack ['$122load_method.54', '$edge_reps124.55', '$const126.56']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=130, inst=CALL_METHOD(arg=1, lineno=96)
DEBUG 2022-02-14 16:45:25,755 stack ['$122load_method.54', '$128binary_add.57']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=132, inst=STORE_FAST(arg=15, lineno=96)
DEBUG 2022-02-14 16:45:25,755 stack ['$130call_method.58']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=134, inst=LOAD_FAST(arg=14, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack []
DEBUG 2022-02-14 16:45:25,755 dispatch pc=136, inst=LOAD_METHOD(arg=6, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack ['$edge_reps134.59']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=138, inst=CALL_METHOD(arg=0, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack ['$136load_method.60']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack ['$138call_method.61']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=142, inst=BINARY_ADD(arg=None, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack ['$138call_method.61', '$even_cutoff140.62']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=144, inst=STORE_FAST(arg=16, lineno=98)
DEBUG 2022-02-14 16:45:25,755 stack ['$142binary_add.63']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=146, inst=LOAD_GLOBAL(arg=7, lineno=99)
DEBUG 2022-02-14 16:45:25,755 stack []
DEBUG 2022-02-14 16:45:25,755 dispatch pc=148, inst=LOAD_FAST(arg=16, lineno=99)
DEBUG 2022-02-14 16:45:25,755 stack ['$146load_global.64']
DEBUG 2022-02-14 16:45:25,755 dispatch pc=150, inst=CALL_FUNCTION(arg=1, lineno=99)
DEBUG 2022-02-14 16:45:25,756 stack ['$146load_global.64', '$max_binom148.65']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=152, inst=STORE_FAST(arg=17, lineno=99)
DEBUG 2022-02-14 16:45:25,756 stack ['$150call_function.66']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=154, inst=LOAD_GLOBAL(arg=2, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack []
DEBUG 2022-02-14 16:45:25,756 dispatch pc=156, inst=LOAD_ATTR(arg=8, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$154load_global.67']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=158, inst=LOAD_CONST(arg=3, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=160, inst=LOAD_FAST(arg=3, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$const158.69']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=162, inst=BINARY_MULTIPLY(arg=None, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$const158.69', '$batch_max160.70']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$162binary_multiply.71']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=166, inst=BINARY_ADD(arg=None, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$162binary_multiply.71', '$even_cutoff164.72']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=168, inst=LOAD_CONST(arg=3, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$166binary_add.73']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$166binary_add.73', '$const168.74']
DEBUG 2022-02-14 16:45:25,756 dispatch pc=172, inst=LOAD_GLOBAL(arg=2, lineno=101)
DEBUG 2022-02-14 16:45:25,756 stack ['$156load_attr.68', '$170binary_add.75']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=174, inst=LOAD_ATTR(arg=9, lineno=101)
DEBUG 2022-02-14 16:45:25,757 stack ['$156load_attr.68', '$170binary_add.75', '$172load_global.76']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=176, inst=LOAD_CONST(arg=4, lineno=101)
DEBUG 2022-02-14 16:45:25,757 stack ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=178, inst=CALL_FUNCTION_KW(arg=2, lineno=101)
DEBUG 2022-02-14 16:45:25,757 stack ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77', '$const176.78']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=180, inst=STORE_FAST(arg=18, lineno=101)
DEBUG 2022-02-14 16:45:25,757 stack ['$178call_function_kw.79']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=182, inst=LOAD_GLOBAL(arg=10, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack []
DEBUG 2022-02-14 16:45:25,757 dispatch pc=184, inst=LOAD_METHOD(arg=11, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack ['$182load_global.80']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=186, inst=LOAD_FAST(arg=15, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack ['$184load_method.81']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=188, inst=CALL_METHOD(arg=1, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack ['$184load_method.81', '$steps186.82']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=190, inst=GET_ITER(arg=None, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack ['$188call_method.83']
DEBUG 2022-02-14 16:45:25,757 end state. edges=[Edge(pc=192, stack=('$190get_iter.84',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,757 pending: deque([State(pc_initial=192 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,757 stack: ['$phi192.0']
DEBUG 2022-02-14 16:45:25,757 dispatch pc=192, inst=FOR_ITER(arg=470, lineno=102)
DEBUG 2022-02-14 16:45:25,757 stack ['$phi192.0']
DEBUG 2022-02-14 16:45:25,758 end state. edges=[Edge(pc=666, stack=(), blockstack=(), npush=0), Edge(pc=196, stack=('$phi192.0', '$192for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,758 pending: deque([State(pc_initial=666 nstack_initial=0), State(pc_initial=196 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,758 stack: []
DEBUG 2022-02-14 16:45:25,758 dispatch pc=666, inst=LOAD_FAST(arg=6, lineno=144)
DEBUG 2022-02-14 16:45:25,758 stack []
DEBUG 2022-02-14 16:45:25,758 dispatch pc=668, inst=POP_JUMP_IF_FALSE(arg=726, lineno=144)
DEBUG 2022-02-14 16:45:25,758 stack ['$glynn666.0']
DEBUG 2022-02-14 16:45:25,758 end state. edges=[Edge(pc=672, stack=(), blockstack=(), npush=0), Edge(pc=726, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,758 pending: deque([State(pc_initial=196 nstack_initial=2), State(pc_initial=672 nstack_initial=0), State(pc_initial=726 nstack_initial=0)])
DEBUG 2022-02-14 16:45:25,758 stack: ['$phi196.0', '$phi196.1']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=196, inst=STORE_FAST(arg=19, lineno=102)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0', '$phi196.1']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=198, inst=LOAD_GLOBAL(arg=2, lineno=104)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=200, inst=LOAD_ATTR(arg=8, lineno=104)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0', '$198load_global.2']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=202, inst=LOAD_CONST(arg=3, lineno=104)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0', '$200load_attr.3']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=104)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0', '$200load_attr.3', '$const202.4']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=206, inst=BINARY_MULTIPLY(arg=None, lineno=104)
DEBUG 2022-02-14 16:45:25,758 stack ['$phi196.0', '$200load_attr.3', '$const202.4', '$batch_max204.5']
DEBUG 2022-02-14 16:45:25,758 dispatch pc=208, inst=LOAD_FAST(arg=4, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$206binary_multiply.6']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=210, inst=BINARY_ADD(arg=None, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$206binary_multiply.6', '$even_cutoff208.7']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=212, inst=LOAD_CONST(arg=3, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$210binary_add.8']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=214, inst=BINARY_ADD(arg=None, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$210binary_add.8', '$const212.9']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=216, inst=LOAD_GLOBAL(arg=2, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=218, inst=LOAD_ATTR(arg=9, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$216load_global.11']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=220, inst=LOAD_CONST(arg=4, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$218load_attr.12']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=222, inst=CALL_FUNCTION_KW(arg=2, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$218load_attr.12', '$const220.13']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=224, inst=STORE_FAST(arg=20, lineno=104)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$222call_function_kw.14']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=226, inst=LOAD_GLOBAL(arg=12, lineno=106)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=228, inst=LOAD_FAST(arg=19, lineno=106)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$226load_global.15']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=106)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$226load_global.15', '$j228.16']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=232, inst=CALL_FUNCTION(arg=2, lineno=106)
DEBUG 2022-02-14 16:45:25,759 stack ['$phi196.0', '$226load_global.15', '$j228.16', '$edge_reps230.17']
DEBUG 2022-02-14 16:45:25,759 dispatch pc=234, inst=STORE_FAST(arg=21, lineno=106)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$232call_function.18']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=236, inst=LOAD_FAST(arg=21, lineno=107)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=238, inst=LOAD_METHOD(arg=1, lineno=107)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$kept_edges236.19']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=240, inst=CALL_METHOD(arg=0, lineno=107)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$238load_method.20']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=242, inst=STORE_FAST(arg=22, lineno=107)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$240call_method.21']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=244, inst=LOAD_CONST(arg=5, lineno=109)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=246, inst=STORE_FAST(arg=23, lineno=109)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$const244.22']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=248, inst=LOAD_GLOBAL(arg=13, lineno=110)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=250, inst=LOAD_CONST(arg=2, lineno=110)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$248load_global.23']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=252, inst=LOAD_FAST(arg=11, lineno=110)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$248load_global.23', '$const250.24']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=254, inst=LOAD_CONST(arg=3, lineno=110)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$n252.25']
DEBUG 2022-02-14 16:45:25,760 dispatch pc=256, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=110)
DEBUG 2022-02-14 16:45:25,760 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$n252.25', '$const254.26']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=258, inst=CALL_FUNCTION(arg=2, lineno=110)
DEBUG 2022-02-14 16:45:25,761 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$256binary_floor_divide.27']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=260, inst=GET_ITER(arg=None, lineno=110)
DEBUG 2022-02-14 16:45:25,761 stack ['$phi196.0', '$258call_function.28']
DEBUG 2022-02-14 16:45:25,761 end state. edges=[Edge(pc=262, stack=('$phi196.0', '$260get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,761 pending: deque([State(pc_initial=672 nstack_initial=0), State(pc_initial=726 nstack_initial=0), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,761 stack: []
DEBUG 2022-02-14 16:45:25,761 dispatch pc=672, inst=LOAD_GLOBAL(arg=13, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack []
DEBUG 2022-02-14 16:45:25,761 dispatch pc=674, inst=LOAD_FAST(arg=18, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$672load_global.0']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=676, inst=LOAD_ATTR(arg=0, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$672load_global.0', '$H_batch674.1']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=678, inst=LOAD_CONST(arg=1, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$672load_global.0', '$676load_attr.2']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=680, inst=BINARY_SUBSCR(arg=None, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$672load_global.0', '$676load_attr.2', '$const678.3']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=682, inst=CALL_FUNCTION(arg=1, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$672load_global.0', '$680binary_subscr.4']
DEBUG 2022-02-14 16:45:25,761 dispatch pc=684, inst=GET_ITER(arg=None, lineno=145)
DEBUG 2022-02-14 16:45:25,761 stack ['$682call_function.5']
DEBUG 2022-02-14 16:45:25,761 end state. edges=[Edge(pc=686, stack=('$684get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,761 pending: deque([State(pc_initial=726 nstack_initial=0), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,762 stack: []
DEBUG 2022-02-14 16:45:25,762 dispatch pc=726, inst=LOAD_FAST(arg=18, lineno=149)
DEBUG 2022-02-14 16:45:25,762 stack []
DEBUG 2022-02-14 16:45:25,762 dispatch pc=728, inst=RETURN_VALUE(arg=None, lineno=149)
DEBUG 2022-02-14 16:45:25,762 stack ['$H_batch726.0']
DEBUG 2022-02-14 16:45:25,762 end state. edges=[]
DEBUG 2022-02-14 16:45:25,762 pending: deque([State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,762 stack: ['$phi262.0', '$phi262.1']
DEBUG 2022-02-14 16:45:25,762 dispatch pc=262, inst=FOR_ITER(arg=30, lineno=110)
DEBUG 2022-02-14 16:45:25,762 stack ['$phi262.0', '$phi262.1']
DEBUG 2022-02-14 16:45:25,762 end state. edges=[Edge(pc=294, stack=('$phi262.0',), blockstack=(), npush=0), Edge(pc=264, stack=('$phi262.0', '$phi262.1', '$262for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,762 pending: deque([State(pc_initial=686 nstack_initial=1), State(pc_initial=294 nstack_initial=1), State(pc_initial=264 nstack_initial=3)])
DEBUG 2022-02-14 16:45:25,762 stack: ['$phi686.0']
DEBUG 2022-02-14 16:45:25,762 dispatch pc=686, inst=FOR_ITER(arg=38, lineno=145)
DEBUG 2022-02-14 16:45:25,762 stack ['$phi686.0']
DEBUG 2022-02-14 16:45:25,762 end state. edges=[Edge(pc=726, stack=(), blockstack=(), npush=0), Edge(pc=688, stack=('$phi686.0', '$686for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,762 pending: deque([State(pc_initial=294 nstack_initial=1), State(pc_initial=264 nstack_initial=3), State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,762 stack: ['$phi294.0']
DEBUG 2022-02-14 16:45:25,762 dispatch pc=294, inst=LOAD_FAST(arg=6, lineno=113)
DEBUG 2022-02-14 16:45:25,762 stack ['$phi294.0']
DEBUG 2022-02-14 16:45:25,762 dispatch pc=296, inst=POP_JUMP_IF_FALSE(arg=314, lineno=113)
DEBUG 2022-02-14 16:45:25,762 stack ['$phi294.0', '$glynn294.1']
DEBUG 2022-02-14 16:45:25,762 end state. edges=[Edge(pc=300, stack=('$phi294.0',), blockstack=(), npush=0), Edge(pc=314, stack=('$phi294.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,762 pending: deque([State(pc_initial=264 nstack_initial=3), State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,763 stack: ['$phi264.0', '$phi264.1', '$phi264.2']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=264, inst=STORE_FAST(arg=24, lineno=110)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$phi264.2']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=266, inst=LOAD_FAST(arg=23, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=268, inst=LOAD_FAST(arg=17, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=270, inst=LOAD_FAST(arg=14, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=272, inst=LOAD_FAST(arg=24, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$edge_reps270.5']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$edge_reps270.5', '$i272.6']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=276, inst=LOAD_FAST(arg=21, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=278, inst=LOAD_FAST(arg=24, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$kept_edges276.8']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=280, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$kept_edges276.8', '$i278.9']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$280binary_subscr.10']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:45:25,763 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$282build_tuple.11']
DEBUG 2022-02-14 16:45:25,763 dispatch pc=286, inst=INPLACE_MULTIPLY(arg=None, lineno=111)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$284binary_subscr.12']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=288, inst=STORE_FAST(arg=23, lineno=111)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi264.0', '$phi264.1', '$286inplace_multiply.13']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=290, inst=JUMP_ABSOLUTE(arg=262, lineno=111)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi264.0', '$phi264.1']
DEBUG 2022-02-14 16:45:25,764 end state. edges=[Edge(pc=262, stack=('$phi264.0', '$phi264.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,764 pending: deque([State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,764 pending: deque([State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,764 stack: ['$phi688.0', '$phi688.1']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=688, inst=STORE_FAST(arg=19, lineno=145)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$phi688.1']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=690, inst=LOAD_FAST(arg=12, lineno=146)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=692, inst=LOAD_FAST(arg=19, lineno=146)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$N_fixed690.2']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=694, inst=BINARY_ADD(arg=None, lineno=146)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$N_fixed690.2', '$j692.3']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=696, inst=STORE_FAST(arg=39, lineno=146)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$694binary_add.4']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=698, inst=LOAD_FAST(arg=18, lineno=147)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=700, inst=LOAD_FAST(arg=19, lineno=147)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$H_batch698.5']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=702, inst=DUP_TOP_TWO(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,764 stack ['$phi688.0', '$H_batch698.5', '$j700.6']
DEBUG 2022-02-14 16:45:25,764 dispatch pc=704, inst=BINARY_SUBSCR(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$702dup_top_two.7', '$702dup_top_two.8']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=706, inst=LOAD_CONST(arg=7, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=708, inst=LOAD_FAST(arg=39, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=710, inst=LOAD_CONST(arg=3, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$x708.11']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=712, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$x708.11', '$const710.12']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=714, inst=BINARY_POWER(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$712binary_floor_divide.13']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=716, inst=INPLACE_MULTIPLY(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$714binary_power.14']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=718, inst=ROT_THREE(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$716inplace_multiply.15']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=720, inst=STORE_SUBSCR(arg=None, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0', '$716inplace_multiply.15', '$H_batch698.5', '$j700.6']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=722, inst=JUMP_ABSOLUTE(arg=686, lineno=147)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi688.0']
DEBUG 2022-02-14 16:45:25,765 end state. edges=[Edge(pc=686, stack=('$phi688.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,765 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,765 stack: ['$phi300.0']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=300, inst=LOAD_CONST(arg=3, lineno=114)
DEBUG 2022-02-14 16:45:25,765 stack ['$phi300.0']
DEBUG 2022-02-14 16:45:25,765 dispatch pc=302, inst=LOAD_FAST(arg=21, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0', '$const300.1']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=304, inst=BINARY_MULTIPLY(arg=None, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0', '$const300.1', '$kept_edges302.2']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=306, inst=LOAD_FAST(arg=14, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0', '$304binary_multiply.3']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=308, inst=BINARY_SUBTRACT(arg=None, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0', '$304binary_multiply.3', '$edge_reps306.4']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=310, inst=STORE_FAST(arg=25, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0', '$308binary_subtract.5']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=312, inst=JUMP_FORWARD(arg=4, lineno=114)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi300.0']
DEBUG 2022-02-14 16:45:25,766 end state. edges=[Edge(pc=318, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,766 pending: deque([State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,766 stack: ['$phi314.0']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=314, inst=LOAD_FAST(arg=21, lineno=116)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi314.0']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=316, inst=STORE_FAST(arg=25, lineno=116)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi314.0', '$kept_edges314.1']
DEBUG 2022-02-14 16:45:25,766 end state. edges=[Edge(pc=318, stack=('$phi314.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,766 pending: deque([State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,766 pending: deque([State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,766 pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,766 stack: ['$phi318.0']
DEBUG 2022-02-14 16:45:25,766 dispatch pc=318, inst=LOAD_GLOBAL(arg=14, lineno=118)
DEBUG 2022-02-14 16:45:25,766 stack ['$phi318.0']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$318load_global.1']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=322, inst=LOAD_FAST(arg=0, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$318load_global.1', '$delta320.2']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=324, inst=LOAD_FAST(arg=1, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=326, inst=LOAD_FAST(arg=8, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3', '$D324.4']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=328, inst=CALL_FUNCTION(arg=4, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3', '$D324.4', '$oddV326.5']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=330, inst=UNPACK_SEQUENCE(arg=4, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$328call_function.6']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=332, inst=STORE_FAST(arg=26, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9', '$330unpack_sequence.8', '$330unpack_sequence.7']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=334, inst=STORE_FAST(arg=27, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9', '$330unpack_sequence.8']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=336, inst=STORE_FAST(arg=28, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=338, inst=STORE_FAST(arg=29, lineno=118)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$330unpack_sequence.10']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=340, inst=LOAD_GLOBAL(arg=15, lineno=120)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0']
DEBUG 2022-02-14 16:45:25,767 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=120)
DEBUG 2022-02-14 16:45:25,767 stack ['$phi318.0', '$340load_global.12']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=344, inst=CALL_FUNCTION(arg=1, lineno=120)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$340load_global.12', '$AX_S342.13']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=346, inst=STORE_FAST(arg=30, lineno=120)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$344call_function.14']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=348, inst=LOAD_FAST(arg=21, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=350, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$kept_edges348.15']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=352, inst=BINARY_SUBSCR(arg=None, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$kept_edges348.15', '$const350.16']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$352binary_subscr.17']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=356, inst=COMPARE_OP(arg=2, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$352binary_subscr.17', '$const354.18']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=358, inst=POP_JUMP_IF_FALSE(arg=450, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi318.0', '$356compare_op.19']
DEBUG 2022-02-14 16:45:25,768 end state. edges=[Edge(pc=362, stack=('$phi318.0',), blockstack=(), npush=0), Edge(pc=450, stack=('$phi318.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,768 pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=362 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,768 pending: deque([State(pc_initial=362 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,768 stack: ['$phi362.0']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=362, inst=LOAD_FAST(arg=21, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi362.0']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=364, inst=LOAD_CONST(arg=2, lineno=122)
DEBUG 2022-02-14 16:45:25,768 stack ['$phi362.0', '$kept_edges362.1']
DEBUG 2022-02-14 16:45:25,768 dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=122)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi362.0', '$kept_edges362.1', '$const364.2']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=368, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi362.0', '$366binary_subscr.3']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=370, inst=COMPARE_OP(arg=2, lineno=122)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi362.0', '$366binary_subscr.3', '$const368.4']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=372, inst=POP_JUMP_IF_FALSE(arg=450, lineno=122)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi362.0', '$370compare_op.5']
DEBUG 2022-02-14 16:45:25,769 end state. edges=[Edge(pc=376, stack=('$phi362.0',), blockstack=(), npush=0), Edge(pc=450, stack=('$phi362.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,769 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=376 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,769 stack: ['$phi450.0']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=450, inst=LOAD_GLOBAL(arg=18, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=452, inst=LOAD_FAST(arg=30, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=454, inst=LOAD_FAST(arg=26, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1', '$E452.2']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=456, inst=LOAD_FAST(arg=27, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=460, inst=LOAD_FAST(arg=13, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=462, inst=CALL_FUNCTION(arg=5, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5', '$N_max460.6']
DEBUG 2022-02-14 16:45:25,769 dispatch pc=464, inst=STORE_FAST(arg=34, lineno=128)
DEBUG 2022-02-14 16:45:25,769 stack ['$phi450.0', '$462call_function.7']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=466, inst=LOAD_GLOBAL(arg=17, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=468, inst=LOAD_FAST(arg=30, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=470, inst=LOAD_FAST(arg=26, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=472, inst=LOAD_FAST(arg=27, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=474, inst=LOAD_FAST(arg=28, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=476, inst=LOAD_FAST(arg=13, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=478, inst=LOAD_FAST(arg=7, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=480, inst=LOAD_FAST(arg=29, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=482, inst=CALL_FUNCTION(arg=7, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14', '$oddVX_S480.15']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=484, inst=STORE_FAST(arg=35, lineno=129)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$482call_function.16']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=486, inst=LOAD_GLOBAL(arg=13, lineno=131)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=488, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$486load_global.17']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=490, inst=LOAD_FAST(arg=21, lineno=131)
DEBUG 2022-02-14 16:45:25,770 stack ['$phi450.0', '$486load_global.17', '$const488.18']
DEBUG 2022-02-14 16:45:25,770 dispatch pc=492, inst=LOAD_CONST(arg=1, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$kept_edges490.19']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=494, inst=BINARY_SUBSCR(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$kept_edges490.19', '$const492.20']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=496, inst=BINARY_MULTIPLY(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$494binary_subscr.21']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=498, inst=LOAD_CONST(arg=2, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$496binary_multiply.22']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=500, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$496binary_multiply.22', '$const498.23']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=502, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=504, inst=LOAD_FAST(arg=3, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$const502.25']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=506, inst=BINARY_MULTIPLY(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$const502.25', '$batch_max504.26']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=508, inst=LOAD_FAST(arg=4, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$506binary_multiply.27']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=510, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$506binary_multiply.27', '$even_cutoff508.28']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=512, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$510binary_add.29']
DEBUG 2022-02-14 16:45:25,771 dispatch pc=514, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,771 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$510binary_add.29', '$const512.30']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=516, inst=CALL_FUNCTION(arg=2, lineno=131)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$514binary_add.31']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=518, inst=GET_ITER(arg=None, lineno=131)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi450.0', '$516call_function.32']
DEBUG 2022-02-14 16:45:25,772 end state. edges=[Edge(pc=520, stack=('$phi450.0', '$518get_iter.33'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,772 pending: deque([State(pc_initial=376 nstack_initial=1), State(pc_initial=450 nstack_initial=1), State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,772 stack: ['$phi376.0']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=376, inst=LOAD_GLOBAL(arg=16, lineno=123)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=378, inst=LOAD_FAST(arg=25, lineno=123)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$376load_global.1']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=380, inst=LOAD_FAST(arg=10, lineno=123)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$376load_global.1', '$delta378.2']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=382, inst=CALL_FUNCTION(arg=2, lineno=123)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$376load_global.1', '$delta378.2', '$oddV0380.3']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=384, inst=STORE_FAST(arg=31, lineno=123)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$382call_function.4']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=386, inst=LOAD_CONST(arg=6, lineno=124)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=388, inst=LOAD_FAST(arg=12, lineno=124)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$const386.5']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=390, inst=LOAD_CONST(arg=3, lineno=124)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$const386.5', '$N_fixed388.6']
DEBUG 2022-02-14 16:45:25,772 dispatch pc=392, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=124)
DEBUG 2022-02-14 16:45:25,772 stack ['$phi376.0', '$const386.5', '$N_fixed388.6', '$const390.7']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=394, inst=LOAD_FAST(arg=22, lineno=124)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$const386.5', '$392binary_floor_divide.8']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=396, inst=BINARY_SUBTRACT(arg=None, lineno=124)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$const386.5', '$392binary_floor_divide.8', '$edges_sum394.9']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=398, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$const386.5', '$396binary_subtract.10']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=400, inst=STORE_FAST(arg=32, lineno=124)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$398binary_power.11']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=402, inst=LOAD_GLOBAL(arg=17, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=404, inst=LOAD_FAST(arg=30, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=406, inst=LOAD_FAST(arg=26, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=408, inst=LOAD_FAST(arg=27, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=410, inst=LOAD_FAST(arg=28, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=412, inst=LOAD_FAST(arg=12, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=414, inst=LOAD_FAST(arg=9, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=416, inst=LOAD_FAST(arg=31, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18']
DEBUG 2022-02-14 16:45:25,773 dispatch pc=418, inst=CALL_FUNCTION(arg=7, lineno=125)
DEBUG 2022-02-14 16:45:25,773 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18', '$oddVX_S0416.19']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=420, inst=LOAD_FAST(arg=12, lineno=125)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$418call_function.20']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=125)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$418call_function.20', '$N_fixed420.21']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=424, inst=STORE_FAST(arg=33, lineno=125)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$422binary_subscr.22']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=426, inst=LOAD_FAST(arg=18, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=428, inst=LOAD_CONST(arg=1, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=430, inst=DUP_TOP_TWO(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=432, inst=BINARY_SUBSCR(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$430dup_top_two.25', '$430dup_top_two.26']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=434, inst=LOAD_FAST(arg=23, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=436, inst=LOAD_FAST(arg=32, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$binom_prod434.28']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=438, inst=BINARY_MULTIPLY(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$binom_prod434.28', '$plus_minus436.29']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=440, inst=LOAD_FAST(arg=33, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$438binary_multiply.30']
DEBUG 2022-02-14 16:45:25,774 dispatch pc=442, inst=BINARY_MULTIPLY(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,774 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$438binary_multiply.30', '$f440.31']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=444, inst=INPLACE_ADD(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$442binary_multiply.32']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=446, inst=ROT_THREE(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$444inplace_add.33']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=448, inst=STORE_SUBSCR(arg=None, lineno=126)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi376.0', '$444inplace_add.33', '$H_batch426.23', '$const428.24']
DEBUG 2022-02-14 16:45:25,775 end state. edges=[Edge(pc=450, stack=('$phi376.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,775 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=520 nstack_initial=2), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,775 pending: deque([State(pc_initial=520 nstack_initial=2), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,775 stack: ['$phi520.0', '$phi520.1']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=520, inst=FOR_ITER(arg=134, lineno=131)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi520.0', '$phi520.1']
DEBUG 2022-02-14 16:45:25,775 end state. edges=[Edge(pc=656, stack=('$phi520.0',), blockstack=(), npush=0), Edge(pc=522, stack=('$phi520.0', '$phi520.1', '$520for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,775 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=656 nstack_initial=1), State(pc_initial=522 nstack_initial=3)])
DEBUG 2022-02-14 16:45:25,775 pending: deque([State(pc_initial=656 nstack_initial=1), State(pc_initial=522 nstack_initial=3)])
DEBUG 2022-02-14 16:45:25,775 stack: ['$phi656.0']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=656, inst=LOAD_FAST(arg=18, lineno=142)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi656.0']
DEBUG 2022-02-14 16:45:25,775 dispatch pc=658, inst=LOAD_FAST(arg=20, lineno=142)
DEBUG 2022-02-14 16:45:25,775 stack ['$phi656.0', '$H_batch656.1']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=660, inst=INPLACE_ADD(arg=None, lineno=142)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi656.0', '$H_batch656.1', '$Hnew658.2']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=662, inst=STORE_FAST(arg=18, lineno=142)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi656.0', '$660inplace_add.3']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=664, inst=JUMP_ABSOLUTE(arg=192, lineno=142)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi656.0']
DEBUG 2022-02-14 16:45:25,776 end state. edges=[Edge(pc=192, stack=('$phi656.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,776 pending: deque([State(pc_initial=522 nstack_initial=3), State(pc_initial=192 nstack_initial=1)])
DEBUG 2022-02-14 16:45:25,776 stack: ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=522, inst=STORE_FAST(arg=36, lineno=131)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=524, inst=LOAD_FAST(arg=12, lineno=132)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=526, inst=LOAD_FAST(arg=36, lineno=132)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$N_fixed524.3']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=528, inst=BINARY_ADD(arg=None, lineno=132)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$N_fixed524.3', '$N_det526.4']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=530, inst=STORE_FAST(arg=37, lineno=132)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$528binary_add.5']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=532, inst=LOAD_CONST(arg=6, lineno=133)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=534, inst=LOAD_FAST(arg=37, lineno=133)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$const532.6']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=536, inst=LOAD_CONST(arg=3, lineno=133)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$const532.6', '$N534.7']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=538, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=133)
DEBUG 2022-02-14 16:45:25,776 stack ['$phi522.0', '$phi522.1', '$const532.6', '$N534.7', '$const536.8']
DEBUG 2022-02-14 16:45:25,776 dispatch pc=540, inst=LOAD_FAST(arg=22, lineno=133)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$const532.6', '$538binary_floor_divide.9']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=542, inst=BINARY_SUBTRACT(arg=None, lineno=133)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$const532.6', '$538binary_floor_divide.9', '$edges_sum540.10']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=544, inst=BINARY_POWER(arg=None, lineno=133)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$const532.6', '$542binary_subtract.11']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=546, inst=STORE_FAST(arg=32, lineno=133)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$544binary_power.12']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=548, inst=LOAD_FAST(arg=17, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=550, inst=LOAD_FAST(arg=36, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=552, inst=LOAD_CONST(arg=2, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$N_det550.14']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=554, inst=BINARY_SUBTRACT(arg=None, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$N_det550.14', '$const552.15']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=556, inst=LOAD_CONST(arg=3, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$554binary_subtract.16']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=558, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$554binary_subtract.16', '$const556.17']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=560, inst=LOAD_FAST(arg=21, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=562, inst=LOAD_CONST(arg=1, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$kept_edges560.19']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=564, inst=BINARY_SUBSCR(arg=None, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$kept_edges560.19', '$const562.20']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=566, inst=BUILD_TUPLE(arg=2, lineno=135)
DEBUG 2022-02-14 16:45:25,777 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$564binary_subscr.21']
DEBUG 2022-02-14 16:45:25,777 dispatch pc=568, inst=BINARY_SUBSCR(arg=None, lineno=135)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$566build_tuple.22']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=570, inst=LOAD_FAST(arg=23, lineno=135)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$568binary_subscr.23']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=572, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$568binary_subscr.23', '$binom_prod570.24']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=574, inst=STORE_FAST(arg=38, lineno=135)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$572binary_multiply.25']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=576, inst=LOAD_FAST(arg=37, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=578, inst=LOAD_CONST(arg=3, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$N576.26']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=580, inst=BINARY_MODULO(arg=None, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$N576.26', '$const578.27']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=582, inst=LOAD_CONST(arg=1, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$580binary_modulo.28']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=584, inst=COMPARE_OP(arg=2, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$580binary_modulo.28', '$const582.29']
DEBUG 2022-02-14 16:45:25,778 dispatch pc=586, inst=POP_JUMP_IF_FALSE(arg=624, lineno=137)
DEBUG 2022-02-14 16:45:25,778 stack ['$phi522.0', '$phi522.1', '$584compare_op.30']
DEBUG 2022-02-14 16:45:25,778 end state. edges=[Edge(pc=590, stack=('$phi522.0', '$phi522.1'), blockstack=(), npush=0), Edge(pc=624, stack=('$phi522.0', '$phi522.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,778 pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=590 nstack_initial=2), State(pc_initial=624 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,778 pending: deque([State(pc_initial=590 nstack_initial=2), State(pc_initial=624 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,778 stack: ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=590, inst=LOAD_FAST(arg=20, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=592, inst=LOAD_FAST(arg=36, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=594, inst=DUP_TOP_TWO(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=596, inst=BINARY_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$594dup_top_two.4', '$594dup_top_two.5']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=598, inst=LOAD_FAST(arg=38, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=600, inst=LOAD_FAST(arg=32, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$n_det_binom_prod598.7']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=602, inst=BINARY_MULTIPLY(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$n_det_binom_prod598.7', '$plus_minus600.8']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=604, inst=LOAD_FAST(arg=34, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=606, inst=LOAD_FAST(arg=37, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=608, inst=LOAD_CONST(arg=3, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$N606.11']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=610, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$N606.11', '$const608.12']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=612, inst=BINARY_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$610binary_floor_divide.13']
DEBUG 2022-02-14 16:45:25,779 dispatch pc=614, inst=BINARY_MULTIPLY(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,779 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$612binary_subscr.14']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=616, inst=INPLACE_ADD(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$614binary_multiply.15']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=618, inst=ROT_THREE(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$616inplace_add.16']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=620, inst=STORE_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi590.0', '$phi590.1', '$616inplace_add.16', '$Hnew590.2', '$N_det592.3']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=622, inst=JUMP_FORWARD(arg=28, lineno=138)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:45:25,780 end state. edges=[Edge(pc=652, stack=('$phi590.0', '$phi590.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,780 pending: deque([State(pc_initial=624 nstack_initial=2), State(pc_initial=652 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,780 stack: ['$phi624.0', '$phi624.1']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=624, inst=LOAD_FAST(arg=20, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=626, inst=LOAD_FAST(arg=36, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=628, inst=DUP_TOP_TWO(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=630, inst=BINARY_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$628dup_top_two.4', '$628dup_top_two.5']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=632, inst=LOAD_FAST(arg=38, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=634, inst=LOAD_FAST(arg=32, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$n_det_binom_prod632.7']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=636, inst=BINARY_MULTIPLY(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$n_det_binom_prod632.7', '$plus_minus634.8']
DEBUG 2022-02-14 16:45:25,780 dispatch pc=638, inst=LOAD_FAST(arg=35, lineno=140)
DEBUG 2022-02-14 16:45:25,780 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=640, inst=LOAD_FAST(arg=37, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$f_odd638.10']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=642, inst=BINARY_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$f_odd638.10', '$N640.11']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=644, inst=BINARY_MULTIPLY(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$642binary_subscr.12']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=646, inst=INPLACE_ADD(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$644binary_multiply.13']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=648, inst=ROT_THREE(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$646inplace_add.14']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=650, inst=STORE_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi624.0', '$phi624.1', '$646inplace_add.14', '$Hnew624.2', '$N_det626.3']
DEBUG 2022-02-14 16:45:25,781 end state. edges=[Edge(pc=652, stack=('$phi624.0', '$phi624.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,781 pending: deque([State(pc_initial=652 nstack_initial=2), State(pc_initial=652 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,781 stack: ['$phi652.0', '$phi652.1']
DEBUG 2022-02-14 16:45:25,781 dispatch pc=652, inst=JUMP_ABSOLUTE(arg=520, lineno=140)
DEBUG 2022-02-14 16:45:25,781 stack ['$phi652.0', '$phi652.1']
DEBUG 2022-02-14 16:45:25,781 end state. edges=[Edge(pc=520, stack=('$phi652.0', '$phi652.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:25,781 pending: deque([State(pc_initial=652 nstack_initial=2), State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,781 pending: deque([State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:45:25,781 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:25,782 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=1): {'$phi192.0'},
             State(pc_initial=196 nstack_initial=2): {'$phi196.1'},
             State(pc_initial=262 nstack_initial=2): {'$phi262.1'},
             State(pc_initial=264 nstack_initial=3): {'$phi264.2'},
             State(pc_initial=294 nstack_initial=1): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=314 nstack_initial=1): set(),
             State(pc_initial=318 nstack_initial=1): set(),
             State(pc_initial=362 nstack_initial=1): set(),
             State(pc_initial=376 nstack_initial=1): set(),
             State(pc_initial=450 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=2): {'$phi520.1'},
             State(pc_initial=522 nstack_initial=3): {'$phi522.2'},
             State(pc_initial=590 nstack_initial=2): set(),
             State(pc_initial=624 nstack_initial=2): set(),
             State(pc_initial=652 nstack_initial=2): set(),
             State(pc_initial=656 nstack_initial=1): set(),
             State(pc_initial=666 nstack_initial=0): set(),
             State(pc_initial=672 nstack_initial=0): set(),
             State(pc_initial=686 nstack_initial=1): {'$phi686.0'},
             State(pc_initial=688 nstack_initial=2): {'$phi688.1'},
             State(pc_initial=726 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:25,782 defmap: {'$phi192.0': State(pc_initial=0 nstack_initial=0),
 '$phi196.1': State(pc_initial=192 nstack_initial=1),
 '$phi262.1': State(pc_initial=196 nstack_initial=2),
 '$phi264.2': State(pc_initial=262 nstack_initial=2),
 '$phi520.1': State(pc_initial=450 nstack_initial=1),
 '$phi522.2': State(pc_initial=520 nstack_initial=2),
 '$phi686.0': State(pc_initial=672 nstack_initial=0),
 '$phi688.1': State(pc_initial=686 nstack_initial=1)}
DEBUG 2022-02-14 16:45:25,782 phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi656.0',
                            State(pc_initial=656 nstack_initial=1))},
             '$phi196.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$phi196.0',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi264.0',
                            State(pc_initial=264 nstack_initial=3))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi264.1',
                            State(pc_initial=264 nstack_initial=3))},
             '$phi264.0': {('$phi262.0',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.1': {('$phi262.1',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$phi262.0',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi300.0': {('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi314.0': {('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi318.0': {('$phi300.0',
                            State(pc_initial=300 nstack_initial=1)),
                           ('$phi314.0',
                            State(pc_initial=314 nstack_initial=1))},
             '$phi362.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi376.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=1))},
             '$phi450.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=1)),
                           ('$phi376.0',
                            State(pc_initial=376 nstack_initial=1))},
             '$phi520.0': {('$phi450.0',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi652.0',
                            State(pc_initial=652 nstack_initial=2))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi652.1',
                            State(pc_initial=652 nstack_initial=2))},
             '$phi522.0': {('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi522.1': {('$phi520.1',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi590.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi624.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi624.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi652.0': {('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi652.1': {('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi656.0': {('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0)),
                           ('$phi688.0',
                            State(pc_initial=688 nstack_initial=2))},
             '$phi688.0': {('$phi686.0',
                            State(pc_initial=686 nstack_initial=1))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:25,784 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi262.0',
                            State(pc_initial=262 nstack_initial=2)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi262.1',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0)),
                           ('$phi686.0',
                            State(pc_initial=686 nstack_initial=1))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:25,785 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:25,787 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:25,788 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:25,789 keep phismap: {'$phi192.0': {('$190get_iter.84', State(pc_initial=0 nstack_initial=0))},
 '$phi196.1': {('$192for_iter.2', State(pc_initial=192 nstack_initial=1))},
 '$phi262.1': {('$260get_iter.29', State(pc_initial=196 nstack_initial=2))},
 '$phi264.2': {('$262for_iter.3', State(pc_initial=262 nstack_initial=2))},
 '$phi520.1': {('$518get_iter.33', State(pc_initial=450 nstack_initial=1))},
 '$phi522.2': {('$520for_iter.3', State(pc_initial=520 nstack_initial=2))},
 '$phi686.0': {('$684get_iter.6', State(pc_initial=672 nstack_initial=0))},
 '$phi688.1': {('$686for_iter.2', State(pc_initial=686 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:25,790 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi192.0': '$190get_iter.84'},
             State(pc_initial=192 nstack_initial=1): {'$phi196.1': '$192for_iter.2'},
             State(pc_initial=196 nstack_initial=2): {'$phi262.1': '$260get_iter.29'},
             State(pc_initial=262 nstack_initial=2): {'$phi264.2': '$262for_iter.3'},
             State(pc_initial=450 nstack_initial=1): {'$phi520.1': '$518get_iter.33'},
             State(pc_initial=520 nstack_initial=2): {'$phi522.2': '$520for_iter.3'},
             State(pc_initial=672 nstack_initial=0): {'$phi686.0': '$684get_iter.6'},
             State(pc_initial=686 nstack_initial=1): {'$phi688.1': '$686for_iter.2'}})
DEBUG 2022-02-14 16:45:25,790 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:25,790 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$D26.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$D26.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$A34.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$const38.16'}), (40, {'res': '$const40.17'}), (42, {'start': '$const38.16', 'stop': '$const40.17', 'step': None, 'res': '$42build_slice.19', 'slicevar': '$42build_slice.18'}), (44, {'items': ['$const36.15', '$42build_slice.19'], 'res': '$44build_tuple.20'}), (46, {'index': '$44build_tuple.20', 'target': '$A34.14', 'res': '$46binary_subscr.21'}), (48, {'value': '$46binary_subscr.21'}), (50, {'res': '$A50.22'}), (52, {'item': '$A50.22', 'res': '$52load_attr.23'}), (54, {'res': '$const54.24'}), (56, {'index': '$const54.24', 'target': '$52load_attr.23', 'res': '$56binary_subscr.25'}), (58, {'value': '$56binary_subscr.25'}), (60, {'res': '$const60.26'}), (62, {'res': '$fixed_edge_reps62.27'}), (64, {'item': '$fixed_edge_reps62.27', 'res': '$64load_method.28'}), (66, {'func': '$64load_method.28', 'args': [], 'res': '$66call_method.29'}), (68, {'lhs': '$const60.26', 'rhs': '$66call_method.29', 'res': '$68binary_multiply.30'}), (70, {'res': '$const70.31'}), (72, {'lhs': '$68binary_multiply.30', 'rhs': '$const70.31', 'res': '$72binary_add.32'}), (74, {'value': '$72binary_add.32'}), (76, {'res': '$N_fixed76.33'}), (78, {'res': '$const78.34'}), (80, {'res': '$batch_max80.35'}), (82, {'lhs': '$const78.34', 'rhs': '$batch_max80.35', 'res': '$82binary_multiply.36'}), (84, {'lhs': '$N_fixed76.33', 'rhs': '$82binary_multiply.36', 'res': '$84binary_add.37'}), (86, {'res': '$even_cutoff86.38'}), (88, {'lhs': '$84binary_add.37', 'rhs': '$even_cutoff86.38', 'res': '$88binary_add.39'}), (90, {'res': '$const90.40'}), (92, {'lhs': '$88binary_add.39', 'rhs': '$const90.40', 'res': '$92binary_add.41'}), (94, {'value': '$92binary_add.41'}), (96, {'res': '$96load_global.42'}), (98, {'item': '$96load_global.42', 'res': '$98load_method.43'}), (100, {'res': '$100load_global.44'}), (102, {'item': '$100load_global.44', 'res': '$102load_method.45'}), (104, {'res': '$batch_max104.46'}), (106, {'res': '$const106.47'}), (108, {'items': ['$batch_max104.46', '$const106.47'], 'res': '$108build_list.48'}), (110, {'func': '$102load_method.45', 'args': ['$108build_list.48'], 'res': '$110call_method.49'}), (112, {'res': '$fixed_edge_reps112.50'}), (114, {'items': ['$110call_method.49', '$fixed_edge_reps112.50'], 'res': '$114build_tuple.51'}), (116, {'func': '$98load_method.43', 'args': ['$114build_tuple.51'], 'res': '$116call_method.52'}), (118, {'value': '$116call_method.52'}), (120, {'res': '$120load_global.53'}), (122, {'item': '$120load_global.53', 'res': '$122load_method.54'}), (124, {'res': '$edge_reps124.55'}), (126, {'res': '$const126.56'}), (128, {'lhs': '$edge_reps124.55', 'rhs': '$const126.56', 'res': '$128binary_add.57'}), (130, {'func': '$122load_method.54', 'args': ['$128binary_add.57'], 'res': '$130call_method.58'}), (132, {'value': '$130call_method.58'}), (134, {'res': '$edge_reps134.59'}), (136, {'item': '$edge_reps134.59', 'res': '$136load_method.60'}), (138, {'func': '$136load_method.60', 'args': [], 'res': '$138call_method.61'}), (140, {'res': '$even_cutoff140.62'}), (142, {'lhs': '$138call_method.61', 'rhs': '$even_cutoff140.62', 'res': '$142binary_add.63'}), (144, {'value': '$142binary_add.63'}), (146, {'res': '$146load_global.64'}), (148, {'res': '$max_binom148.65'}), (150, {'func': '$146load_global.64', 'args': ['$max_binom148.65'], 'res': '$150call_function.66'}), (152, {'value': '$150call_function.66'}), (154, {'res': '$154load_global.67'}), (156, {'item': '$154load_global.67', 'res': '$156load_attr.68'}), (158, {'res': '$const158.69'}), (160, {'res': '$batch_max160.70'}), (162, {'lhs': '$const158.69', 'rhs': '$batch_max160.70', 'res': '$162binary_multiply.71'}), (164, {'res': '$even_cutoff164.72'}), (166, {'lhs': '$162binary_multiply.71', 'rhs': '$even_cutoff164.72', 'res': '$166binary_add.73'}), (168, {'res': '$const168.74'}), (170, {'lhs': '$166binary_add.73', 'rhs': '$const168.74', 'res': '$170binary_add.75'}), (172, {'res': '$172load_global.76'}), (174, {'item': '$172load_global.76', 'res': '$174load_attr.77'}), (176, {'res': '$const176.78'}), (178, {'func': '$156load_attr.68', 'args': ['$170binary_add.75', '$174load_attr.77'], 'names': '$const176.78', 'res': '$178call_function_kw.79'}), (180, {'value': '$178call_function_kw.79'}), (182, {'res': '$182load_global.80'}), (184, {'item': '$182load_global.80', 'res': '$184load_method.81'}), (186, {'res': '$steps186.82'}), (188, {'func': '$184load_method.81', 'args': ['$steps186.82'], 'res': '$188call_method.83'}), (190, {'value': '$188call_method.83', 'res': '$190get_iter.84'})), outgoing_phis={'$phi192.0': '$190get_iter.84'}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ('$190get_iter.84',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'iterator': '$phi192.0', 'pair': '$192for_iter.1', 'indval': '$192for_iter.2', 'pred': '$192for_iter.3'}),), outgoing_phis={'$phi196.1': '$192for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={666: (), 196: ('$phi192.0', '$192for_iter.2')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=196 nstack_initial=2):
AdaptBlockInfo(insts=((196, {'value': '$phi196.1'}), (198, {'res': '$198load_global.2'}), (200, {'item': '$198load_global.2', 'res': '$200load_attr.3'}), (202, {'res': '$const202.4'}), (204, {'res': '$batch_max204.5'}), (206, {'lhs': '$const202.4', 'rhs': '$batch_max204.5', 'res': '$206binary_multiply.6'}), (208, {'res': '$even_cutoff208.7'}), (210, {'lhs': '$206binary_multiply.6', 'rhs': '$even_cutoff208.7', 'res': '$210binary_add.8'}), (212, {'res': '$const212.9'}), (214, {'lhs': '$210binary_add.8', 'rhs': '$const212.9', 'res': '$214binary_add.10'}), (216, {'res': '$216load_global.11'}), (218, {'item': '$216load_global.11', 'res': '$218load_attr.12'}), (220, {'res': '$const220.13'}), (222, {'func': '$200load_attr.3', 'args': ['$214binary_add.10', '$218load_attr.12'], 'names': '$const220.13', 'res': '$222call_function_kw.14'}), (224, {'value': '$222call_function_kw.14'}), (226, {'res': '$226load_global.15'}), (228, {'res': '$j228.16'}), (230, {'res': '$edge_reps230.17'}), (232, {'func': '$226load_global.15', 'args': ['$j228.16', '$edge_reps230.17'], 'res': '$232call_function.18'}), (234, {'value': '$232call_function.18'}), (236, {'res': '$kept_edges236.19'}), (238, {'item': '$kept_edges236.19', 'res': '$238load_method.20'}), (240, {'func': '$238load_method.20', 'args': [], 'res': '$240call_method.21'}), (242, {'value': '$240call_method.21'}), (244, {'res': '$const244.22'}), (246, {'value': '$const244.22'}), (248, {'res': '$248load_global.23'}), (250, {'res': '$const250.24'}), (252, {'res': '$n252.25'}), (254, {'res': '$const254.26'}), (256, {'lhs': '$n252.25', 'rhs': '$const254.26', 'res': '$256binary_floor_divide.27'}), (258, {'func': '$248load_global.23', 'args': ['$const250.24', '$256binary_floor_divide.27'], 'res': '$258call_function.28'}), (260, {'value': '$258call_function.28', 'res': '$260get_iter.29'})), outgoing_phis={'$phi262.1': '$260get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ('$phi196.0', '$260get_iter.29')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=262 nstack_initial=2):
AdaptBlockInfo(insts=((262, {'iterator': '$phi262.1', 'pair': '$262for_iter.2', 'indval': '$262for_iter.3', 'pred': '$262for_iter.4'}),), outgoing_phis={'$phi264.2': '$262for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ('$phi262.0',), 264: ('$phi262.0', '$phi262.1', '$262for_iter.3')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=264 nstack_initial=3):
AdaptBlockInfo(insts=((264, {'value': '$phi264.2'}), (266, {'res': '$binom_prod266.3'}), (268, {'res': '$binoms268.4'}), (270, {'res': '$edge_reps270.5'}), (272, {'res': '$i272.6'}), (274, {'index': '$i272.6', 'target': '$edge_reps270.5', 'res': '$274binary_subscr.7'}), (276, {'res': '$kept_edges276.8'}), (278, {'res': '$i278.9'}), (280, {'index': '$i278.9', 'target': '$kept_edges276.8', 'res': '$280binary_subscr.10'}), (282, {'items': ['$274binary_subscr.7', '$280binary_subscr.10'], 'res': '$282build_tuple.11'}), (284, {'index': '$282build_tuple.11', 'target': '$binoms268.4', 'res': '$284binary_subscr.12'}), (286, {'lhs': '$binom_prod266.3', 'rhs': '$284binary_subscr.12', 'res': '$286inplace_multiply.13'}), (288, {'value': '$286inplace_multiply.13'}), (290, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ('$phi264.0', '$phi264.1')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=294 nstack_initial=1):
AdaptBlockInfo(insts=((294, {'res': '$glynn294.1'}), (296, {'pred': '$glynn294.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi294.0',), 314: ('$phi294.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {'res': '$const300.1'}), (302, {'res': '$kept_edges302.2'}), (304, {'lhs': '$const300.1', 'rhs': '$kept_edges302.2', 'res': '$304binary_multiply.3'}), (306, {'res': '$edge_reps306.4'}), (308, {'lhs': '$304binary_multiply.3', 'rhs': '$edge_reps306.4', 'res': '$308binary_subtract.5'}), (310, {'value': '$308binary_subtract.5'}), (312, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi300.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=314 nstack_initial=1):
AdaptBlockInfo(insts=((314, {'res': '$kept_edges314.1'}), (316, {'value': '$kept_edges314.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi314.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=318 nstack_initial=1):
AdaptBlockInfo(insts=((318, {'res': '$318load_global.1'}), (320, {'res': '$delta320.2'}), (322, {'res': '$A322.3'}), (324, {'res': '$D324.4'}), (326, {'res': '$oddV326.5'}), (328, {'func': '$318load_global.1', 'args': ['$delta320.2', '$A322.3', '$D324.4', '$oddV326.5'], 'res': '$328call_function.6'}), (330, {'iterable': '$328call_function.6', 'stores': ['$330unpack_sequence.7', '$330unpack_sequence.8', '$330unpack_sequence.9', '$330unpack_sequence.10'], 'tupleobj': '$330unpack_sequence.11'}), (332, {'value': '$330unpack_sequence.7'}), (334, {'value': '$330unpack_sequence.8'}), (336, {'value': '$330unpack_sequence.9'}), (338, {'value': '$330unpack_sequence.10'}), (340, {'res': '$340load_global.12'}), (342, {'res': '$AX_S342.13'}), (344, {'func': '$340load_global.12', 'args': ['$AX_S342.13'], 'res': '$344call_function.14'}), (346, {'value': '$344call_function.14'}), (348, {'res': '$kept_edges348.15'}), (350, {'res': '$const350.16'}), (352, {'index': '$const350.16', 'target': '$kept_edges348.15', 'res': '$352binary_subscr.17'}), (354, {'res': '$const354.18'}), (356, {'lhs': '$352binary_subscr.17', 'rhs': '$const354.18', 'res': '$356compare_op.19'}), (358, {'pred': '$356compare_op.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi318.0',), 450: ('$phi318.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=362 nstack_initial=1):
AdaptBlockInfo(insts=((362, {'res': '$kept_edges362.1'}), (364, {'res': '$const364.2'}), (366, {'index': '$const364.2', 'target': '$kept_edges362.1', 'res': '$366binary_subscr.3'}), (368, {'res': '$const368.4'}), (370, {'lhs': '$366binary_subscr.3', 'rhs': '$const368.4', 'res': '$370compare_op.5'}), (372, {'pred': '$370compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={376: ('$phi362.0',), 450: ('$phi362.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=376 nstack_initial=1):
AdaptBlockInfo(insts=((376, {'res': '$376load_global.1'}), (378, {'res': '$delta378.2'}), (380, {'res': '$oddV0380.3'}), (382, {'func': '$376load_global.1', 'args': ['$delta378.2', '$oddV0380.3'], 'res': '$382call_function.4'}), (384, {'value': '$382call_function.4'}), (386, {'res': '$const386.5'}), (388, {'res': '$N_fixed388.6'}), (390, {'res': '$const390.7'}), (392, {'lhs': '$N_fixed388.6', 'rhs': '$const390.7', 'res': '$392binary_floor_divide.8'}), (394, {'res': '$edges_sum394.9'}), (396, {'lhs': '$392binary_floor_divide.8', 'rhs': '$edges_sum394.9', 'res': '$396binary_subtract.10'}), (398, {'lhs': '$const386.5', 'rhs': '$396binary_subtract.10', 'res': '$398binary_power.11'}), (400, {'value': '$398binary_power.11'}), (402, {'res': '$402load_global.12'}), (404, {'res': '$E404.13'}), (406, {'res': '$AX_S406.14'}), (408, {'res': '$XD_S408.15'}), (410, {'res': '$D_S410.16'}), (412, {'res': '$N_fixed412.17'}), (414, {'res': '$oddloop0414.18'}), (416, {'res': '$oddVX_S0416.19'}), (418, {'func': '$402load_global.12', 'args': ['$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18', '$oddVX_S0416.19'], 'res': '$418call_function.20'}), (420, {'res': '$N_fixed420.21'}), (422, {'index': '$N_fixed420.21', 'target': '$418call_function.20', 'res': '$422binary_subscr.22'}), (424, {'value': '$422binary_subscr.22'}), (426, {'res': '$H_batch426.23'}), (428, {'res': '$const428.24'}), (430, {'orig': ['$H_batch426.23', '$const428.24'], 'duped': ['$430dup_top_two.25', '$430dup_top_two.26']}), (432, {'index': '$430dup_top_two.26', 'target': '$430dup_top_two.25', 'res': '$432binary_subscr.27'}), (434, {'res': '$binom_prod434.28'}), (436, {'res': '$plus_minus436.29'}), (438, {'lhs': '$binom_prod434.28', 'rhs': '$plus_minus436.29', 'res': '$438binary_multiply.30'}), (440, {'res': '$f440.31'}), (442, {'lhs': '$438binary_multiply.30', 'rhs': '$f440.31', 'res': '$442binary_multiply.32'}), (444, {'lhs': '$432binary_subscr.27', 'rhs': '$442binary_multiply.32', 'res': '$444inplace_add.33'}), (448, {'target': '$H_batch426.23', 'index': '$const428.24', 'value': '$444inplace_add.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={450: ('$phi376.0',)})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=450 nstack_initial=1):
AdaptBlockInfo(insts=((450, {'res': '$450load_global.1'}), (452, {'res': '$E452.2'}), (454, {'res': '$AX_S454.3'}), (456, {'res': '$XD_S456.4'}), (458, {'res': '$D_S458.5'}), (460, {'res': '$N_max460.6'}), (462, {'func': '$450load_global.1', 'args': ['$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5', '$N_max460.6'], 'res': '$462call_function.7'}), (464, {'value': '$462call_function.7'}), (466, {'res': '$466load_global.8'}), (468, {'res': '$E468.9'}), (470, {'res': '$AX_S470.10'}), (472, {'res': '$XD_S472.11'}), (474, {'res': '$D_S474.12'}), (476, {'res': '$N_max476.13'}), (478, {'res': '$oddloop478.14'}), (480, {'res': '$oddVX_S480.15'}), (482, {'func': '$466load_global.8', 'args': ['$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14', '$oddVX_S480.15'], 'res': '$482call_function.16'}), (484, {'value': '$482call_function.16'}), (486, {'res': '$486load_global.17'}), (488, {'res': '$const488.18'}), (490, {'res': '$kept_edges490.19'}), (492, {'res': '$const492.20'}), (494, {'index': '$const492.20', 'target': '$kept_edges490.19', 'res': '$494binary_subscr.21'}), (496, {'lhs': '$const488.18', 'rhs': '$494binary_subscr.21', 'res': '$496binary_multiply.22'}), (498, {'res': '$const498.23'}), (500, {'lhs': '$496binary_multiply.22', 'rhs': '$const498.23', 'res': '$500binary_add.24'}), (502, {'res': '$const502.25'}), (504, {'res': '$batch_max504.26'}), (506, {'lhs': '$const502.25', 'rhs': '$batch_max504.26', 'res': '$506binary_multiply.27'}), (508, {'res': '$even_cutoff508.28'}), (510, {'lhs': '$506binary_multiply.27', 'rhs': '$even_cutoff508.28', 'res': '$510binary_add.29'}), (512, {'res': '$const512.30'}), (514, {'lhs': '$510binary_add.29', 'rhs': '$const512.30', 'res': '$514binary_add.31'}), (516, {'func': '$486load_global.17', 'args': ['$500binary_add.24', '$514binary_add.31'], 'res': '$516call_function.32'}), (518, {'value': '$516call_function.32', 'res': '$518get_iter.33'})), outgoing_phis={'$phi520.1': '$518get_iter.33'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: ('$phi450.0', '$518get_iter.33')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=520 nstack_initial=2):
AdaptBlockInfo(insts=((520, {'iterator': '$phi520.1', 'pair': '$520for_iter.2', 'indval': '$520for_iter.3', 'pred': '$520for_iter.4'}),), outgoing_phis={'$phi522.2': '$520for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={656: ('$phi520.0',), 522: ('$phi520.0', '$phi520.1', '$520for_iter.3')})
DEBUG 2022-02-14 16:45:25,791 block_infos State(pc_initial=522 nstack_initial=3):
AdaptBlockInfo(insts=((522, {'value': '$phi522.2'}), (524, {'res': '$N_fixed524.3'}), (526, {'res': '$N_det526.4'}), (528, {'lhs': '$N_fixed524.3', 'rhs': '$N_det526.4', 'res': '$528binary_add.5'}), (530, {'value': '$528binary_add.5'}), (532, {'res': '$const532.6'}), (534, {'res': '$N534.7'}), (536, {'res': '$const536.8'}), (538, {'lhs': '$N534.7', 'rhs': '$const536.8', 'res': '$538binary_floor_divide.9'}), (540, {'res': '$edges_sum540.10'}), (542, {'lhs': '$538binary_floor_divide.9', 'rhs': '$edges_sum540.10', 'res': '$542binary_subtract.11'}), (544, {'lhs': '$const532.6', 'rhs': '$542binary_subtract.11', 'res': '$544binary_power.12'}), (546, {'value': '$544binary_power.12'}), (548, {'res': '$binoms548.13'}), (550, {'res': '$N_det550.14'}), (552, {'res': '$const552.15'}), (554, {'lhs': '$N_det550.14', 'rhs': '$const552.15', 'res': '$554binary_subtract.16'}), (556, {'res': '$const556.17'}), (558, {'lhs': '$554binary_subtract.16', 'rhs': '$const556.17', 'res': '$558binary_floor_divide.18'}), (560, {'res': '$kept_edges560.19'}), (562, {'res': '$const562.20'}), (564, {'index': '$const562.20', 'target': '$kept_edges560.19', 'res': '$564binary_subscr.21'}), (566, {'items': ['$558binary_floor_divide.18', '$564binary_subscr.21'], 'res': '$566build_tuple.22'}), (568, {'index': '$566build_tuple.22', 'target': '$binoms548.13', 'res': '$568binary_subscr.23'}), (570, {'res': '$binom_prod570.24'}), (572, {'lhs': '$568binary_subscr.23', 'rhs': '$binom_prod570.24', 'res': '$572binary_multiply.25'}), (574, {'value': '$572binary_multiply.25'}), (576, {'res': '$N576.26'}), (578, {'res': '$const578.27'}), (580, {'lhs': '$N576.26', 'rhs': '$const578.27', 'res': '$580binary_modulo.28'}), (582, {'res': '$const582.29'}), (584, {'lhs': '$580binary_modulo.28', 'rhs': '$const582.29', 'res': '$584compare_op.30'}), (586, {'pred': '$584compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={590: ('$phi522.0', '$phi522.1'), 624: ('$phi522.0', '$phi522.1')})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=590 nstack_initial=2):
AdaptBlockInfo(insts=((590, {'res': '$Hnew590.2'}), (592, {'res': '$N_det592.3'}), (594, {'orig': ['$Hnew590.2', '$N_det592.3'], 'duped': ['$594dup_top_two.4', '$594dup_top_two.5']}), (596, {'index': '$594dup_top_two.5', 'target': '$594dup_top_two.4', 'res': '$596binary_subscr.6'}), (598, {'res': '$n_det_binom_prod598.7'}), (600, {'res': '$plus_minus600.8'}), (602, {'lhs': '$n_det_binom_prod598.7', 'rhs': '$plus_minus600.8', 'res': '$602binary_multiply.9'}), (604, {'res': '$f_even604.10'}), (606, {'res': '$N606.11'}), (608, {'res': '$const608.12'}), (610, {'lhs': '$N606.11', 'rhs': '$const608.12', 'res': '$610binary_floor_divide.13'}), (612, {'index': '$610binary_floor_divide.13', 'target': '$f_even604.10', 'res': '$612binary_subscr.14'}), (614, {'lhs': '$602binary_multiply.9', 'rhs': '$612binary_subscr.14', 'res': '$614binary_multiply.15'}), (616, {'lhs': '$596binary_subscr.6', 'rhs': '$614binary_multiply.15', 'res': '$616inplace_add.16'}), (620, {'target': '$Hnew590.2', 'index': '$N_det592.3', 'value': '$616inplace_add.16'}), (622, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={652: ('$phi590.0', '$phi590.1')})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=624 nstack_initial=2):
AdaptBlockInfo(insts=((624, {'res': '$Hnew624.2'}), (626, {'res': '$N_det626.3'}), (628, {'orig': ['$Hnew624.2', '$N_det626.3'], 'duped': ['$628dup_top_two.4', '$628dup_top_two.5']}), (630, {'index': '$628dup_top_two.5', 'target': '$628dup_top_two.4', 'res': '$630binary_subscr.6'}), (632, {'res': '$n_det_binom_prod632.7'}), (634, {'res': '$plus_minus634.8'}), (636, {'lhs': '$n_det_binom_prod632.7', 'rhs': '$plus_minus634.8', 'res': '$636binary_multiply.9'}), (638, {'res': '$f_odd638.10'}), (640, {'res': '$N640.11'}), (642, {'index': '$N640.11', 'target': '$f_odd638.10', 'res': '$642binary_subscr.12'}), (644, {'lhs': '$636binary_multiply.9', 'rhs': '$642binary_subscr.12', 'res': '$644binary_multiply.13'}), (646, {'lhs': '$630binary_subscr.6', 'rhs': '$644binary_multiply.13', 'res': '$646inplace_add.14'}), (650, {'target': '$Hnew624.2', 'index': '$N_det626.3', 'value': '$646inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={652: ('$phi624.0', '$phi624.1')})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=652 nstack_initial=2):
AdaptBlockInfo(insts=((652, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: ('$phi652.0', '$phi652.1')})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=656 nstack_initial=1):
AdaptBlockInfo(insts=((656, {'res': '$H_batch656.1'}), (658, {'res': '$Hnew658.2'}), (660, {'lhs': '$H_batch656.1', 'rhs': '$Hnew658.2', 'res': '$660inplace_add.3'}), (662, {'value': '$660inplace_add.3'}), (664, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ('$phi656.0',)})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=666 nstack_initial=0):
AdaptBlockInfo(insts=((666, {'res': '$glynn666.0'}), (668, {'pred': '$glynn666.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={672: (), 726: ()})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=672 nstack_initial=0):
AdaptBlockInfo(insts=((672, {'res': '$672load_global.0'}), (674, {'res': '$H_batch674.1'}), (676, {'item': '$H_batch674.1', 'res': '$676load_attr.2'}), (678, {'res': '$const678.3'}), (680, {'index': '$const678.3', 'target': '$676load_attr.2', 'res': '$680binary_subscr.4'}), (682, {'func': '$672load_global.0', 'args': ['$680binary_subscr.4'], 'res': '$682call_function.5'}), (684, {'value': '$682call_function.5', 'res': '$684get_iter.6'})), outgoing_phis={'$phi686.0': '$684get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={686: ('$684get_iter.6',)})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=686 nstack_initial=1):
AdaptBlockInfo(insts=((686, {'iterator': '$phi686.0', 'pair': '$686for_iter.1', 'indval': '$686for_iter.2', 'pred': '$686for_iter.3'}),), outgoing_phis={'$phi688.1': '$686for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={726: (), 688: ('$phi686.0', '$686for_iter.2')})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=688 nstack_initial=2):
AdaptBlockInfo(insts=((688, {'value': '$phi688.1'}), (690, {'res': '$N_fixed690.2'}), (692, {'res': '$j692.3'}), (694, {'lhs': '$N_fixed690.2', 'rhs': '$j692.3', 'res': '$694binary_add.4'}), (696, {'value': '$694binary_add.4'}), (698, {'res': '$H_batch698.5'}), (700, {'res': '$j700.6'}), (702, {'orig': ['$H_batch698.5', '$j700.6'], 'duped': ['$702dup_top_two.7', '$702dup_top_two.8']}), (704, {'index': '$702dup_top_two.8', 'target': '$702dup_top_two.7', 'res': '$704binary_subscr.9'}), (706, {'res': '$const706.10'}), (708, {'res': '$x708.11'}), (710, {'res': '$const710.12'}), (712, {'lhs': '$x708.11', 'rhs': '$const710.12', 'res': '$712binary_floor_divide.13'}), (714, {'lhs': '$const706.10', 'rhs': '$712binary_floor_divide.13', 'res': '$714binary_power.14'}), (716, {'lhs': '$704binary_subscr.9', 'rhs': '$714binary_power.14', 'res': '$716inplace_multiply.15'}), (720, {'target': '$H_batch698.5', 'index': '$j700.6', 'value': '$716inplace_multiply.15'}), (722, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={686: ('$phi688.0',)})
DEBUG 2022-02-14 16:45:25,792 block_infos State(pc_initial=726 nstack_initial=0):
AdaptBlockInfo(insts=((726, {'res': '$H_batch726.0'}), (728, {'retval': '$H_batch726.0', 'castval': '$728return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:25,800 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    even_cutoff = arg(4, name=even_cutoff)   ['even_cutoff']
    oddmode = arg(5, name=oddmode)           ['oddmode']
    glynn = arg(6, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $const28.12 = const(int, 1)              ['$const28.12']
    oddloop0 = getitem(value=D, index=$const28.12, fn=<built-in function getitem>) ['$const28.12', 'D', 'oddloop0']
    $const36.15 = const(int, 1)              ['$const36.15']
    $const38.16 = const(NoneType, None)      ['$const38.16']
    $const40.17 = const(NoneType, None)      ['$const40.17']
    $42build_slice.18 = global(slice: <class 'slice'>) ['$42build_slice.18']
    $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None) ['$42build_slice.18', '$42build_slice.19', '$const38.16', '$const40.17']
    $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)]) ['$42build_slice.19', '$44build_tuple.20', '$const36.15']
    oddV0 = getitem(value=A, index=$44build_tuple.20, fn=<built-in function getitem>) ['$44build_tuple.20', 'A', 'oddV0']
    $52load_attr.23 = getattr(value=A, attr=shape) ['$52load_attr.23', 'A']
    $const54.24 = const(int, 0)              ['$const54.24']
    n = getitem(value=$52load_attr.23, index=$const54.24, fn=<built-in function getitem>) ['$52load_attr.23', '$const54.24', 'n']
    $const60.26 = const(int, 2)              ['$const60.26']
    $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum) ['$64load_method.28', 'fixed_edge_reps']
    $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None) ['$64load_method.28', '$66call_method.29']
    $68binary_multiply.30 = $const60.26 * $66call_method.29 ['$66call_method.29', '$68binary_multiply.30', '$const60.26']
    $const70.31 = const(int, 1)              ['$const70.31']
    N_fixed = $68binary_multiply.30 + $const70.31 ['$68binary_multiply.30', '$const70.31', 'N_fixed']
    $const78.34 = const(int, 2)              ['$const78.34']
    $82binary_multiply.36 = $const78.34 * batch_max ['$82binary_multiply.36', '$const78.34', 'batch_max']
    $84binary_add.37 = N_fixed + $82binary_multiply.36 ['$82binary_multiply.36', '$84binary_add.37', 'N_fixed']
    $88binary_add.39 = $84binary_add.37 + even_cutoff ['$84binary_add.37', '$88binary_add.39', 'even_cutoff']
    $const90.40 = const(int, 1)              ['$const90.40']
    N_max = $88binary_add.39 + $const90.40   ['$88binary_add.39', '$const90.40', 'N_max']
    $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$96load_global.42']
    $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate) ['$96load_global.42', '$98load_method.43']
    $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$100load_global.44']
    $102load_method.45 = getattr(value=$100load_global.44, attr=array) ['$100load_global.44', '$102load_method.45']
    $const106.47 = const(int, 1)             ['$const106.47']
    $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)]) ['$108build_list.48', '$const106.47', 'batch_max']
    $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$102load_method.45', '$108build_list.48', '$110call_method.49']
    $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)]) ['$110call_method.49', '$114build_tuple.51', 'fixed_edge_reps']
    edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$114build_tuple.51', '$98load_method.43', 'edge_reps']
    $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$120load_global.53']
    $122load_method.54 = getattr(value=$120load_global.53, attr=prod) ['$120load_global.53', '$122load_method.54']
    $const126.56 = const(int, 1)             ['$const126.56']
    $128binary_add.57 = edge_reps + $const126.56 ['$128binary_add.57', '$const126.56', 'edge_reps']
    steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None) ['$122load_method.54', '$128binary_add.57', 'steps']
    $136load_method.60 = getattr(value=edge_reps, attr=max) ['$136load_method.60', 'edge_reps']
    $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None) ['$136load_method.60', '$138call_method.61']
    max_binom = $138call_method.61 + even_cutoff ['$138call_method.61', 'even_cutoff', 'max_binom']
    $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>)) ['$146load_global.64']
    binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None) ['$146load_global.64', 'binoms', 'max_binom']
    $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$154load_global.67']
    $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros) ['$154load_global.67', '$156load_attr.68']
    $const158.69 = const(int, 2)             ['$const158.69']
    $162binary_multiply.71 = $const158.69 * batch_max ['$162binary_multiply.71', '$const158.69', 'batch_max']
    $166binary_add.73 = $162binary_multiply.71 + even_cutoff ['$162binary_multiply.71', '$166binary_add.73', 'even_cutoff']
    $const168.74 = const(int, 2)             ['$const168.74']
    $170binary_add.75 = $166binary_add.73 + $const168.74 ['$166binary_add.73', '$170binary_add.75', '$const168.74']
    $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$172load_global.76']
    $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128) ['$172load_global.76', '$174load_attr.77']
    H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None) ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77', 'H_batch']
    $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$182load_global.80']
    $184load_method.81 = getattr(value=$182load_global.80, attr=prange) ['$182load_global.80', '$184load_method.81']
    $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None) ['$184load_method.81', '$188call_method.83', 'steps']
    $190get_iter.84 = getiter(value=$188call_method.83) ['$188call_method.83', '$190get_iter.84']
    $phi192.0 = $190get_iter.84              ['$190get_iter.84', '$phi192.0']
    jump 192                                 []
label 192:
    $192for_iter.1 = iternext(value=$phi192.0) ['$192for_iter.1', '$phi192.0']
    $192for_iter.2 = pair_first(value=$192for_iter.1) ['$192for_iter.1', '$192for_iter.2']
    $192for_iter.3 = pair_second(value=$192for_iter.1) ['$192for_iter.1', '$192for_iter.3']
    $phi196.1 = $192for_iter.2               ['$192for_iter.2', '$phi196.1']
    branch $192for_iter.3, 196, 666          ['$192for_iter.3']
label 196:
    j = $phi196.1                            ['$phi196.1', 'j']
    $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$198load_global.2']
    $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros) ['$198load_global.2', '$200load_attr.3']
    $const202.4 = const(int, 2)              ['$const202.4']
    $206binary_multiply.6 = $const202.4 * batch_max ['$206binary_multiply.6', '$const202.4', 'batch_max']
    $210binary_add.8 = $206binary_multiply.6 + even_cutoff ['$206binary_multiply.6', '$210binary_add.8', 'even_cutoff']
    $const212.9 = const(int, 2)              ['$const212.9']
    $214binary_add.10 = $210binary_add.8 + $const212.9 ['$210binary_add.8', '$214binary_add.10', '$const212.9']
    $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$216load_global.11']
    $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128) ['$216load_global.11', '$218load_attr.12']
    Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None) ['$200load_attr.3', '$214binary_add.10', '$218load_attr.12', 'Hnew']
    $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>)) ['$226load_global.15']
    kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$226load_global.15', 'edge_reps', 'j', 'kept_edges']
    $238load_method.20 = getattr(value=kept_edges, attr=sum) ['$238load_method.20', 'kept_edges']
    edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None) ['$238load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $248load_global.23 = global(range: <class 'range'>) ['$248load_global.23']
    $const250.24 = const(int, 1)             ['$const250.24']
    $const254.26 = const(int, 2)             ['$const254.26']
    $256binary_floor_divide.27 = n // $const254.26 ['$256binary_floor_divide.27', '$const254.26', 'n']
    $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None) ['$248load_global.23', '$256binary_floor_divide.27', '$258call_function.28', '$const250.24']
    $260get_iter.29 = getiter(value=$258call_function.28) ['$258call_function.28', '$260get_iter.29']
    $phi262.1 = $260get_iter.29              ['$260get_iter.29', '$phi262.1']
    jump 262                                 []
label 262:
    $262for_iter.2 = iternext(value=$phi262.1) ['$262for_iter.2', '$phi262.1']
    $262for_iter.3 = pair_first(value=$262for_iter.2) ['$262for_iter.2', '$262for_iter.3']
    $262for_iter.4 = pair_second(value=$262for_iter.2) ['$262for_iter.2', '$262for_iter.4']
    $phi264.2 = $262for_iter.3               ['$262for_iter.3', '$phi264.2']
    branch $262for_iter.4, 264, 294          ['$262for_iter.4']
label 264:
    i = $phi264.2                            ['$phi264.2', 'i']
    $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$274binary_subscr.7', 'edge_reps', 'i']
    $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$280binary_subscr.10', 'i', 'kept_edges']
    $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)]) ['$274binary_subscr.7', '$280binary_subscr.10', '$282build_tuple.11']
    $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>) ['$282build_tuple.11', '$284binary_subscr.12', 'binoms']
    $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$284binary_subscr.12', '$286inplace_multiply.13', 'binom_prod']
    binom_prod = $286inplace_multiply.13     ['$286inplace_multiply.13', 'binom_prod']
    jump 262                                 []
label 294:
    bool296 = global(bool: <class 'bool'>)   ['bool296']
    $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None) ['$296pred', 'bool296', 'glynn']
    branch $296pred, 300, 314                ['$296pred']
label 300:
    $const300.1 = const(int, 2)              ['$const300.1']
    $304binary_multiply.3 = $const300.1 * kept_edges ['$304binary_multiply.3', '$const300.1', 'kept_edges']
    delta = $304binary_multiply.3 - edge_reps ['$304binary_multiply.3', 'delta', 'edge_reps']
    jump 318                                 []
label 314:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 318                                 []
label 318:
    $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>)) ['$318load_global.1']
    $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None) ['$318load_global.1', '$328call_function.6', 'A', 'D', 'delta', 'oddV']
    $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4) ['$328call_function.6', '$330unpack_sequence.11']
    $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.7']
    $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.8']
    $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.9']
    $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.10', '$330unpack_sequence.11']
    AX_S = $330unpack_sequence.7             ['$330unpack_sequence.7', 'AX_S']
    XD_S = $330unpack_sequence.8             ['$330unpack_sequence.8', 'XD_S']
    D_S = $330unpack_sequence.9              ['$330unpack_sequence.9', 'D_S']
    oddVX_S = $330unpack_sequence.10         ['$330unpack_sequence.10', 'oddVX_S']
    $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>)) ['$340load_global.12']
    E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None) ['$340load_global.12', 'AX_S', 'E']
    $const350.16 = const(int, 0)             ['$const350.16']
    $352binary_subscr.17 = getitem(value=kept_edges, index=$const350.16, fn=<built-in function getitem>) ['$352binary_subscr.17', '$const350.16', 'kept_edges']
    $const354.18 = const(int, 0)             ['$const354.18']
    $356compare_op.19 = $352binary_subscr.17 == $const354.18 ['$352binary_subscr.17', '$356compare_op.19', '$const354.18']
    bool358 = global(bool: <class 'bool'>)   ['bool358']
    $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None) ['$356compare_op.19', '$358pred', 'bool358']
    branch $358pred, 362, 450                ['$358pred']
label 362:
    $const364.2 = const(int, 1)              ['$const364.2']
    $366binary_subscr.3 = getitem(value=kept_edges, index=$const364.2, fn=<built-in function getitem>) ['$366binary_subscr.3', '$const364.2', 'kept_edges']
    $const368.4 = const(int, 0)              ['$const368.4']
    $370compare_op.5 = $366binary_subscr.3 == $const368.4 ['$366binary_subscr.3', '$370compare_op.5', '$const368.4']
    bool372 = global(bool: <class 'bool'>)   ['bool372']
    $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None) ['$370compare_op.5', '$372pred', 'bool372']
    branch $372pred, 376, 450                ['$372pred']
label 376:
    $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>)) ['$376load_global.1']
    oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None) ['$376load_global.1', 'delta', 'oddV0', 'oddVX_S0']
    $const386.5 = const(int, -1)             ['$const386.5']
    $const390.7 = const(int, 2)              ['$const390.7']
    $392binary_floor_divide.8 = N_fixed // $const390.7 ['$392binary_floor_divide.8', '$const390.7', 'N_fixed']
    $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum ['$392binary_floor_divide.8', '$396binary_subtract.10', 'edges_sum']
    plus_minus = $const386.5 ** $396binary_subtract.10 ['$396binary_subtract.10', '$const386.5', 'plus_minus']
    $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>)) ['$402load_global.12']
    $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None) ['$402load_global.12', '$418call_function.20', 'AX_S', 'D_S', 'E', 'N_fixed', 'XD_S', 'oddVX_S0', 'oddloop0']
    f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>) ['$418call_function.20', 'N_fixed', 'f']
    $const428.24 = const(int, 0)             ['$const428.24']
    $432binary_subscr.27 = getitem(value=H_batch, index=$const428.24, fn=<built-in function getitem>) ['$432binary_subscr.27', '$const428.24', 'H_batch']
    $438binary_multiply.30 = binom_prod * plus_minus ['$438binary_multiply.30', 'binom_prod', 'plus_minus']
    $442binary_multiply.32 = $438binary_multiply.30 * f ['$438binary_multiply.30', '$442binary_multiply.32', 'f']
    $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined) ['$432binary_subscr.27', '$442binary_multiply.32', '$444inplace_add.33']
    H_batch[$const428.24] = $444inplace_add.33 ['$444inplace_add.33', '$const428.24', 'H_batch']
    jump 450                                 []
label 450:
    $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>)) ['$450load_global.1']
    f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None) ['$450load_global.1', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>)) ['$466load_global.8']
    f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None) ['$466load_global.8', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $486load_global.17 = global(range: <class 'range'>) ['$486load_global.17']
    $const488.18 = const(int, 2)             ['$const488.18']
    $const492.20 = const(int, 0)             ['$const492.20']
    $494binary_subscr.21 = getitem(value=kept_edges, index=$const492.20, fn=<built-in function getitem>) ['$494binary_subscr.21', '$const492.20', 'kept_edges']
    $496binary_multiply.22 = $const488.18 * $494binary_subscr.21 ['$494binary_subscr.21', '$496binary_multiply.22', '$const488.18']
    $const498.23 = const(int, 1)             ['$const498.23']
    $500binary_add.24 = $496binary_multiply.22 + $const498.23 ['$496binary_multiply.22', '$500binary_add.24', '$const498.23']
    $const502.25 = const(int, 2)             ['$const502.25']
    $506binary_multiply.27 = $const502.25 * batch_max ['$506binary_multiply.27', '$const502.25', 'batch_max']
    $510binary_add.29 = $506binary_multiply.27 + even_cutoff ['$506binary_multiply.27', '$510binary_add.29', 'even_cutoff']
    $const512.30 = const(int, 2)             ['$const512.30']
    $514binary_add.31 = $510binary_add.29 + $const512.30 ['$510binary_add.29', '$514binary_add.31', '$const512.30']
    $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None) ['$486load_global.17', '$500binary_add.24', '$514binary_add.31', '$516call_function.32']
    $518get_iter.33 = getiter(value=$516call_function.32) ['$516call_function.32', '$518get_iter.33']
    $phi520.1 = $518get_iter.33              ['$518get_iter.33', '$phi520.1']
    jump 520                                 []
label 520:
    $520for_iter.2 = iternext(value=$phi520.1) ['$520for_iter.2', '$phi520.1']
    $520for_iter.3 = pair_first(value=$520for_iter.2) ['$520for_iter.2', '$520for_iter.3']
    $520for_iter.4 = pair_second(value=$520for_iter.2) ['$520for_iter.2', '$520for_iter.4']
    $phi522.2 = $520for_iter.3               ['$520for_iter.3', '$phi522.2']
    branch $520for_iter.4, 522, 656          ['$520for_iter.4']
label 522:
    N_det = $phi522.2                        ['$phi522.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const532.6 = const(int, -1)             ['$const532.6']
    $const536.8 = const(int, 2)              ['$const536.8']
    $538binary_floor_divide.9 = N // $const536.8 ['$538binary_floor_divide.9', '$const536.8', 'N']
    $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum ['$538binary_floor_divide.9', '$542binary_subtract.11', 'edges_sum']
    plus_minus = $const532.6 ** $542binary_subtract.11 ['$542binary_subtract.11', '$const532.6', 'plus_minus']
    $const552.15 = const(int, 1)             ['$const552.15']
    $554binary_subtract.16 = N_det - $const552.15 ['$554binary_subtract.16', '$const552.15', 'N_det']
    $const556.17 = const(int, 2)             ['$const556.17']
    $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17 ['$554binary_subtract.16', '$558binary_floor_divide.18', '$const556.17']
    $const562.20 = const(int, 0)             ['$const562.20']
    $564binary_subscr.21 = getitem(value=kept_edges, index=$const562.20, fn=<built-in function getitem>) ['$564binary_subscr.21', '$const562.20', 'kept_edges']
    $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)]) ['$558binary_floor_divide.18', '$564binary_subscr.21', '$566build_tuple.22']
    $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>) ['$566build_tuple.22', '$568binary_subscr.23', 'binoms']
    n_det_binom_prod = $568binary_subscr.23 * binom_prod ['$568binary_subscr.23', 'binom_prod', 'n_det_binom_prod']
    $const578.27 = const(int, 2)             ['$const578.27']
    $580binary_modulo.28 = N % $const578.27  ['$580binary_modulo.28', '$const578.27', 'N']
    $const582.29 = const(int, 0)             ['$const582.29']
    $584compare_op.30 = $580binary_modulo.28 == $const582.29 ['$580binary_modulo.28', '$584compare_op.30', '$const582.29']
    bool586 = global(bool: <class 'bool'>)   ['bool586']
    $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None) ['$584compare_op.30', '$586pred', 'bool586']
    branch $586pred, 590, 624                ['$586pred']
label 590:
    $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$596binary_subscr.6', 'Hnew', 'N_det']
    $602binary_multiply.9 = n_det_binom_prod * plus_minus ['$602binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const608.12 = const(int, 2)             ['$const608.12']
    $610binary_floor_divide.13 = N // $const608.12 ['$610binary_floor_divide.13', '$const608.12', 'N']
    $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>) ['$610binary_floor_divide.13', '$612binary_subscr.14', 'f_even']
    $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14 ['$602binary_multiply.9', '$612binary_subscr.14', '$614binary_multiply.15']
    $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$596binary_subscr.6', '$614binary_multiply.15', '$616inplace_add.16']
    Hnew[N_det] = $616inplace_add.16         ['$616inplace_add.16', 'Hnew', 'N_det']
    jump 652                                 []
label 624:
    $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$630binary_subscr.6', 'Hnew', 'N_det']
    $636binary_multiply.9 = n_det_binom_prod * plus_minus ['$636binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$642binary_subscr.12', 'N', 'f_odd']
    $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12 ['$636binary_multiply.9', '$642binary_subscr.12', '$644binary_multiply.13']
    $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$630binary_subscr.6', '$644binary_multiply.13', '$646inplace_add.14']
    Hnew[N_det] = $646inplace_add.14         ['$646inplace_add.14', 'Hnew', 'N_det']
    jump 652                                 []
label 652:
    jump 520                                 []
label 656:
    $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$660inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $660inplace_add.3              ['$660inplace_add.3', 'H_batch']
    jump 192                                 []
label 666:
    bool668 = global(bool: <class 'bool'>)   ['bool668']
    $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None) ['$668pred', 'bool668', 'glynn']
    branch $668pred, 672, 726                ['$668pred']
label 672:
    $672load_global.0 = global(range: <class 'range'>) ['$672load_global.0']
    $676load_attr.2 = getattr(value=H_batch, attr=shape) ['$676load_attr.2', 'H_batch']
    $const678.3 = const(int, 0)              ['$const678.3']
    $680binary_subscr.4 = getitem(value=$676load_attr.2, index=$const678.3, fn=<built-in function getitem>) ['$676load_attr.2', '$680binary_subscr.4', '$const678.3']
    $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None) ['$672load_global.0', '$680binary_subscr.4', '$682call_function.5']
    $684get_iter.6 = getiter(value=$682call_function.5) ['$682call_function.5', '$684get_iter.6']
    $phi686.0 = $684get_iter.6               ['$684get_iter.6', '$phi686.0']
    jump 686                                 []
label 686:
    $686for_iter.1 = iternext(value=$phi686.0) ['$686for_iter.1', '$phi686.0']
    $686for_iter.2 = pair_first(value=$686for_iter.1) ['$686for_iter.1', '$686for_iter.2']
    $686for_iter.3 = pair_second(value=$686for_iter.1) ['$686for_iter.1', '$686for_iter.3']
    $phi688.1 = $686for_iter.2               ['$686for_iter.2', '$phi688.1']
    branch $686for_iter.3, 688, 726          ['$686for_iter.3']
label 688:
    j = $phi688.1                            ['$phi688.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$704binary_subscr.9', 'H_batch', 'j']
    $const706.10 = const(float, 0.5)         ['$const706.10']
    $const710.12 = const(int, 2)             ['$const710.12']
    $712binary_floor_divide.13 = x // $const710.12 ['$712binary_floor_divide.13', '$const710.12', 'x']
    $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13 ['$712binary_floor_divide.13', '$714binary_power.14', '$const706.10']
    $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$704binary_subscr.9', '$714binary_power.14', '$716inplace_multiply.15']
    H_batch[j] = $716inplace_multiply.15     ['$716inplace_multiply.15', 'H_batch', 'j']
    jump 686                                 []
label 726:
    $728return_value.1 = cast(value=H_batch) ['$728return_value.1', 'H_batch']
    return $728return_value.1                ['$728return_value.1']

DEBUG 2022-02-14 16:45:25,823 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:25,823 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,823 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,823 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,823 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,823 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,823 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,823 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,824 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,824 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,824 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,824 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,824 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,824 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,824 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,824 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,824 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,825 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,825 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,825 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,825 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,825 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,825 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,825 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,825 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,825 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,825 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,825 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,825 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,825 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,825 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,825 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,825 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,825 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,825 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,825 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,825 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,825 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,825 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,825 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,825 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,825 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,826 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,826 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,826 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,826 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,826 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,826 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,826 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,826 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,826 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,826 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,826 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,826 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,826 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,826 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,826 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,826 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,826 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,826 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,826 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,826 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,827 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,827 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,827 ==== SSA block analysis pass on 192
DEBUG 2022-02-14 16:45:25,827 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,827 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,827 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,827 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,827 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,827 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,827 ==== SSA block analysis pass on 196
DEBUG 2022-02-14 16:45:25,827 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,827 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,827 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,827 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,827 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,827 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,827 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,827 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,827 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,827 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,827 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,827 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,827 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,827 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,828 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,828 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,828 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,828 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,828 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,828 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,828 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,828 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,828 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,828 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,828 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,828 ==== SSA block analysis pass on 262
DEBUG 2022-02-14 16:45:25,828 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,828 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,828 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,828 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,828 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,828 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,828 ==== SSA block analysis pass on 264
DEBUG 2022-02-14 16:45:25,828 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,828 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,828 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,828 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,828 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,828 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,828 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,828 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,829 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,829 ==== SSA block analysis pass on 294
DEBUG 2022-02-14 16:45:25,829 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,829 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,829 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,829 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,829 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:45:25,829 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,829 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,829 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,829 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,829 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,829 ==== SSA block analysis pass on 314
DEBUG 2022-02-14 16:45:25,829 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,829 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:25,829 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,829 ==== SSA block analysis pass on 318
DEBUG 2022-02-14 16:45:25,829 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,829 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,829 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,829 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,829 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,829 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,829 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,829 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,829 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,829 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,829 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,829 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,829 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,830 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,830 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,830 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,830 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,830 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,830 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,830 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,830 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,830 ==== SSA block analysis pass on 362
DEBUG 2022-02-14 16:45:25,830 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,830 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,830 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,830 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,830 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,830 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,830 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,830 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,830 ==== SSA block analysis pass on 376
DEBUG 2022-02-14 16:45:25,830 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,830 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,830 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,830 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,831 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,831 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,831 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,831 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,831 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,831 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,831 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,831 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,831 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,831 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,831 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,831 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,831 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,831 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,831 ==== SSA block analysis pass on 450
DEBUG 2022-02-14 16:45:25,831 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,831 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,831 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,831 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,831 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,831 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,832 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,832 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,832 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,832 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,832 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,832 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,832 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,832 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,832 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,832 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,832 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,832 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,832 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,832 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,832 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,832 ==== SSA block analysis pass on 520
DEBUG 2022-02-14 16:45:25,832 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,832 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,832 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,832 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,832 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,832 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,832 ==== SSA block analysis pass on 522
DEBUG 2022-02-14 16:45:25,832 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,833 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,833 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,833 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,833 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,833 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,833 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,833 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,833 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,833 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,833 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,833 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,833 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,833 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,833 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,833 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,833 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,833 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,833 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,833 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,833 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,833 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,833 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,833 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,834 ==== SSA block analysis pass on 590
DEBUG 2022-02-14 16:45:25,834 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,834 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,834 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,834 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,834 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,834 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,834 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,834 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,834 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,835 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,835 ==== SSA block analysis pass on 624
DEBUG 2022-02-14 16:45:25,835 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,835 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,835 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,835 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,835 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,835 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,835 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,835 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,835 ==== SSA block analysis pass on 652
DEBUG 2022-02-14 16:45:25,835 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,835 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,835 ==== SSA block analysis pass on 656
DEBUG 2022-02-14 16:45:25,835 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,835 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,835 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,835 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,835 ==== SSA block analysis pass on 666
DEBUG 2022-02-14 16:45:25,835 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,835 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,835 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,835 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,835 ==== SSA block analysis pass on 672
DEBUG 2022-02-14 16:45:25,835 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,835 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,835 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,836 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,836 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,836 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,836 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,836 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,836 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,836 ==== SSA block analysis pass on 686
DEBUG 2022-02-14 16:45:25,836 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,836 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,836 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,836 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,836 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,836 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,836 ==== SSA block analysis pass on 688
DEBUG 2022-02-14 16:45:25,836 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,836 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:45:25,836 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:25,836 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,836 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,836 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,836 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,836 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,836 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,836 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,836 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,836 ==== SSA block analysis pass on 726
DEBUG 2022-02-14 16:45:25,836 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71baac4e20>
DEBUG 2022-02-14 16:45:25,836 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,836 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,838 defs defaultdict(<class 'list'>,
            {'$100load_global.44': [<numba.core.ir.Assign object at 0x7f71baae2a30>],
             '$102load_method.45': [<numba.core.ir.Assign object at 0x7f71baae2bb0>],
             '$108build_list.48': [<numba.core.ir.Assign object at 0x7f71baae6040>],
             '$110call_method.49': [<numba.core.ir.Assign object at 0x7f71baae6220>],
             '$114build_tuple.51': [<numba.core.ir.Assign object at 0x7f71baae6460>],
             '$120load_global.53': [<numba.core.ir.Assign object at 0x7f71baae6850>],
             '$122load_method.54': [<numba.core.ir.Assign object at 0x7f71baae69d0>],
             '$128binary_add.57': [<numba.core.ir.Assign object at 0x7f71baae6e20>],
             '$136load_method.60': [<numba.core.ir.Assign object at 0x7f71baae8370>],
             '$138call_method.61': [<numba.core.ir.Assign object at 0x7f71baae8580>],
             '$146load_global.64': [<numba.core.ir.Assign object at 0x7f71baae8a30>],
             '$154load_global.67': [<numba.core.ir.Assign object at 0x7f71baae8f70>],
             '$156load_attr.68': [<numba.core.ir.Assign object at 0x7f71baaea130>],
             '$162binary_multiply.71': [<numba.core.ir.Assign object at 0x7f71baaea580>],
             '$166binary_add.73': [<numba.core.ir.Assign object at 0x7f71baaea820>],
             '$170binary_add.75': [<numba.core.ir.Assign object at 0x7f71baaeab20>],
             '$172load_global.76': [<numba.core.ir.Assign object at 0x7f71baaeac70>],
             '$174load_attr.77': [<numba.core.ir.Assign object at 0x7f71baaeadf0>],
             '$182load_global.80': [<numba.core.ir.Assign object at 0x7f71baaed430>],
             '$184load_method.81': [<numba.core.ir.Assign object at 0x7f71baaed5b0>],
             '$188call_method.83': [<numba.core.ir.Assign object at 0x7f71baaed8e0>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x7f71baad9e50>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x7f71baad9f70>],
             '$190get_iter.84': [<numba.core.ir.Assign object at 0x7f71baaed9d0>],
             '$192for_iter.1': [<numba.core.ir.Assign object at 0x7f71baaded00>],
             '$192for_iter.2': [<numba.core.ir.Assign object at 0x7f71baadf9a0>],
             '$192for_iter.3': [<numba.core.ir.Assign object at 0x7f71baae2640>],
             '$198load_global.2': [<numba.core.ir.Assign object at 0x7f71baaea670>],
             '$200load_attr.3': [<numba.core.ir.Assign object at 0x7f71baaed760>],
             '$206binary_multiply.6': [<numba.core.ir.Assign object at 0x7f71baaede80>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x7f71baadd160>],
             '$210binary_add.8': [<numba.core.ir.Assign object at 0x7f71baaf2160>],
             '$214binary_add.10': [<numba.core.ir.Assign object at 0x7f71baaf2460>],
             '$216load_global.11': [<numba.core.ir.Assign object at 0x7f71baaf25b0>],
             '$218load_attr.12': [<numba.core.ir.Assign object at 0x7f71baaf2730>],
             '$226load_global.15': [<numba.core.ir.Assign object at 0x7f71baaf2d30>],
             '$238load_method.20': [<numba.core.ir.Assign object at 0x7f71baaf44f0>],
             '$248load_global.23': [<numba.core.ir.Assign object at 0x7f71baaf4bb0>],
             '$256binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7f71baaf51c0>],
             '$258call_function.28': [<numba.core.ir.Assign object at 0x7f71baaf5370>],
             '$260get_iter.29': [<numba.core.ir.Assign object at 0x7f71baaf5490>],
             '$262for_iter.2': [<numba.core.ir.Assign object at 0x7f71baaf4ac0>],
             '$262for_iter.3': [<numba.core.ir.Assign object at 0x7f71baaf5580>],
             '$262for_iter.4': [<numba.core.ir.Assign object at 0x7f71baaf56a0>],
             '$274binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71baaf5fa0>],
             '$280binary_subscr.10': [<numba.core.ir.Assign object at 0x7f71baaf73a0>],
             '$282build_tuple.11': [<numba.core.ir.Assign object at 0x7f71baaf7520>],
             '$284binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71baaf76a0>],
             '$286inplace_multiply.13': [<numba.core.ir.Assign object at 0x7f71baaf7820>],
             '$296pred': [<numba.core.ir.Assign object at 0x7f71baaf7bb0>],
             '$304binary_multiply.3': [<numba.core.ir.Assign object at 0x7f71baaf9100>],
             '$318load_global.1': [<numba.core.ir.Assign object at 0x7f71baaf9910>],
             '$328call_function.6': [<numba.core.ir.Assign object at 0x7f71baaf9f70>],
             '$330unpack_sequence.10': [<numba.core.ir.Assign object at 0x7f71baafb5b0>],
             '$330unpack_sequence.11': [<numba.core.ir.Assign object at 0x7f71baafb100>],
             '$330unpack_sequence.7': [<numba.core.ir.Assign object at 0x7f71baafb250>],
             '$330unpack_sequence.8': [<numba.core.ir.Assign object at 0x7f71baafb370>],
             '$330unpack_sequence.9': [<numba.core.ir.Assign object at 0x7f71baafb490>],
             '$340load_global.12': [<numba.core.ir.Assign object at 0x7f71baafbb50>],
             '$352binary_subscr.17': [<numba.core.ir.Assign object at 0x7f71baa9ee20>],
             '$356compare_op.19': [<numba.core.ir.Assign object at 0x7f71baafd6a0>],
             '$358pred': [<numba.core.ir.Assign object at 0x7f71baafd910>],
             '$366binary_subscr.3': [<numba.core.ir.Assign object at 0x7f71baa9ed00>],
             '$370compare_op.5': [<numba.core.ir.Assign object at 0x7f71baafdee0>],
             '$372pred': [<numba.core.ir.Assign object at 0x7f71baaff190>],
             '$376load_global.1': [<numba.core.ir.Assign object at 0x7f71baaff3d0>],
             '$392binary_floor_divide.8': [<numba.core.ir.Assign object at 0x7f71baaffe80>],
             '$396binary_subtract.10': [<numba.core.ir.Assign object at 0x7f71bab01160>],
             '$402load_global.12': [<numba.core.ir.Assign object at 0x7f71bab01550>],
             '$418call_function.20': [<numba.core.ir.Assign object at 0x7f71bab01f10>],
             '$42build_slice.18': [<numba.core.ir.Assign object at 0x7f71baade070>],
             '$42build_slice.19': [<numba.core.ir.Assign object at 0x7f71baade190>],
             '$432binary_subscr.27': [<numba.core.ir.Assign object at 0x7f71baa9ebe0>],
             '$438binary_multiply.30': [<numba.core.ir.Assign object at 0x7f71bab04ca0>],
             '$442binary_multiply.32': [<numba.core.ir.Assign object at 0x7f71bab04f40>],
             '$444inplace_add.33': [<numba.core.ir.Assign object at 0x7f71bab07100>],
             '$44build_tuple.20': [<numba.core.ir.Assign object at 0x7f71baade340>],
             '$450load_global.1': [<numba.core.ir.Assign object at 0x7f71bab01670>],
             '$466load_global.8': [<numba.core.ir.Assign object at 0x7f71bab07610>],
             '$486load_global.17': [<numba.core.ir.Assign object at 0x7f71baa89250>],
             '$494binary_subscr.21': [<numba.core.ir.Assign object at 0x7f71baa9eb50>],
             '$496binary_multiply.22': [<numba.core.ir.Assign object at 0x7f71baa899a0>],
             '$500binary_add.24': [<numba.core.ir.Assign object at 0x7f71baa89ca0>],
             '$506binary_multiply.27': [<numba.core.ir.Assign object at 0x7f71baa8b100>],
             '$510binary_add.29': [<numba.core.ir.Assign object at 0x7f71baa8b3a0>],
             '$514binary_add.31': [<numba.core.ir.Assign object at 0x7f71baa8b6a0>],
             '$516call_function.32': [<numba.core.ir.Assign object at 0x7f71baa8b850>],
             '$518get_iter.33': [<numba.core.ir.Assign object at 0x7f71baa8b970>],
             '$520for_iter.2': [<numba.core.ir.Assign object at 0x7f71bab07b20>],
             '$520for_iter.3': [<numba.core.ir.Assign object at 0x7f71bab07e80>],
             '$520for_iter.4': [<numba.core.ir.Assign object at 0x7f71baa89fa0>],
             '$52load_attr.23': [<numba.core.ir.Assign object at 0x7f71baade850>],
             '$538binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7f71baa8d6a0>],
             '$542binary_subtract.11': [<numba.core.ir.Assign object at 0x7f71baa8d940>],
             '$554binary_subtract.16': [<numba.core.ir.Assign object at 0x7f71baa8f100>],
             '$558binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7f71baa8f400>],
             '$564binary_subscr.21': [<numba.core.ir.Assign object at 0x7f71be3dc640>],
             '$566build_tuple.22': [<numba.core.ir.Assign object at 0x7f71baa8f9a0>],
             '$568binary_subscr.23': [<numba.core.ir.Assign object at 0x7f71baa8fb20>],
             '$580binary_modulo.28': [<numba.core.ir.Assign object at 0x7f71baa91340>],
             '$584compare_op.30': [<numba.core.ir.Assign object at 0x7f71baa91640>],
             '$586pred': [<numba.core.ir.Assign object at 0x7f71baa918b0>],
             '$596binary_subscr.6': [<numba.core.ir.Assign object at 0x7f71baa91ac0>],
             '$602binary_multiply.9': [<numba.core.ir.Assign object at 0x7f71baa91e80>],
             '$610binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7f71baa93400>],
             '$612binary_subscr.14': [<numba.core.ir.Assign object at 0x7f71baa93580>],
             '$614binary_multiply.15': [<numba.core.ir.Assign object at 0x7f71baa93700>],
             '$616inplace_add.16': [<numba.core.ir.Assign object at 0x7f71baa93880>],
             '$630binary_subscr.6': [<numba.core.ir.Assign object at 0x7f71baa93d60>],
             '$636binary_multiply.9': [<numba.core.ir.Assign object at 0x7f71baa95160>],
             '$642binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71baa95520>],
             '$644binary_multiply.13': [<numba.core.ir.Assign object at 0x7f71baa956a0>],
             '$646inplace_add.14': [<numba.core.ir.Assign object at 0x7f71baa95820>],
             '$64load_method.28': [<numba.core.ir.Assign object at 0x7f71baadf0d0>],
             '$660inplace_add.3': [<numba.core.ir.Assign object at 0x7f71baa95c40>],
             '$668pred': [<numba.core.ir.Assign object at 0x7f71baa98190>],
             '$66call_method.29': [<numba.core.ir.Assign object at 0x7f71baadf2e0>],
             '$672load_global.0': [<numba.core.ir.Assign object at 0x7f71baa983d0>],
             '$676load_attr.2': [<numba.core.ir.Assign object at 0x7f71baa98670>],
             '$680binary_subscr.4': [<numba.core.ir.Assign object at 0x7f71be3dc280>],
             '$682call_function.5': [<numba.core.ir.Assign object at 0x7f71baa98b50>],
             '$684get_iter.6': [<numba.core.ir.Assign object at 0x7f71baa98c70>],
             '$686for_iter.1': [<numba.core.ir.Assign object at 0x7f71baa98fa0>],
             '$686for_iter.2': [<numba.core.ir.Assign object at 0x7f71baa9c100>],
             '$686for_iter.3': [<numba.core.ir.Assign object at 0x7f71baa9c220>],
             '$68binary_multiply.30': [<numba.core.ir.Assign object at 0x7f71baadf400>],
             '$704binary_subscr.9': [<numba.core.ir.Assign object at 0x7f71baa9cf40>],
             '$712binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7f71baa9e520>],
             '$714binary_power.14': [<numba.core.ir.Assign object at 0x7f71baa9e6a0>],
             '$716inplace_multiply.15': [<numba.core.ir.Assign object at 0x7f71baa9e820>],
             '$728return_value.1': [<numba.core.ir.Assign object at 0x7f71baa9e280>],
             '$82binary_multiply.36': [<numba.core.ir.Assign object at 0x7f71baadfd60>],
             '$84binary_add.37': [<numba.core.ir.Assign object at 0x7f71baadfee0>],
             '$88binary_add.39': [<numba.core.ir.Assign object at 0x7f71baae21c0>],
             '$96load_global.42': [<numba.core.ir.Assign object at 0x7f71baae2730>],
             '$98load_method.43': [<numba.core.ir.Assign object at 0x7f71baae28b0>],
             '$const106.47': [<numba.core.ir.Assign object at 0x7f71baae2e50>],
             '$const12.4': [<numba.core.ir.Assign object at 0x7f71baad99d0>],
             '$const126.56': [<numba.core.ir.Assign object at 0x7f71baae6c70>],
             '$const14.5': [<numba.core.ir.Assign object at 0x7f71baad9b50>],
             '$const158.69': [<numba.core.ir.Assign object at 0x7f71baaea2b0>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7f71baad9cd0>],
             '$const168.74': [<numba.core.ir.Assign object at 0x7f71baaea970>],
             '$const202.4': [<numba.core.ir.Assign object at 0x7f71baaedbb0>],
             '$const212.9': [<numba.core.ir.Assign object at 0x7f71baaf22b0>],
             '$const250.24': [<numba.core.ir.Assign object at 0x7f71baaf4d30>],
             '$const254.26': [<numba.core.ir.Assign object at 0x7f71baaf4fd0>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7f71baadd670>],
             '$const300.1': [<numba.core.ir.Assign object at 0x7f71baaf7df0>],
             '$const350.16': [<numba.core.ir.Assign object at 0x7f71baafd1f0>],
             '$const354.18': [<numba.core.ir.Assign object at 0x7f71baafd4f0>],
             '$const36.15': [<numba.core.ir.Assign object at 0x7f71baaddbb0>],
             '$const364.2': [<numba.core.ir.Assign object at 0x7f71baafda30>],
             '$const368.4': [<numba.core.ir.Assign object at 0x7f71baafdd30>],
             '$const38.16': [<numba.core.ir.Assign object at 0x7f71baaddd30>],
             '$const386.5': [<numba.core.ir.Assign object at 0x7f71baaffa30>],
             '$const390.7': [<numba.core.ir.Assign object at 0x7f71baaffcd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71baad9490>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7f71baaddeb0>],
             '$const428.24': [<numba.core.ir.Assign object at 0x7f71bab04550>],
             '$const488.18': [<numba.core.ir.Assign object at 0x7f71baa893d0>],
             '$const492.20': [<numba.core.ir.Assign object at 0x7f71baa89670>],
             '$const498.23': [<numba.core.ir.Assign object at 0x7f71baa89af0>],
             '$const502.25': [<numba.core.ir.Assign object at 0x7f71baa89df0>],
             '$const512.30': [<numba.core.ir.Assign object at 0x7f71baa8b4f0>],
             '$const532.6': [<numba.core.ir.Assign object at 0x7f71baa8d250>],
             '$const536.8': [<numba.core.ir.Assign object at 0x7f71baa8d4f0>],
             '$const54.24': [<numba.core.ir.Assign object at 0x7f71baade9d0>],
             '$const552.15': [<numba.core.ir.Assign object at 0x7f71baa8df10>],
             '$const556.17': [<numba.core.ir.Assign object at 0x7f71baa8f250>],
             '$const562.20': [<numba.core.ir.Assign object at 0x7f71baa8f670>],
             '$const578.27': [<numba.core.ir.Assign object at 0x7f71baa91190>],
             '$const582.29': [<numba.core.ir.Assign object at 0x7f71baa91490>],
             '$const60.26': [<numba.core.ir.Assign object at 0x7f71baadedf0>],
             '$const608.12': [<numba.core.ir.Assign object at 0x7f71baa93250>],
             '$const678.3': [<numba.core.ir.Assign object at 0x7f71baa987f0>],
             '$const70.31': [<numba.core.ir.Assign object at 0x7f71baadf550>],
             '$const706.10': [<numba.core.ir.Assign object at 0x7f71baa9e0d0>],
             '$const710.12': [<numba.core.ir.Assign object at 0x7f71baa9e370>],
             '$const78.34': [<numba.core.ir.Assign object at 0x7f71baadfa90>],
             '$const90.40': [<numba.core.ir.Assign object at 0x7f71baae2310>],
             '$phi192.0': [<numba.core.ir.Assign object at 0x7f71baad93a0>],
             '$phi196.1': [<numba.core.ir.Assign object at 0x7f71baade640>],
             '$phi262.1': [<numba.core.ir.Assign object at 0x7f71baaedd60>],
             '$phi264.2': [<numba.core.ir.Assign object at 0x7f71baaf4400>],
             '$phi520.1': [<numba.core.ir.Assign object at 0x7f71bab01b80>],
             '$phi522.2': [<numba.core.ir.Assign object at 0x7f71bab078e0>],
             '$phi686.0': [<numba.core.ir.Assign object at 0x7f71baa984f0>],
             '$phi688.1': [<numba.core.ir.Assign object at 0x7f71baa98ee0>],
             'A': [<numba.core.ir.Assign object at 0x7f71bab09a30>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f71baafb670>],
             'D': [<numba.core.ir.Assign object at 0x7f71bab09370>],
             'D_S': [<numba.core.ir.Assign object at 0x7f71baafb8b0>],
             'E': [<numba.core.ir.Assign object at 0x7f71baafbe50>],
             'H_batch': [<numba.core.ir.Assign object at 0x7f71baaed2b0>,
                         <numba.core.ir.Assign object at 0x7f71baa95d00>],
             'Hnew': [<numba.core.ir.Assign object at 0x7f71baaf2bb0>],
             'N': [<numba.core.ir.Assign object at 0x7f71baa8bfa0>],
             'N_det': [<numba.core.ir.Assign object at 0x7f71baa8bbb0>],
             'N_fixed': [<numba.core.ir.Assign object at 0x7f71baadf700>],
             'N_max': [<numba.core.ir.Assign object at 0x7f71baae24c0>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f71baafb790>],
             'batch_max': [<numba.core.ir.Assign object at 0x7f71bab09130>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7f71baaf4910>,
                            <numba.core.ir.Assign object at 0x7f71baaf78e0>],
             'binoms': [<numba.core.ir.Assign object at 0x7f71baae8d30>],
             'bool296': [<numba.core.ir.Assign object at 0x7f71baaf7a90>],
             'bool358': [<numba.core.ir.Assign object at 0x7f71baafd7f0>],
             'bool372': [<numba.core.ir.Assign object at 0x7f71baaff070>],
             'bool586': [<numba.core.ir.Assign object at 0x7f71baa91790>],
             'bool668': [<numba.core.ir.Assign object at 0x7f71baa98070>],
             'delta': [<numba.core.ir.Assign object at 0x7f71baaf93a0>,
                       <numba.core.ir.Assign object at 0x7f71baaf9700>],
             'edge_reps': [<numba.core.ir.Assign object at 0x7f71baae6640>],
             'edges_sum': [<numba.core.ir.Assign object at 0x7f71baaf4700>],
             'even_cutoff': [<numba.core.ir.Assign object at 0x7f71bab09f70>],
             'f': [<numba.core.ir.Assign object at 0x7f71bab041c0>],
             'f_even': [<numba.core.ir.Assign object at 0x7f71bab073d0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7f71bab07fd0>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x7f71bab09730>],
             'glynn': [<numba.core.ir.Assign object at 0x7f71baad91f0>],
             'i': [<numba.core.ir.Assign object at 0x7f71baaf5970>],
             'j': [<numba.core.ir.Assign object at 0x7f71baae88b0>,
                   <numba.core.ir.Assign object at 0x7f71baa9c4c0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71baaf4190>],
             'max_binom': [<numba.core.ir.Assign object at 0x7f71baae87c0>],
             'n': [<numba.core.ir.Assign object at 0x7f71baac4310>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7f71baa8fdc0>],
             'oddV': [<numba.core.ir.Assign object at 0x7f71baac40d0>],
             'oddV0': [<numba.core.ir.Assign object at 0x7f71baac4250>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f71baafb9d0>],
             'oddVX_S0': [<numba.core.ir.Assign object at 0x7f71baaff7f0>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71baa9efa0>],
             'oddloop0': [<numba.core.ir.Assign object at 0x7f71baac4190>],
             'oddmode': [<numba.core.ir.Assign object at 0x7f71baad90d0>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7f71bab012e0>,
                            <numba.core.ir.Assign object at 0x7f71baa8dac0>],
             'steps': [<numba.core.ir.Assign object at 0x7f71baae8040>],
             'x': [<numba.core.ir.Assign object at 0x7f71baa9c880>]})
DEBUG 2022-02-14 16:45:25,839 SSA violators {'delta', 'j', 'binom_prod', 'H_batch', 'plus_minus'}
DEBUG 2022-02-14 16:45:25,839 Fix SSA violator on var delta
DEBUG 2022-02-14 16:45:25,839 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,839 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,839 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,839 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,839 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,839 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,839 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,839 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,839 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,839 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,839 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,839 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,839 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,839 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,839 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,839 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,840 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,840 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,840 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,840 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,840 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,840 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,840 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,840 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,840 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,840 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,840 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,840 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,840 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,840 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,840 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,840 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,840 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,841 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,841 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,841 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,841 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,841 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,841 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,841 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,841 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,841 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,841 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,841 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,841 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,841 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,841 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,841 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,841 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,841 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,841 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,841 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,841 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,841 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,842 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,842 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,842 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,842 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,842 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,842 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,842 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,842 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,842 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,842 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,842 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,842 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,842 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,842 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,842 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,842 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,842 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,842 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,842 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,842 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,842 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,842 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,842 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,842 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,842 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,843 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,843 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,843 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,843 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,843 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,843 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,843 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,843 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,843 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,843 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,843 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,843 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,843 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,843 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,843 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,843 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,843 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,843 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,843 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,843 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,843 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,843 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,843 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,843 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,844 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,844 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,844 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,844 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,844 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,844 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,844 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,844 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,844 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,844 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,844 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,844 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,844 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,844 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,844 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,844 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,844 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,844 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,844 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,844 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,844 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,844 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,844 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,845 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,845 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,845 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,845 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,845 first assign: delta
DEBUG 2022-02-14 16:45:25,845 replaced with: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,845 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,845 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,845 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,845 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:25,845 replaced with: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,845 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,845 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,845 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,845 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,845 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,845 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,845 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,845 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,845 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,845 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,845 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,845 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,846 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,846 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,846 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,846 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,846 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,846 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,846 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,846 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,846 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,846 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,846 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,846 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,846 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,846 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,846 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,846 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,846 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,846 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,846 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,846 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,846 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,846 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,846 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,846 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,847 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,847 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,847 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,847 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,847 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,847 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,847 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,847 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,847 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,847 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,847 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,847 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,847 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,847 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,847 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,847 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,847 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,847 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,847 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,847 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,847 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,848 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,848 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,848 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,848 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,848 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,848 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,848 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,848 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,848 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,848 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,848 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,848 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,848 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,848 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,848 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,848 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,848 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,848 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,848 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,848 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,848 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,849 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,849 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,849 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,849 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,849 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,849 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,849 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,849 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,849 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,849 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,849 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,849 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,849 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,849 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,849 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,849 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,849 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,849 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,849 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,849 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,849 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,849 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,849 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,849 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,850 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,850 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,850 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,850 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,850 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,850 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,850 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,850 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,850 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,850 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,850 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,850 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,850 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,850 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,850 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,850 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,850 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,850 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,850 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,850 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,850 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,850 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,850 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,851 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,851 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,851 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,851 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,851 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,851 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,851 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,851 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,851 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,851 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,851 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,851 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,851 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,851 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,851 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,851 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,851 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,851 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,851 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,851 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,851 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,851 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,851 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,852 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,852 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,852 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,852 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,852 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,852 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,852 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,852 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,852 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,852 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:45:25,852 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:25,852 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,852 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,852 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,852 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,852 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,852 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,852 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,852 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,852 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,852 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,852 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,852 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,852 Replaced assignments: defaultdict(<class 'list'>,
            {300: [<numba.core.ir.Assign object at 0x7f71baac4e80>],
             314: [<numba.core.ir.Assign object at 0x7f71baac4f40>]})
DEBUG 2022-02-14 16:45:25,853 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,853 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,853 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,853 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,853 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,853 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,853 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,853 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,853 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,853 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,853 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,853 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,853 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,853 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,853 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,853 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,854 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,854 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,854 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,854 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,854 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,854 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,854 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,854 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,854 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,854 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,854 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,854 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,854 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,854 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,854 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,854 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,854 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,854 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,854 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,854 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,855 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,855 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,855 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,855 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,855 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,855 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,855 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,855 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,855 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,855 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,855 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,855 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,855 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,855 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,855 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,855 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,855 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,855 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,856 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,856 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,856 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,856 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,856 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,856 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,856 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,856 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,856 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,856 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,856 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,856 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,856 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,856 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,856 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,856 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,856 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,856 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,856 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,857 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,857 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,857 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,857 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,857 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,857 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,857 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,857 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,857 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,857 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,857 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,857 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,857 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,857 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,857 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,857 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,857 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,857 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,857 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,857 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,857 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,858 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,858 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,858 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,858 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,858 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,858 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,858 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,858 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,858 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,858 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,858 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,858 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,858 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,858 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,858 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,858 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,858 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,858 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,859 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,859 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,859 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,859 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,859 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,859 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,859 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,859 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,859 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,859 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,859 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,859 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,859 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,859 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,859 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,859 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,859 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,859 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,859 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,860 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,860 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,860 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,860 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,860 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,860 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,860 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,860 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,860 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,860 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,860 find_def var='delta' stmt=$328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,860 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,860 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
DEBUG 2022-02-14 16:45:25,860 find_def_from_bottom label 314
DEBUG 2022-02-14 16:45:25,860 incoming_def delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,860 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:25,860 incoming_def delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,860 replaced with: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,860 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,860 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,861 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,861 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,861 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,861 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,861 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,861 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,861 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,861 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,861 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,861 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,861 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,861 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,861 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,861 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,861 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,862 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,862 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,862 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,862 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,862 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,862 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,862 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,862 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,862 find_def var='delta' stmt=oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,862 find_def_from_top label 376
DEBUG 2022-02-14 16:45:25,862 idom 362 from label 376
DEBUG 2022-02-14 16:45:25,862 find_def_from_bottom label 362
DEBUG 2022-02-14 16:45:25,862 find_def_from_top label 362
DEBUG 2022-02-14 16:45:25,862 idom 318 from label 362
DEBUG 2022-02-14 16:45:25,862 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,862 replaced with: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,862 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,862 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,862 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,862 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,863 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,863 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,863 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,863 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,863 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,863 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,863 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,863 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,863 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,863 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,863 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,863 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,863 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,863 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,863 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,864 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,864 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,864 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,864 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,864 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,864 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,864 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,864 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,864 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,864 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,864 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,864 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,864 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,864 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,864 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,864 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,864 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,864 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,864 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,864 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,864 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,865 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,865 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,865 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,865 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,865 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,865 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,865 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,865 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,865 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,865 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,865 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,865 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,865 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,865 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,865 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,865 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,865 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,865 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,865 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,865 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,865 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,866 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,866 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,866 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,866 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,866 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,866 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,866 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,866 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,866 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,866 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,866 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,866 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,866 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,866 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,866 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,866 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,866 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,866 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,866 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,866 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,867 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,867 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,867 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,867 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,867 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,867 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,867 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,867 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,867 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,867 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,867 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,867 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,867 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,867 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,867 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,867 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,867 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,867 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,867 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,867 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,867 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,868 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,868 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,868 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,868 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,868 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,868 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,868 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,868 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,868 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,868 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,868 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,868 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,868 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,868 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,868 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,868 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,868 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,868 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,868 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,868 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:45:25,868 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:25,868 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,868 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,868 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,869 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,869 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,869 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,869 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,869 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,869 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,869 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,869 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,869 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,869 Fix SSA violator on var j
DEBUG 2022-02-14 16:45:25,869 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,869 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,869 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,869 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,869 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,869 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,869 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,869 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,869 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,869 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,869 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,869 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,869 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,869 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,869 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,870 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,870 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,870 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,870 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,870 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,870 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,870 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,870 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,870 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,870 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,870 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,870 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,870 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,870 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,870 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,871 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,871 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,871 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,871 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,871 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,871 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,871 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,871 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,871 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,871 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,871 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,871 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,871 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,871 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,871 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,871 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,872 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,872 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,872 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,872 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,872 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,872 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,872 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,872 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,872 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,872 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,872 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,872 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,872 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,872 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,872 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,872 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,872 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,872 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,872 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,872 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,872 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,872 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,872 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,873 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,873 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,873 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,873 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,873 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,873 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,873 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,873 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,873 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,873 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,873 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,873 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,873 first assign: j
DEBUG 2022-02-14 16:45:25,873 replaced with: j = $phi196.1
DEBUG 2022-02-14 16:45:25,873 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,873 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,873 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,873 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,873 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,873 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,873 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,873 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,873 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,874 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,874 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,874 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,874 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,874 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,874 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,874 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,874 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,874 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,874 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,874 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,874 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,874 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,874 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,874 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,874 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,874 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,874 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,874 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,875 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,875 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,875 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,875 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,875 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,875 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,875 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,875 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,875 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,875 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,875 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,875 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,875 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,875 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,875 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,875 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,875 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,875 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,875 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,875 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,875 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,875 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,875 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,875 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,875 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,876 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,876 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,876 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,876 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,876 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,876 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,876 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,876 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,876 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,876 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,876 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,876 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,876 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,876 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,876 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,876 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,876 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,876 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,876 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,876 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,876 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,877 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,877 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,877 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,877 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,877 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,877 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,877 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,877 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,877 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,877 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,877 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,877 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,877 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,877 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,877 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,877 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,877 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,877 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,877 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,877 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,877 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,877 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,877 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,877 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,878 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,878 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,878 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,878 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,878 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,878 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,878 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,878 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,878 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,878 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,878 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,878 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,878 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,878 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,878 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,878 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,878 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,878 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,878 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,879 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,879 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,879 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,879 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,879 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,879 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,879 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,879 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,879 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,879 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,879 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,879 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,879 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,879 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,879 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,879 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,879 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,879 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,879 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,879 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,879 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,879 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,879 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,880 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,880 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,880 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,880 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,880 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,880 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,880 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,880 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,880 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,880 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,880 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,880 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,880 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,880 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,880 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,880 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,880 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,880 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,880 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,880 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,880 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,880 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,881 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,881 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,881 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,881 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,881 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,881 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,881 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,881 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,881 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,881 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,881 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,881 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,881 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,881 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,881 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,881 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,881 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,881 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,881 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,881 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,881 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,882 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,882 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,882 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,882 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,882 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,882 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,882 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,882 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,882 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,882 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,882 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,882 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,882 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,882 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,882 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,882 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,882 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,882 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,882 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,882 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:45:25,883 replaced with: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,883 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:25,883 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,883 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,883 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,883 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,883 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,883 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,883 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,883 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,883 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,883 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09790>
DEBUG 2022-02-14 16:45:25,883 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,883 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,883 Replaced assignments: defaultdict(<class 'list'>,
            {196: [<numba.core.ir.Assign object at 0x7f71baac4fd0>],
             688: [<numba.core.ir.Assign object at 0x7f71baa6fb50>]})
DEBUG 2022-02-14 16:45:25,883 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,883 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,883 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,883 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,883 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,884 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,884 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,884 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,884 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,884 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,884 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,884 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,884 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,884 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,884 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,884 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,885 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,885 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,885 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,885 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,885 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,885 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,885 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,885 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,885 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,885 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,885 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,885 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,885 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,885 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,885 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,885 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,885 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,885 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,885 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,885 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,885 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,886 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,886 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,886 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,886 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,886 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,886 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,886 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,886 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,886 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,886 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,886 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,886 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,886 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,886 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,886 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,886 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,886 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,886 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,886 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,887 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,887 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,887 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,887 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,887 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,887 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,887 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,887 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,887 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,887 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,887 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,887 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,887 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,887 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,887 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,887 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,887 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,887 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,887 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,887 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,888 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,888 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,888 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,888 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,888 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,888 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,888 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,888 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,888 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,888 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,888 find_def var='j' stmt=kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,888 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,888 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,888 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,888 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,888 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,888 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,888 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,888 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,888 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,888 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,889 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,889 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,889 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,889 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,889 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,889 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,889 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,889 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,889 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,889 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,889 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,889 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,889 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,889 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,889 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,889 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,889 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,889 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,889 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,889 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,889 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,889 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,890 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,890 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,890 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,890 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,890 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,890 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,890 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,890 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,890 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,890 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,890 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,890 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,890 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,890 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,890 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,890 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,890 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,891 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,891 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,891 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,891 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,891 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,891 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,891 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,891 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,891 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,891 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,891 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,891 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,891 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,891 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,891 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,892 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,892 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,892 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,892 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,892 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,892 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,892 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,892 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,892 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,892 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,892 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,892 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,892 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,892 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,892 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,892 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,892 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,892 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,893 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,893 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,893 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,893 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,893 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,893 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,893 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,893 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,893 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,893 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,893 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,893 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,893 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,893 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,893 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,893 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,894 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,894 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,894 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,894 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,894 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,894 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,894 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,894 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,894 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,894 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,894 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,894 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,894 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,894 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,894 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,894 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,895 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,895 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,895 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,895 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,895 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,895 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,895 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,895 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,895 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,895 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,895 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,895 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,895 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,895 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,895 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,895 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,896 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,896 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,896 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,896 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,896 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,896 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,896 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,896 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,896 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,896 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,896 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,896 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,896 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,896 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,896 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,896 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,896 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,896 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,897 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,897 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,897 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,897 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,897 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,897 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,897 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,897 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,897 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,897 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,897 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,897 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,897 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,897 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,897 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,898 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,898 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,898 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,898 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,898 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,898 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,898 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,898 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,898 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,898 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,898 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,898 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,898 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,898 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,898 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,898 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,899 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,899 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,899 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,899 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,899 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,899 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,899 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,899 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,899 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,899 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,899 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,899 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,899 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,899 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,899 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,899 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,899 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,899 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,899 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,900 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,900 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:25,900 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-14 16:45:25,900 replaced with: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:25,900 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,900 find_def var='j' stmt=$704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,900 replaced with: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,900 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,900 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,900 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,900 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,900 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,900 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,900 find_def var='j' stmt=H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,900 replaced with: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,900 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,900 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,900 Running <numba.core.ssa._FixSSAVars object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,901 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,901 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,901 Fix SSA violator on var binom_prod
DEBUG 2022-02-14 16:45:25,901 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,901 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,901 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,901 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,901 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,901 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,901 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,901 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,901 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,901 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,901 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,901 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,901 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,901 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,902 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,902 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,902 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,902 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,902 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,902 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,902 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,902 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,902 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,903 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,903 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,903 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,903 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,903 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,903 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,903 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,903 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,903 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,903 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,903 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,903 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,903 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,903 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,903 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,903 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,903 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,903 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,904 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,904 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,904 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,904 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,904 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,904 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,904 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,904 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,904 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,904 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,904 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,904 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,904 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,904 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,904 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,904 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,904 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,904 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,905 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,905 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,905 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,905 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,905 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,905 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,905 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,905 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,905 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,905 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,905 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,905 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,905 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,905 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,905 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,905 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,905 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,905 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,905 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,906 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,906 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,906 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,906 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,906 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,906 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,906 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,906 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,906 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,906 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,906 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,906 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,906 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,906 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,906 first assign: binom_prod
DEBUG 2022-02-14 16:45:25,906 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,906 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,907 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,907 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,907 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,907 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,907 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,907 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,907 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,907 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,907 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,907 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,907 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,907 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,907 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,907 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,907 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,907 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,907 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,908 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,908 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,908 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,908 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,908 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,908 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,908 replaced with: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,908 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,908 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,908 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,908 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,908 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,908 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,908 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,908 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,908 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,909 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,909 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,909 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,909 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,909 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,909 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,909 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,909 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,909 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,909 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,909 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,909 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,909 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,909 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,909 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,909 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,909 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,910 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,910 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,910 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,910 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,910 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,910 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,910 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,910 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,910 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,910 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,910 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,910 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,910 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,910 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,910 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,910 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,910 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,910 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,910 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,911 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,911 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,911 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,911 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,911 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,911 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,911 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,911 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,911 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,911 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,911 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,911 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,911 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,911 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,911 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,911 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,911 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,912 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,912 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,912 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,912 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,912 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,912 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,912 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,912 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,912 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,912 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,912 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,912 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,912 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,912 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,912 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,913 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,913 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,913 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,913 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,913 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,913 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,913 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,913 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,913 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,913 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,913 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,913 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,913 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,913 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,913 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,913 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,913 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,913 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,914 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,914 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,914 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,914 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,914 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,914 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,914 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,914 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,914 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,914 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,914 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,914 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,914 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,914 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,914 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,914 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,914 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,914 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,914 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,914 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,914 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,914 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,915 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,915 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,915 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,915 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,915 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,915 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,915 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,915 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,915 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,915 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,915 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,915 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,915 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,915 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,915 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,915 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,915 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,915 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,916 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,916 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,916 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,916 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,916 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,916 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,916 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,916 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,916 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,916 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,916 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,916 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,916 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,916 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,916 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,916 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,916 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,916 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,917 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,917 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,917 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,917 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,917 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,917 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,917 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,917 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,917 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,917 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,917 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,917 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,917 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,917 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,917 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,917 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,917 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,917 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,918 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,918 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,918 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,918 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:25,918 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,918 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,918 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,918 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,918 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,918 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,918 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,918 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,918 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,918 Running <numba.core.ssa._FreshVarHandler object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,918 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,918 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,919 Replaced assignments: defaultdict(<class 'list'>,
            {196: [<numba.core.ir.Assign object at 0x7f71baac4a60>],
             264: [<numba.core.ir.Assign object at 0x7f71baac4400>]})
DEBUG 2022-02-14 16:45:25,919 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,919 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,919 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,919 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,919 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,919 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,919 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,919 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,919 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,919 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,919 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,919 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,919 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,919 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,919 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,919 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,920 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,920 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,920 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,920 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,920 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,920 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,920 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,920 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,920 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,920 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,920 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,920 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,920 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,921 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,921 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,921 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,921 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,921 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,921 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,921 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,921 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,921 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,921 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,921 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,921 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,921 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,921 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,921 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,922 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,922 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,922 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,922 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,922 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,922 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,922 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,922 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,922 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,922 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,922 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,922 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,922 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,922 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,922 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,923 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,923 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,923 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,923 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,923 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,923 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,923 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,923 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,923 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,923 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,923 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,923 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,923 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,923 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,923 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,923 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,923 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,923 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,923 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,923 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,924 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,924 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,924 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,924 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,924 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,924 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,924 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,924 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,924 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,924 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,924 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,924 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,924 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,924 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,925 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,925 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,925 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,925 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,925 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,925 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,925 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,925 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,925 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,925 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,925 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,926 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,926 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,926 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,926 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,926 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,926 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,926 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,926 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,926 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,926 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,926 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,926 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,926 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,926 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,926 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,926 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,927 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,927 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,927 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,927 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,927 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,927 find_def var='binom_prod' stmt=$286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,927 find_def_from_top label 264
DEBUG 2022-02-14 16:45:25,927 idom 262 from label 264
DEBUG 2022-02-14 16:45:25,927 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,927 find_def_from_top label 262
DEBUG 2022-02-14 16:45:25,927 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 262
DEBUG 2022-02-14 16:45:25,927 find_def_from_bottom label 264
DEBUG 2022-02-14 16:45:25,927 incoming_def binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,927 find_def_from_bottom label 196
DEBUG 2022-02-14 16:45:25,927 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,928 replaced with: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,928 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,928 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,928 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,928 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,928 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,928 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,928 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,928 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,928 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,928 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,928 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,928 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,928 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,929 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,929 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,929 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,929 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,929 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,929 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,929 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,929 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,929 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,929 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,929 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,929 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,929 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,929 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,930 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,930 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,930 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,930 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,930 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,930 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,930 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,930 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,930 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,930 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,930 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,930 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,930 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,930 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,930 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,930 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,930 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,931 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,931 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,931 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,931 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,931 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,931 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,931 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,931 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,931 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,931 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,931 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,932 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,932 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,932 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,932 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,932 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,932 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,932 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,932 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,932 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,932 find_def var='binom_prod' stmt=$438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,932 find_def_from_top label 376
DEBUG 2022-02-14 16:45:25,932 idom 362 from label 376
DEBUG 2022-02-14 16:45:25,932 find_def_from_bottom label 362
DEBUG 2022-02-14 16:45:25,932 find_def_from_top label 362
DEBUG 2022-02-14 16:45:25,932 idom 318 from label 362
DEBUG 2022-02-14 16:45:25,932 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,932 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,932 idom 294 from label 318
DEBUG 2022-02-14 16:45:25,932 find_def_from_bottom label 294
DEBUG 2022-02-14 16:45:25,933 find_def_from_top label 294
DEBUG 2022-02-14 16:45:25,933 idom 262 from label 294
DEBUG 2022-02-14 16:45:25,933 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,933 replaced with: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:25,933 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,933 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,933 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,933 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,933 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,933 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,933 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,933 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,933 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,933 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,933 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,933 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,933 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,934 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,934 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,934 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,934 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,934 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,934 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,934 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,934 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,934 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,934 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,934 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,934 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,934 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,934 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,934 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,934 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,934 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,934 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,935 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,935 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,935 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,935 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,935 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,935 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,935 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,935 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,935 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,935 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,935 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,935 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,935 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,935 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,935 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,936 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,936 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,936 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,936 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,936 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,936 find_def var='binom_prod' stmt=n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:45:25,936 find_def_from_top label 522
DEBUG 2022-02-14 16:45:25,936 idom 520 from label 522
DEBUG 2022-02-14 16:45:25,936 find_def_from_bottom label 520
DEBUG 2022-02-14 16:45:25,936 find_def_from_top label 520
DEBUG 2022-02-14 16:45:25,936 idom 450 from label 520
DEBUG 2022-02-14 16:45:25,936 find_def_from_bottom label 450
DEBUG 2022-02-14 16:45:25,936 find_def_from_top label 450
DEBUG 2022-02-14 16:45:25,936 idom 318 from label 450
DEBUG 2022-02-14 16:45:25,936 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,936 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,936 idom 294 from label 318
DEBUG 2022-02-14 16:45:25,936 find_def_from_bottom label 294
DEBUG 2022-02-14 16:45:25,936 find_def_from_top label 294
DEBUG 2022-02-14 16:45:25,936 idom 262 from label 294
DEBUG 2022-02-14 16:45:25,936 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,937 replaced with: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:25,937 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,937 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,937 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,937 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,937 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,937 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,937 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,937 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,937 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,937 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,937 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,937 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,937 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,937 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,937 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,937 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,937 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,937 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,938 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,938 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,938 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,938 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,938 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,938 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,938 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,938 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,938 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,938 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,938 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,938 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,938 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,938 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,938 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,938 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,938 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,938 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,938 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,938 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,938 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,938 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,938 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,938 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,939 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,939 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,939 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,939 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,939 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,939 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,939 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,939 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,939 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,939 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,939 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,939 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,939 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,939 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,940 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,940 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,940 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,940 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,940 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:25,940 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,940 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,940 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,940 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,940 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,940 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,940 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,940 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,940 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,940 Running <numba.core.ssa._FixSSAVars object at 0x7f71baa6f070>
DEBUG 2022-02-14 16:45:25,940 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,940 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,940 Fix SSA violator on var H_batch
DEBUG 2022-02-14 16:45:25,940 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,941 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,941 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,941 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,941 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,941 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,941 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,941 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,941 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,941 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,941 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,941 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,941 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,941 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,941 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,941 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,941 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,941 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,942 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,942 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,942 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,942 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,942 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,942 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,942 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,942 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,942 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,942 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,942 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,942 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,942 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,942 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,942 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,943 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,943 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,943 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,943 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,943 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,943 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,943 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,943 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,943 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,943 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,943 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,943 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,943 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,943 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,943 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,944 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,944 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,944 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,944 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,944 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,944 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,944 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,944 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,944 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,944 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,944 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,944 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,944 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,944 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,944 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,944 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,944 first assign: H_batch
DEBUG 2022-02-14 16:45:25,944 replaced with: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,944 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,944 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,944 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,945 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,945 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,945 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,945 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,945 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,945 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,945 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,945 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,945 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,945 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,945 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,945 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,945 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,945 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,945 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,945 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,945 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,945 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,945 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,945 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,945 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,945 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,945 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,946 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,946 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,946 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,946 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,946 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,946 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,946 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,946 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,946 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,946 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,946 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,946 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,946 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,947 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,947 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,947 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:45:25,947 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,947 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,947 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,947 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,947 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,947 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,947 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,947 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,947 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,947 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,947 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,947 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,947 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,947 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,947 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,947 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,948 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,948 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,948 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,948 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,948 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,948 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,948 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,948 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,948 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,948 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,948 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,948 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,948 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,948 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,948 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,948 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,948 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,948 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,948 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,948 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,949 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,949 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,949 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,949 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,949 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,949 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,949 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,949 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,949 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,949 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,949 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,949 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,949 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,949 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,949 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,949 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,949 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,949 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,949 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,950 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,950 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,950 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,950 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,950 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,950 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,950 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,950 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,950 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,950 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,950 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,950 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,950 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,950 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,950 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,950 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,951 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,951 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,951 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,951 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,951 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,951 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:25,951 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,951 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,951 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,951 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,951 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,951 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,951 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,951 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,951 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,951 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,952 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,952 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,952 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,952 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,952 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,952 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,952 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,952 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,952 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,952 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,952 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,952 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,952 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,952 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,952 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,952 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,952 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,952 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,953 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,953 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,953 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,953 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,953 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,953 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,953 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,953 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,953 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,953 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,953 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,953 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,953 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,953 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,953 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,953 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,953 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,953 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,953 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,953 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,954 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,954 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,954 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:25,954 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,954 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,954 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,954 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,954 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,954 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,954 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,954 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,954 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,954 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,954 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,954 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,954 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,954 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,954 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,955 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,955 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,955 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,955 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,955 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,955 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,955 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,955 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,955 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,955 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,955 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,955 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,955 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,955 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,955 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,955 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,955 replaced with: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,955 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,956 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,956 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,956 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,956 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,956 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,956 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,956 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,956 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,956 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,956 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,956 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,956 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,956 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,956 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,956 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,956 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,956 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,956 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,956 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,956 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,956 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,956 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,957 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,957 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,957 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,957 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:25,957 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,957 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,957 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,957 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,957 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,957 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,957 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,957 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,957 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,957 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baac4b80>
DEBUG 2022-02-14 16:45:25,957 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,957 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,957 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71baac4640>],
             656: [<numba.core.ir.Assign object at 0x7f71baa6ff40>]})
DEBUG 2022-02-14 16:45:25,957 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,958 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,958 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,958 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,958 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,958 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,958 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,958 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,958 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,958 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,958 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,958 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,958 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,959 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,959 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,959 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,959 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,959 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,959 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,959 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,959 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,959 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,960 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,960 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,960 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,960 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,960 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,960 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,960 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,960 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,960 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,960 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,960 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,960 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,960 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,960 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,960 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,960 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,960 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,960 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,960 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,960 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,960 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,960 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,960 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,961 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,961 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,961 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,961 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,961 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,961 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,961 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,961 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,961 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,961 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,961 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,961 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,961 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,961 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,961 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,961 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,961 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,961 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,961 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,961 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,961 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,961 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,962 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,962 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,962 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,962 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,962 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,962 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,962 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,962 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,962 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,962 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,962 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,962 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,962 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,962 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,962 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,962 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,962 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,962 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,962 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,962 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,962 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,962 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,962 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,962 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,963 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,963 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,963 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,963 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,963 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,963 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,963 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,963 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,963 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,963 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,963 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,963 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,963 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,963 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:45:25,963 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,963 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,963 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,963 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,963 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,963 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,963 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,963 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,963 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,963 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,964 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,964 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,964 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,964 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,964 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,964 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,964 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,964 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,964 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,964 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,964 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,964 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,964 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,964 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,964 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,964 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,964 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,964 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,964 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,964 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,964 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,965 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,965 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,965 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,965 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,965 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,965 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,965 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,965 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,965 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,965 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,965 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,965 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,965 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,965 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,965 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,965 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,965 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,965 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,966 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,966 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,966 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,966 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,966 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,966 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,966 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,966 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,966 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,966 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,966 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,966 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,966 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,966 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,966 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,966 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,966 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,966 find_def var='H_batch' stmt=$432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,966 find_def_from_top label 376
DEBUG 2022-02-14 16:45:25,966 idom 362 from label 376
DEBUG 2022-02-14 16:45:25,966 find_def_from_bottom label 362
DEBUG 2022-02-14 16:45:25,966 find_def_from_top label 362
DEBUG 2022-02-14 16:45:25,966 idom 318 from label 362
DEBUG 2022-02-14 16:45:25,966 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,967 idom 294 from label 318
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 294
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 294
DEBUG 2022-02-14 16:45:25,967 idom 262 from label 294
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 262
DEBUG 2022-02-14 16:45:25,967 idom 196 from label 262
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 196
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 196
DEBUG 2022-02-14 16:45:25,967 idom 192 from label 196
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 192
DEBUG 2022-02-14 16:45:25,967 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 192
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:25,967 incoming_def H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 656
DEBUG 2022-02-14 16:45:25,967 incoming_def H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,967 replaced with: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,967 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:25,967 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,967 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,967 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,967 find_def var='H_batch' stmt=H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,967 find_def_from_top label 376
DEBUG 2022-02-14 16:45:25,967 idom 362 from label 376
DEBUG 2022-02-14 16:45:25,967 find_def_from_bottom label 362
DEBUG 2022-02-14 16:45:25,968 find_def_from_top label 362
DEBUG 2022-02-14 16:45:25,968 idom 318 from label 362
DEBUG 2022-02-14 16:45:25,968 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,968 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,968 idom 294 from label 318
DEBUG 2022-02-14 16:45:25,968 find_def_from_bottom label 294
DEBUG 2022-02-14 16:45:25,968 find_def_from_top label 294
DEBUG 2022-02-14 16:45:25,968 idom 262 from label 294
DEBUG 2022-02-14 16:45:25,968 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,968 find_def_from_top label 262
DEBUG 2022-02-14 16:45:25,968 idom 196 from label 262
DEBUG 2022-02-14 16:45:25,968 find_def_from_bottom label 196
DEBUG 2022-02-14 16:45:25,968 find_def_from_top label 196
DEBUG 2022-02-14 16:45:25,968 idom 192 from label 196
DEBUG 2022-02-14 16:45:25,968 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,968 replaced with: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,968 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,968 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,968 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,968 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,968 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,968 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,968 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,968 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,968 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,968 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,968 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,969 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,969 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,969 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,969 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,969 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,969 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,969 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,969 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,969 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,969 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,969 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,969 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,969 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,969 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,969 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,969 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,969 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,969 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,969 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,969 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,969 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,970 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,970 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,970 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,970 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,970 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,970 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,970 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,970 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,970 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,970 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,970 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,970 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,970 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,970 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,971 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,971 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:25,971 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,971 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,971 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,971 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,971 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,971 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,971 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,971 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,971 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,971 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,971 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,972 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,972 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,972 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,972 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,972 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,972 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,972 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,972 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,972 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,972 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,972 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,972 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,972 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,973 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,973 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,973 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,973 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,973 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,973 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,973 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:25,973 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,973 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,973 find_def var='H_batch' stmt=$660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,973 find_def_from_top label 656
DEBUG 2022-02-14 16:45:25,973 idom 520 from label 656
DEBUG 2022-02-14 16:45:25,973 find_def_from_bottom label 520
DEBUG 2022-02-14 16:45:25,973 find_def_from_top label 520
DEBUG 2022-02-14 16:45:25,973 idom 450 from label 520
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 450
DEBUG 2022-02-14 16:45:25,974 find_def_from_top label 450
DEBUG 2022-02-14 16:45:25,974 idom 318 from label 450
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 318
DEBUG 2022-02-14 16:45:25,974 find_def_from_top label 318
DEBUG 2022-02-14 16:45:25,974 idom 294 from label 318
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 294
DEBUG 2022-02-14 16:45:25,974 find_def_from_top label 294
DEBUG 2022-02-14 16:45:25,974 idom 262 from label 294
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 262
DEBUG 2022-02-14 16:45:25,974 find_def_from_top label 262
DEBUG 2022-02-14 16:45:25,974 idom 196 from label 262
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 196
DEBUG 2022-02-14 16:45:25,974 find_def_from_top label 196
DEBUG 2022-02-14 16:45:25,974 idom 192 from label 196
DEBUG 2022-02-14 16:45:25,974 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,974 replaced with: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,975 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:45:25,975 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,975 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:25,975 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,975 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,975 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,975 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:25,975 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:25,975 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,975 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,975 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,975 find_def var='H_batch' stmt=$676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:25,975 find_def_from_top label 672
DEBUG 2022-02-14 16:45:25,975 idom 666 from label 672
DEBUG 2022-02-14 16:45:25,975 find_def_from_bottom label 666
DEBUG 2022-02-14 16:45:25,976 find_def_from_top label 666
DEBUG 2022-02-14 16:45:25,976 idom 192 from label 666
DEBUG 2022-02-14 16:45:25,976 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,976 replaced with: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:45:25,976 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:25,976 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,976 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,976 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:25,976 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:25,976 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,976 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:25,976 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,976 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:25,977 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,977 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:25,977 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:25,977 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:25,977 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:25,977 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,977 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:25,977 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:25,977 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,977 find_def var='H_batch' stmt=$704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,977 find_def_from_top label 688
DEBUG 2022-02-14 16:45:25,977 idom 686 from label 688
DEBUG 2022-02-14 16:45:25,977 find_def_from_bottom label 686
DEBUG 2022-02-14 16:45:25,977 find_def_from_top label 686
DEBUG 2022-02-14 16:45:25,977 idom 672 from label 686
DEBUG 2022-02-14 16:45:25,978 find_def_from_bottom label 672
DEBUG 2022-02-14 16:45:25,978 find_def_from_top label 672
DEBUG 2022-02-14 16:45:25,978 idom 666 from label 672
DEBUG 2022-02-14 16:45:25,978 find_def_from_bottom label 666
DEBUG 2022-02-14 16:45:25,978 find_def_from_top label 666
DEBUG 2022-02-14 16:45:25,978 idom 192 from label 666
DEBUG 2022-02-14 16:45:25,978 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,978 replaced with: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,978 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:25,978 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,978 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:25,978 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:25,978 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,978 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,979 find_def var='H_batch' stmt=H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,979 find_def_from_top label 688
DEBUG 2022-02-14 16:45:25,979 idom 686 from label 688
DEBUG 2022-02-14 16:45:25,979 find_def_from_bottom label 686
DEBUG 2022-02-14 16:45:25,979 find_def_from_top label 686
DEBUG 2022-02-14 16:45:25,979 idom 672 from label 686
DEBUG 2022-02-14 16:45:25,979 find_def_from_bottom label 672
DEBUG 2022-02-14 16:45:25,979 find_def_from_top label 672
DEBUG 2022-02-14 16:45:25,979 idom 666 from label 672
DEBUG 2022-02-14 16:45:25,979 find_def_from_bottom label 666
DEBUG 2022-02-14 16:45:25,979 find_def_from_top label 666
DEBUG 2022-02-14 16:45:25,979 idom 192 from label 666
DEBUG 2022-02-14 16:45:25,979 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,979 replaced with: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:25,979 on stmt: jump 686
DEBUG 2022-02-14 16:45:25,979 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:25,980 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:25,980 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,980 find_def var='H_batch' stmt=$728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:25,980 find_def_from_top label 726
DEBUG 2022-02-14 16:45:25,980 idom 666 from label 726
DEBUG 2022-02-14 16:45:25,980 find_def_from_bottom label 666
DEBUG 2022-02-14 16:45:25,980 find_def_from_top label 666
DEBUG 2022-02-14 16:45:25,980 idom 192 from label 666
DEBUG 2022-02-14 16:45:25,980 find_def_from_bottom label 192
DEBUG 2022-02-14 16:45:25,980 replaced with: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:45:25,980 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:25,980 Fix SSA violator on var plus_minus
DEBUG 2022-02-14 16:45:25,980 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:25,980 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,980 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:25,981 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:25,981 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:25,981 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:25,981 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:25,981 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:25,981 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:25,981 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:25,981 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,981 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,981 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,981 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,981 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,981 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,981 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:25,982 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:25,982 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:25,982 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:25,982 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,982 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:25,982 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,982 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,982 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,982 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,983 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:25,983 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,983 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:25,983 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:25,983 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:25,983 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:25,983 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:25,983 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:25,983 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:25,983 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:25,983 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:25,983 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,983 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:25,983 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,984 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:25,984 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:25,984 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:25,984 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,984 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:25,984 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,984 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,984 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:25,984 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:25,984 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:25,984 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,984 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:25,984 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,984 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:25,985 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:25,985 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,985 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,985 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:25,985 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:25,985 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:25,985 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:25,985 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:25,985 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:25,985 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,985 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:25,985 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,985 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:25,986 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:25,986 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,986 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:25,986 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:25,986 on stmt: jump 192
DEBUG 2022-02-14 16:45:25,986 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:25,986 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,986 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:45:25,986 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:25,986 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,986 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:25,986 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:25,986 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:25,986 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:25,986 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,986 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:25,987 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,987 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:25,987 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:25,987 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:25,987 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:25,987 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:25,987 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:25,987 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:25,987 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:25,987 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,987 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:25,987 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,987 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:25,988 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,988 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:25,988 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,988 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:25,988 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:25,988 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:25,988 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,988 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:25,988 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:25,988 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,988 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:25,988 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,988 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:45:25,988 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:25,988 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,989 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:25,989 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:25,989 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:25,989 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:25,989 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,989 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:25,989 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,989 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,989 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:25,989 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,989 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,989 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:25,989 on stmt: jump 262
DEBUG 2022-02-14 16:45:25,989 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:25,989 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,990 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,990 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,990 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:25,990 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:25,990 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,990 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:25,990 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:25,990 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:25,990 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,990 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:25,990 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,990 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:25,990 on stmt: jump 318
DEBUG 2022-02-14 16:45:25,990 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:25,990 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,990 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:25,990 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:25,991 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,991 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:25,991 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,991 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,991 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,991 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,991 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:25,991 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:25,991 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:25,991 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:25,991 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:25,991 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,991 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:25,991 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,992 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:25,992 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:25,992 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,992 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,992 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:25,992 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:25,992 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,992 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:25,992 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,992 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:25,992 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:25,992 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,992 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,992 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:25,993 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:25,993 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,993 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:25,993 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,993 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:25,993 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:25,993 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:25,993 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:25,993 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,993 first assign: plus_minus
DEBUG 2022-02-14 16:45:25,993 replaced with: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:25,993 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,993 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,993 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,994 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:25,994 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,994 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:25,994 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:25,994 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,994 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:25,994 on stmt: jump 450
DEBUG 2022-02-14 16:45:25,994 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:25,994 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,994 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:25,994 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,994 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:25,994 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,994 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:25,995 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:25,995 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,995 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,995 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:25,995 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:25,995 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:25,995 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:25,995 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:25,995 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:25,995 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:25,995 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:25,995 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,995 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:25,996 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:25,996 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,996 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:25,996 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,996 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:25,996 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,996 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:25,996 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:25,996 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:25,996 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:25,996 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,996 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:25,996 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:25,996 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:25,996 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:25,996 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:25,996 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:25,997 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,997 replaced with: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:25,997 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:25,997 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:25,997 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:25,997 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:25,997 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:25,997 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,997 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:25,997 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,997 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:25,997 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:25,997 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:25,997 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:25,998 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:25,998 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:25,998 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:25,998 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:25,998 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:25,998 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,998 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,998 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,998 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:25,998 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:25,998 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,998 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:25,998 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,998 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:25,999 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,999 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:25,999 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,999 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,999 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:25,999 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:25,999 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:25,999 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:25,999 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:25,999 on stmt: jump 652
DEBUG 2022-02-14 16:45:25,999 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:25,999 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:25,999 on stmt: jump 520
DEBUG 2022-02-14 16:45:25,999 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:26,000 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,000 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,000 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:45:26,000 on stmt: jump 192
DEBUG 2022-02-14 16:45:26,000 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:26,000 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,000 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,000 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,000 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:26,000 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:26,000 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,000 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,000 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:45:26,000 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:26,000 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,001 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,001 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:26,001 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:26,001 on stmt: jump 686
DEBUG 2022-02-14 16:45:26,001 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:26,001 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,001 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:26,001 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:26,001 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:26,001 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:26,001 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:26,001 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:26,001 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,001 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:26,002 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:26,002 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,002 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:26,002 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:26,002 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:26,002 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:26,002 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,002 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:26,002 on stmt: jump 686
DEBUG 2022-02-14 16:45:26,002 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:26,002 Running <numba.core.ssa._FreshVarHandler object at 0x7f71baa6fc40>
DEBUG 2022-02-14 16:45:26,002 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:45:26,002 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:26,002 Replaced assignments: defaultdict(<class 'list'>,
            {376: [<numba.core.ir.Assign object at 0x7f71baac4820>],
             522: [<numba.core.ir.Assign object at 0x7f71baac4760>]})
DEBUG 2022-02-14 16:45:26,003 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,003 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,003 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:26,003 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:26,003 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:26,003 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:26,003 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:45:26,003 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:45:26,003 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:45:26,003 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,003 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,003 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,003 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,003 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,004 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,004 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,004 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:45:26,004 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,004 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,004 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,004 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,004 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,004 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,004 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,004 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,004 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:45:26,004 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,005 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:26,005 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:45:26,005 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,005 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:45:26,005 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:26,005 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,005 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:45:26,005 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:45:26,005 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:45:26,005 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:45:26,005 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:45:26,005 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:45:26,005 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:45:26,006 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:45:26,006 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:45:26,006 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,006 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:45:26,006 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,006 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:45:26,006 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:45:26,006 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:45:26,006 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,006 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:45:26,006 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,006 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,007 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:45:26,007 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:45:26,007 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:45:26,007 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,007 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:26,007 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,007 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:45:26,007 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:26,007 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,007 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,007 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:45:26,007 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:45:26,008 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:45:26,008 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:45:26,008 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:45:26,008 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:45:26,008 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,008 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:45:26,008 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,008 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:45:26,008 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:45:26,008 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,009 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:45:26,009 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:45:26,009 on stmt: jump 192
DEBUG 2022-02-14 16:45:26,009 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:45:26,009 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,009 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:45:26,009 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:45:26,009 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:26,009 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:45:26,009 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:45:26,009 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:45:26,009 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:45:26,010 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,010 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:45:26,010 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,010 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:26,010 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:26,010 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:45:26,010 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:45:26,010 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,010 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:26,010 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,010 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,010 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,011 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:26,011 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,011 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:26,011 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,011 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:26,011 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,011 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:26,011 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:26,011 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:26,011 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,012 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:26,012 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:45:26,012 on stmt: jump 262
DEBUG 2022-02-14 16:45:26,012 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:45:26,012 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,012 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:45:26,012 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:45:26,012 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:26,012 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:26,012 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:45:26,012 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:45:26,012 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:45:26,012 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,012 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:45:26,013 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,013 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,013 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:26,013 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,013 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,013 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:45:26,013 on stmt: jump 262
DEBUG 2022-02-14 16:45:26,013 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:45:26,013 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,013 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,013 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,014 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:45:26,014 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,014 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,014 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:45:26,014 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:45:26,014 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:26,014 on stmt: jump 318
DEBUG 2022-02-14 16:45:26,014 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:45:26,014 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,014 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:26,014 on stmt: jump 318
DEBUG 2022-02-14 16:45:26,014 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:45:26,014 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,014 on stmt: delta.2 = phi(incoming_values=[Var(delta.1, loop_hafnian_batch.py:116), Var(delta, loop_hafnian_batch.py:114)], incoming_blocks=[314, 300])
DEBUG 2022-02-14 16:45:26,015 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:26,015 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,015 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:26,015 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,015 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,015 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,015 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,015 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:45:26,015 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:45:26,015 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:45:26,015 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:45:26,016 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:26,016 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,016 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:26,016 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,016 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:26,016 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:26,016 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,016 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,016 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:45:26,016 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:45:26,016 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,016 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,016 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,017 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,017 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:26,017 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,017 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,017 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:45:26,017 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:45:26,017 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,017 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:26,017 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,017 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:26,017 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:26,017 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:45:26,018 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:45:26,018 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:26,018 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:26,018 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,018 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,018 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:26,018 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,018 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:26,018 find_def var='plus_minus' stmt=$438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:26,018 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:26,019 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,019 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:26,019 on stmt: jump 450
DEBUG 2022-02-14 16:45:26,019 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:45:26,019 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,019 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:26,019 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,019 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:26,019 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,019 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,019 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:26,019 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:26,019 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,019 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:26,019 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,020 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:26,020 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:26,020 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:45:26,020 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:45:26,020 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:26,020 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:26,020 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,020 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:26,020 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:45:26,020 on stmt: jump 520
DEBUG 2022-02-14 16:45:26,020 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:45:26,020 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,020 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:45:26,020 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:26,020 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:26,020 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:45:26,020 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:45:26,020 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:26,020 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,020 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:45:26,020 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:26,020 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:26,021 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:26,021 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:26,021 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:45:26,021 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:26,021 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,021 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:45:26,021 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:26,021 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:26,021 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:26,021 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,021 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:26,021 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,021 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:26,021 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:26,021 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:26,021 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:26,021 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:26,021 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,021 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,022 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:45:26,022 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:45:26,022 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,022 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,022 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:26,022 find_def var='plus_minus' stmt=$602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:26,022 find_def_from_top label 590
DEBUG 2022-02-14 16:45:26,022 idom 522 from label 590
DEBUG 2022-02-14 16:45:26,022 find_def_from_bottom label 522
DEBUG 2022-02-14 16:45:26,022 replaced with: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:26,022 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:26,022 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:26,022 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,022 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:26,022 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,022 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:45:26,022 on stmt: jump 652
DEBUG 2022-02-14 16:45:26,022 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:45:26,022 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,022 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,022 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:26,023 find_def var='plus_minus' stmt=$636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:26,023 find_def_from_top label 624
DEBUG 2022-02-14 16:45:26,023 idom 522 from label 624
DEBUG 2022-02-14 16:45:26,023 find_def_from_bottom label 522
DEBUG 2022-02-14 16:45:26,023 replaced with: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:26,023 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,023 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:26,023 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,023 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:45:26,023 on stmt: jump 652
DEBUG 2022-02-14 16:45:26,023 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:45:26,023 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,023 on stmt: jump 520
DEBUG 2022-02-14 16:45:26,023 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:45:26,023 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,023 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,023 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:45:26,023 on stmt: jump 192
DEBUG 2022-02-14 16:45:26,023 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:45:26,023 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,024 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,024 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,024 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:45:26,024 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:45:26,024 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,024 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,024 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:45:26,024 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:45:26,024 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,024 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,024 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:45:26,024 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:45:26,025 on stmt: jump 686
DEBUG 2022-02-14 16:45:26,025 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:45:26,025 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,025 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:45:26,025 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:26,025 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:45:26,025 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:45:26,025 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:45:26,025 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:45:26,025 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,025 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:45:26,025 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:26,025 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,025 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:45:26,025 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:45:26,025 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:45:26,025 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:45:26,026 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,026 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:45:26,026 on stmt: jump 686
DEBUG 2022-02-14 16:45:26,026 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:45:26,026 Running <numba.core.ssa._FixSSAVars object at 0x7f71bab09490>
DEBUG 2022-02-14 16:45:26,026 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:45:26,026 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:45:26,047 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,048 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,048 stack: []
DEBUG 2022-02-14 16:45:26,048 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,048 stack []
DEBUG 2022-02-14 16:45:26,048 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,048 stack []
DEBUG 2022-02-14 16:45:26,048 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,048 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,048 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:26,048 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:26,048 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,048 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:26,048 end state. edges=[]
DEBUG 2022-02-14 16:45:26,048 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,048 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,048 defmap: {}
DEBUG 2022-02-14 16:45:26,048 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,048 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,048 keep phismap: {}
DEBUG 2022-02-14 16:45:26,048 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,049 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,049 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,049 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:26,050 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,051 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9ef370>
DEBUG 2022-02-14 16:45:26,051 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:26,051 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:26,051 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,051 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:26,051 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:26,051 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba9f4280>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71ba9f4580>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71ba9f46a0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba9e69a0>]})
DEBUG 2022-02-14 16:45:26,051 SSA violators set()
DEBUG 2022-02-14 16:45:26,062 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:26,062 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,062 stack: []
DEBUG 2022-02-14 16:45:26,063 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack []
DEBUG 2022-02-14 16:45:26,063 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack []
DEBUG 2022-02-14 16:45:26,063 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack ['$arrtype2.0']
DEBUG 2022-02-14 16:45:26,063 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:26,063 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-14 16:45:26,063 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-14 16:45:26,063 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:26,063 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:26,063 end state. edges=[]
DEBUG 2022-02-14 16:45:26,063 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,063 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,063 defmap: {}
DEBUG 2022-02-14 16:45:26,063 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,064 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,064 keep phismap: {}
DEBUG 2022-02-14 16:45:26,064 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,064 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,064 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,064 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:45:26,067 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,067 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bbc40>
DEBUG 2022-02-14 16:45:26,067 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-14 16:45:26,067 on stmt: size = arg(1, name=size)
DEBUG 2022-02-14 16:45:26,067 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:45:26,067 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-14 16:45:26,067 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,067 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:45:26,067 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:45:26,068 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f71ba9bb6d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f71ba9bb7c0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71ba9bb280>],
             'align': [<numba.core.ir.Assign object at 0x7f71ba9b7fa0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f71ba9b7610>],
             'size': [<numba.core.ir.Assign object at 0x7f71ba9b75b0>]})
DEBUG 2022-02-14 16:45:26,068 SSA violators set()
DEBUG 2022-02-14 16:45:26,070 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:45:26,070 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,070 stack: []
DEBUG 2022-02-14 16:45:26,070 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-02-14 16:45:26,070 stack []
DEBUG 2022-02-14 16:45:26,070 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-02-14 16:45:26,070 stack []
DEBUG 2022-02-14 16:45:26,070 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-02-14 16:45:26,070 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,070 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-02-14 16:45:26,071 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-02-14 16:45:26,071 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-02-14 16:45:26,071 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-02-14 16:45:26,071 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:45:26,071 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:26,071 end state. edges=[]
DEBUG 2022-02-14 16:45:26,071 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,071 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,071 defmap: {}
DEBUG 2022-02-14 16:45:26,071 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,071 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,071 keep phismap: {}
DEBUG 2022-02-14 16:45:26,071 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,071 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,071 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,072 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:26,073 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,073 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9ace20>
DEBUG 2022-02-14 16:45:26,074 on stmt: cls = arg(0, name=cls)
DEBUG 2022-02-14 16:45:26,074 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-02-14 16:45:26,074 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:45:26,074 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-02-14 16:45:26,074 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,074 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:26,074 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:26,074 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba9380d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba934b50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba934f70>],
             'align': [<numba.core.ir.Assign object at 0x7f71ba9349d0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f71ba934790>],
             'cls': [<numba.core.ir.Assign object at 0x7f71ba934670>]})
DEBUG 2022-02-14 16:45:26,074 SSA violators set()
DEBUG 2022-02-14 16:45:26,146 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,146 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,146 stack: []
DEBUG 2022-02-14 16:45:26,146 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,146 stack []
DEBUG 2022-02-14 16:45:26,146 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,146 stack []
DEBUG 2022-02-14 16:45:26,147 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,147 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,147 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:26,147 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:26,147 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,147 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:26,147 end state. edges=[]
DEBUG 2022-02-14 16:45:26,147 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,147 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,147 defmap: {}
DEBUG 2022-02-14 16:45:26,147 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,147 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,147 keep phismap: {}
DEBUG 2022-02-14 16:45:26,147 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,147 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,147 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,148 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:26,149 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,149 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba8bdd60>
DEBUG 2022-02-14 16:45:26,150 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:26,150 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:26,150 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,150 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:26,150 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:26,150 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba8c5310>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71ba8c5a60>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71ba8c5b80>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba8c5190>]})
DEBUG 2022-02-14 16:45:26,150 SSA violators set()
DEBUG 2022-02-14 16:45:26,246 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,246 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,246 stack: []
DEBUG 2022-02-14 16:45:26,246 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,246 stack []
DEBUG 2022-02-14 16:45:26,246 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,246 stack []
DEBUG 2022-02-14 16:45:26,246 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,246 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,246 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:26,246 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:26,246 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:26,246 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:26,247 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,247 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:26,247 end state. edges=[]
DEBUG 2022-02-14 16:45:26,247 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,247 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,247 defmap: {}
DEBUG 2022-02-14 16:45:26,247 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,247 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,247 keep phismap: {}
DEBUG 2022-02-14 16:45:26,247 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,247 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,247 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,248 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:26,249 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,249 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba8fa640>
DEBUG 2022-02-14 16:45:26,249 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:26,249 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:26,249 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:26,250 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,250 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:26,250 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:26,250 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba8e1370>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba8e1f70>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba8e1490>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71ba88edf0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba88ee80>]})
DEBUG 2022-02-14 16:45:26,250 SSA violators set()
DEBUG 2022-02-14 16:45:26,327 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:26,327 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,327 stack: []
DEBUG 2022-02-14 16:45:26,327 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:26,327 stack []
DEBUG 2022-02-14 16:45:26,327 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:26,327 stack []
DEBUG 2022-02-14 16:45:26,327 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:26,327 stack ['$E2.0']
DEBUG 2022-02-14 16:45:26,327 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:26,327 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:26,327 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-14 16:45:26,327 stack ['$6call_method.2']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-14 16:45:26,328 stack []
DEBUG 2022-02-14 16:45:26,328 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-14 16:45:26,328 stack ['$const10.3']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack []
DEBUG 2022-02-14 16:45:26,328 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$14load_global.4']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-14 16:45:26,328 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-14 16:45:26,328 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:26,329 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-14 16:45:26,329 stack ['$34call_function_kw.14']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-14 16:45:26,329 stack []
DEBUG 2022-02-14 16:45:26,329 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-14 16:45:26,329 stack ['$const38.15']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-14 16:45:26,329 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-14 16:45:26,329 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack []
DEBUG 2022-02-14 16:45:26,329 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$46load_global.18']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-14 16:45:26,329 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-14 16:45:26,329 stack ['$56call_function.23']
DEBUG 2022-02-14 16:45:26,330 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,330 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,330 stack: ['$phi60.0']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-14 16:45:26,330 stack ['$phi60.0']
DEBUG 2022-02-14 16:45:26,330 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,330 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,330 stack: []
DEBUG 2022-02-14 16:45:26,330 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack []
DEBUG 2022-02-14 16:45:26,330 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-14 16:45:26,330 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:26,330 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:26,331 stack ['$314binary_subscr.7']
DEBUG 2022-02-14 16:45:26,331 end state. edges=[]
DEBUG 2022-02-14 16:45:26,331 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,331 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-14 16:45:26,331 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,331 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,331 stack: ['$phi72.0']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi72.0']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-14 16:45:26,331 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-14 16:45:26,331 stack ['$phi72.0']
DEBUG 2022-02-14 16:45:26,331 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,332 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,332 stack: ['$phi78.0']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-14 16:45:26,332 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,332 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,332 stack: ['$phi140.0']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:45:26,332 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-14 16:45:26,332 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:45:26,333 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-14 16:45:26,333 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-14 16:45:26,334 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-14 16:45:26,334 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-14 16:45:26,335 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,335 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,335 stack: ['$phi90.0']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:26,335 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-14 16:45:26,335 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:26,336 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,336 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,336 stack: ['$phi124.0']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi124.0']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:45:26,336 stack ['$phi124.0']
DEBUG 2022-02-14 16:45:26,336 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-14 16:45:26,337 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,337 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,337 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:45:26,337 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,337 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,337 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,337 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,337 stack: ['$phi300.0']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi300.0']
DEBUG 2022-02-14 16:45:26,337 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,337 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,337 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:45:26,337 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:45:26,337 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-14 16:45:26,338 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-14 16:45:26,338 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-14 16:45:26,339 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,339 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,339 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,339 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:45:26,339 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,339 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-14 16:45:26,339 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:45:26,339 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,339 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,339 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:45:26,339 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:45:26,339 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-14 16:45:26,340 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-14 16:45:26,340 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:45:26,341 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-14 16:45:26,341 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:45:26,341 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,341 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,342 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:26,342 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,342 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,342 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:45:26,342 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:26,343 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-14 16:45:26,344 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,345 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,346 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,347 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:26,347 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-14 16:45:26,347 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,347 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-14 16:45:26,347 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-14 16:45:26,348 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,352 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-14 16:45:26,363 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,363 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,363 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,363 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,363 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,363 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,363 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,363 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,363 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,363 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,363 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,363 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,363 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,363 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,363 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,363 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,363 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,363 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,363 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,363 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,364 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,364 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,364 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,364 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,364 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,364 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,364 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,364 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:45:26,364 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,364 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,364 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,364 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,364 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:45:26,364 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,364 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,364 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,364 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,365 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,365 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,365 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,365 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:45:26,365 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,365 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,365 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,365 ==== SSA block analysis pass on 78
DEBUG 2022-02-14 16:45:26,365 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,365 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,365 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,365 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,365 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,365 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,365 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,365 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,365 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:45:26,365 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,365 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:26,365 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,365 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,365 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,365 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,365 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,365 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,365 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,366 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,366 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,366 ==== SSA block analysis pass on 124
DEBUG 2022-02-14 16:45:26,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,366 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,366 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,366 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,366 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,366 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:45:26,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,366 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,366 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,366 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,366 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,366 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,366 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,366 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,366 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,366 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,366 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,366 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,366 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,366 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,366 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,366 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,366 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,367 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,367 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,367 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,367 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,367 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,367 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,367 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,367 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,367 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,367 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,367 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,367 ==== SSA block analysis pass on 202
DEBUG 2022-02-14 16:45:26,367 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,367 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,367 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,367 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,367 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,367 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,367 ==== SSA block analysis pass on 204
DEBUG 2022-02-14 16:45:26,367 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,367 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,367 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,367 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,367 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,367 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,367 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,367 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,368 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,368 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,368 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,368 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,368 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,368 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,368 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,368 ==== SSA block analysis pass on 240
DEBUG 2022-02-14 16:45:26,368 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,368 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,368 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,368 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,368 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,368 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,368 ==== SSA block analysis pass on 242
DEBUG 2022-02-14 16:45:26,368 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,368 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,368 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,368 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,368 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,368 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,368 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,368 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,368 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,369 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,369 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,369 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,369 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,369 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,369 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,369 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,369 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,369 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,369 ==== SSA block analysis pass on 298
DEBUG 2022-02-14 16:45:26,369 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,369 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,369 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:45:26,369 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,369 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,369 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:45:26,369 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7cf970>
DEBUG 2022-02-14 16:45:26,369 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,369 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,369 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,369 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,369 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,369 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,369 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,369 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,371 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x7f71ba801f40>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f71ba803280>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x7f71ba803880>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x7f71ba805040>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x7f71ba8056a0>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7f71ba7f96d0>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x7f71ba805ca0>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x7f71ba773130>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x7f71ba773250>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x7f71ba773400>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x7f71ba773580>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7f71ba7f9850>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x7f71ba773c10>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x7f71ba773d30>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x7f71ba773ee0>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x7f71ba776130>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x7f71ba7766a0>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x7f71ba7769a0>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x7f71ba776b50>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x7f71ba776c70>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba776cd0>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba776e20>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x7f71ba776f40>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x7f71ba778760>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x7f71ba7788e0>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x7f71ba778af0>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x7f71ba778ee0>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x7f71ba77a220>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x7f71ba77a640>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x7f71ba77a7f0>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x7f71ba77a910>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba77aa60>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x7f71ba77ab80>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x7f71ba77aca0>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x7f71ba7f9e20>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x7f71ba77c640>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x7f71ba77c7c0>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71ba77cb20>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x7f71ba77e0a0>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x7f71ba7f9fa0>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x7f71ba77e580>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x7f71ba77e700>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x7f71ba77ea00>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x7f71ba77eb80>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x7f71ba77ed00>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x7f71ba77efa0>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x7f71ba7f6130>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x7f71ba780160>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x7f71ba7f62b0>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x7f71ba780910>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x7f71ba780a30>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x7f71ba780be0>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71ba780d60>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x7f71ba780eb0>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x7f71ba7f6fd0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71ba7ddfd0>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x7f71ba7fe5e0>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x7f71ba7fe790>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x7f71ba7fe8b0>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7f71ba7fe9a0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba7feac0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba7febe0>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x7f71ba7ff340>],
             '$70pred': [<numba.core.ir.Assign object at 0x7f71ba7ff5b0>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x7f71ba7ffe20>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x7f71ba801160>],
             '$88pred': [<numba.core.ir.Assign object at 0x7f71ba8013d0>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x7f71ba801730>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x7f71ba801940>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x7f71ba801b80>],
             '$const106.9': [<numba.core.ir.Assign object at 0x7f71ba8030d0>],
             '$const144.2': [<numba.core.ir.Assign object at 0x7f71ba8053d0>],
             '$const154.6': [<numba.core.ir.Assign object at 0x7f71ba8059d0>],
             '$const160.9': [<numba.core.ir.Assign object at 0x7f71ba805df0>],
             '$const162.10': [<numba.core.ir.Assign object at 0x7f71ba805f70>],
             '$const174.17': [<numba.core.ir.Assign object at 0x7f71ba773910>],
             '$const176.18': [<numba.core.ir.Assign object at 0x7f71ba773a90>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7f71ba7f99d0>],
             '$const186.23': [<numba.core.ir.Assign object at 0x7f71ba7762b0>],
             '$const194.27': [<numba.core.ir.Assign object at 0x7f71ba7767f0>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7f71ba7f9c70>],
             '$const226.12': [<numba.core.ir.Assign object at 0x7f71ba77a070>],
             '$const232.15': [<numba.core.ir.Assign object at 0x7f71ba77a490>],
             '$const250.7': [<numba.core.ir.Assign object at 0x7f71ba77c490>],
             '$const262.14': [<numba.core.ir.Assign object at 0x7f71ba77cd90>],
             '$const278.22': [<numba.core.ir.Assign object at 0x7f71ba77e850>],
             '$const306.2': [<numba.core.ir.Assign object at 0x7f71ba780610>],
             '$const308.3': [<numba.core.ir.Assign object at 0x7f71ba780790>],
             '$const38.15': [<numba.core.ir.Assign object at 0x7f71ba7f68b0>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7f71ba7f6d90>],
             '$const48.19': [<numba.core.ir.Assign object at 0x7f71ba7fe190>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7f71ba7fe430>],
             '$const66.3': [<numba.core.ir.Assign object at 0x7f71ba7ff190>],
             '$const80.2': [<numba.core.ir.Assign object at 0x7f71ba7ffc70>],
             '$const84.4': [<numba.core.ir.Assign object at 0x7f71ba7fff70>],
             '$const_0': [<numba.core.ir.Assign object at 0x7f71ba7f6b80>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7f71ba7f6ca0>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x7f71ba8052e0>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x7f71ba7763d0>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x7f71ba778400>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x7f71ba77a970>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7f71ba7f9340>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7f71ba7fe2b0>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f71ba7dd400>],
             'D_S': [<numba.core.ir.Assign object at 0x7f71ba7dd9d0>,
                     <numba.core.ir.Assign object at 0x7f71ba805100>],
             'E': [<numba.core.ir.Assign object at 0x7f71ba7dd790>],
             'E_k': [<numba.core.ir.Assign object at 0x7f71ba7f9220>,
                     <numba.core.ir.Assign object at 0x7f71ba803940>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f71ba7dd850>],
             'bool70': [<numba.core.ir.Assign object at 0x7f71ba7ff490>],
             'bool88': [<numba.core.ir.Assign object at 0x7f71ba8012b0>],
             'comb': [<numba.core.ir.Assign object at 0x7f71ba7f6730>],
             'count': [<numba.core.ir.Assign object at 0x7f71ba7f9430>,
                       <numba.core.ir.Assign object at 0x7f71ba805760>],
             'factor': [<numba.core.ir.Assign object at 0x7f71ba7ff8b0>,
                        <numba.core.ir.Assign object at 0x7f71ba803400>,
                        <numba.core.ir.Assign object at 0x7f71ba803b80>],
             'i': [<numba.core.ir.Assign object at 0x7f71ba7feeb0>],
             'j': [<numba.core.ir.Assign object at 0x7f71ba778250>],
             'k': [<numba.core.ir.Assign object at 0x7f71ba77af70>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba7ddac0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f71ba7ddd30>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71ba7ddc10>],
             'powfactor': [<numba.core.ir.Assign object at 0x7f71ba8014f0>,
                           <numba.core.ir.Assign object at 0x7f71ba7789a0>]})
DEBUG 2022-02-14 16:45:26,371 SSA violators {'E_k', 'count', 'factor', 'powfactor', 'D_S'}
DEBUG 2022-02-14 16:45:26,371 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:45:26,371 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,371 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,371 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,371 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,371 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,371 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,371 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,371 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,371 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,371 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,371 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,371 first assign: E_k
DEBUG 2022-02-14 16:45:26,371 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,371 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,371 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,371 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,371 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,371 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,371 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,371 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,371 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,372 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,372 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,372 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,372 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,372 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,372 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,372 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,372 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,372 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,372 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,372 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,372 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,372 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,372 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,372 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,372 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,372 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,372 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,372 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,372 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,372 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,373 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,373 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,373 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,373 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,373 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,373 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,373 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,373 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,373 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,373 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,373 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,373 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,373 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,373 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,373 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,373 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,373 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,373 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,373 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,373 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:26,373 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,373 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,373 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,373 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,373 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,373 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,373 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,374 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,374 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,374 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,374 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,374 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,374 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,374 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,374 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,374 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,374 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,374 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,374 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,374 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,374 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,374 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,374 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,374 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,374 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,374 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,374 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,374 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,374 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,374 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,374 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,374 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,375 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,375 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,375 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,375 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,375 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,375 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,375 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,375 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,375 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,375 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,375 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,375 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,375 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,375 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,375 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,375 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,375 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,375 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,375 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,375 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,375 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,375 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,375 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,375 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,375 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,375 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,375 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,376 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,376 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,376 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,376 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,376 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,376 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,376 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,376 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,376 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,376 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,376 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,376 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,376 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,376 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,376 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,376 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,376 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,376 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,376 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,376 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,376 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,376 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,376 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,376 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,376 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,376 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,377 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,377 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,377 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,377 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,377 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,377 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,377 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,377 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,377 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,377 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,377 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,377 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,377 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,377 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,377 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,377 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,377 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,377 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,377 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,377 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,377 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,377 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,377 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,377 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,377 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,378 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba7dd520>],
             90: [<numba.core.ir.Assign object at 0x7f71ba7cf8e0>]})
DEBUG 2022-02-14 16:45:26,378 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,378 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,378 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,378 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,378 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,378 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,378 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,378 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,378 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,378 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,378 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,378 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,378 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,378 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,378 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,378 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,378 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,378 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,378 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,378 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,378 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,378 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,378 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,379 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,379 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,379 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,379 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,379 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,379 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,379 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,379 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,379 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,379 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,379 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,379 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,379 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,379 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,379 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,379 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,379 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,379 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,379 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,379 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,379 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,379 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,379 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,379 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,379 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,380 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,380 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,380 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,380 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,380 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,380 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,380 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,380 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,380 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,380 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,380 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,380 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,380 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,380 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,380 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,380 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,380 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:26,380 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:26,380 find_def_from_top label 90
DEBUG 2022-02-14 16:45:26,380 idom 78 from label 90
DEBUG 2022-02-14 16:45:26,380 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,380 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,380 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,380 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,380 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,380 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,380 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 60
DEBUG 2022-02-14 16:45:26,381 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:26,381 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 300
DEBUG 2022-02-14 16:45:26,381 idom 202 from label 300
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,381 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 140
DEBUG 2022-02-14 16:45:26,381 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 72
DEBUG 2022-02-14 16:45:26,381 idom 62 from label 72
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,381 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,381 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:26,381 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 124
DEBUG 2022-02-14 16:45:26,381 idom 78 from label 124
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,381 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,381 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,381 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,382 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,382 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,382 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,382 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:26,382 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,382 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,382 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,382 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,382 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,382 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,382 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,382 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,382 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,382 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,382 find_def_from_top label 90
DEBUG 2022-02-14 16:45:26,382 idom 78 from label 90
DEBUG 2022-02-14 16:45:26,382 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,382 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,382 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,382 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,382 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,382 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,382 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,382 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,383 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,383 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,383 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,383 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,383 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,383 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,383 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,383 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,383 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,383 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,383 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,383 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,383 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,383 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,383 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,383 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,383 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,383 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,383 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,383 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,383 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,383 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,383 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,383 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,384 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,384 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,384 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,384 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,384 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,384 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,384 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,384 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,384 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,384 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,384 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,384 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,384 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,384 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,384 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,384 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,384 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,384 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,384 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,384 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,384 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,384 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,384 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,385 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,385 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,385 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,385 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,385 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,385 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,385 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,385 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,385 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,385 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,385 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,385 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,385 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,385 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,385 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,385 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,385 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,385 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,385 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,385 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,385 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,385 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,385 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,385 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,386 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,386 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,386 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,386 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,386 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,386 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,386 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,386 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,386 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,386 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,386 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,386 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,386 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,386 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,386 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,386 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,386 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,386 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,386 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,386 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,386 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,386 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,387 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,387 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,387 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,387 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,387 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,387 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,387 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,387 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,387 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,387 Fix SSA violator on var count
DEBUG 2022-02-14 16:45:26,387 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,387 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,387 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,387 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,387 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,387 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,387 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,387 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,387 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,387 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,387 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,387 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,387 first assign: count
DEBUG 2022-02-14 16:45:26,387 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,387 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,388 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,388 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,388 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,388 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,388 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,388 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,388 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,388 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,388 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,388 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,388 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,388 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,388 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,388 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,388 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,388 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,388 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,389 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,389 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,389 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,389 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,389 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,389 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,389 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,389 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,389 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,389 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,389 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,389 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,389 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,389 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,389 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,389 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,389 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,389 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,389 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,389 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,389 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,389 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,389 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,389 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,389 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,389 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,389 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,390 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,390 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,390 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,390 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,390 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,390 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,390 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,390 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,390 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,390 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,390 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,390 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,390 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,390 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,390 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,390 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,390 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,390 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,390 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,390 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,390 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,390 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,390 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,390 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,390 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,390 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,391 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,391 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,391 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,391 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,391 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,391 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,391 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,391 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,391 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,391 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,391 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,391 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,391 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,391 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,391 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,391 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,391 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,391 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,392 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,392 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,392 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,392 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,392 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,392 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,392 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,392 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,392 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,392 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,392 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,392 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,392 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,392 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,392 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,392 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,392 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,392 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,392 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,392 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,392 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,392 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,392 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,392 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,392 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,392 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,393 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,393 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,393 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,393 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,393 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,393 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,393 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,393 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,393 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,393 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,393 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,393 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,393 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,393 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,393 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,393 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,393 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,393 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,393 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,393 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,393 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,393 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,393 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,393 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,393 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,393 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,394 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,394 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,394 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,394 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,394 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,394 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,394 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,394 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,394 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,394 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,394 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,394 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba7cfa30>],
             140: [<numba.core.ir.Assign object at 0x7f71ba7cfe80>]})
DEBUG 2022-02-14 16:45:26,394 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,394 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,394 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,394 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,394 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,394 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,394 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,394 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,394 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,394 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,394 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,394 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,394 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,395 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,395 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,395 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,395 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,395 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,395 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,395 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,395 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,395 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,395 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,395 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,395 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,395 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,395 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,395 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,395 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,395 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,396 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,396 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,396 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,396 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,396 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,396 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,396 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,396 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,396 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,396 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,396 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,396 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,396 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,396 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,396 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,396 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,396 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,396 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,396 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,396 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,396 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,396 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,396 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,396 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,396 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,397 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,397 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,397 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,397 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,397 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,397 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,397 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,397 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,397 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,397 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,397 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,397 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,397 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,397 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,397 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,397 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,397 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,397 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,398 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,398 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,398 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,398 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,398 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,398 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,398 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,398 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:26,398 find_def_from_top label 140
DEBUG 2022-02-14 16:45:26,398 idom 62 from label 140
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,398 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,398 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,398 find_def_from_top label 60
DEBUG 2022-02-14 16:45:26,398 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:26,398 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:26,398 find_def_from_top label 300
DEBUG 2022-02-14 16:45:26,398 idom 202 from label 300
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,398 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,398 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,398 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,398 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,398 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,399 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,399 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,399 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,399 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:26,399 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,399 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,399 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,399 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,399 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,399 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,399 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,399 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,399 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,399 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,399 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,399 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,399 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,400 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,400 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,400 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,400 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,400 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,400 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,400 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,400 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,400 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,400 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,400 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,400 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,400 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,400 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,400 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,400 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,400 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,400 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,400 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,400 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,400 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,400 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,400 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,400 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,400 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,400 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,401 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,401 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,401 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,401 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,401 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,401 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,401 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,401 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,401 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,401 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,401 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,401 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,401 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,401 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,401 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,401 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,401 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,401 find_def_from_top label 242
DEBUG 2022-02-14 16:45:26,401 idom 240 from label 242
DEBUG 2022-02-14 16:45:26,401 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:26,401 find_def_from_top label 240
DEBUG 2022-02-14 16:45:26,401 idom 204 from label 240
DEBUG 2022-02-14 16:45:26,401 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:26,401 find_def_from_top label 204
DEBUG 2022-02-14 16:45:26,401 idom 202 from label 204
DEBUG 2022-02-14 16:45:26,401 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,401 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,402 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,402 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,402 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,402 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,402 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,402 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,402 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:26,402 find_def_from_top label 242
DEBUG 2022-02-14 16:45:26,402 idom 240 from label 242
DEBUG 2022-02-14 16:45:26,402 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:26,402 find_def_from_top label 240
DEBUG 2022-02-14 16:45:26,402 idom 204 from label 240
DEBUG 2022-02-14 16:45:26,402 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:26,402 find_def_from_top label 204
DEBUG 2022-02-14 16:45:26,402 idom 202 from label 204
DEBUG 2022-02-14 16:45:26,402 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,402 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,402 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,402 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,402 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,402 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,402 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,402 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,402 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,402 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,402 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,402 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,403 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,403 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,403 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,403 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,403 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,403 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,403 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,403 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,403 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,403 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,403 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,403 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,403 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,403 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,403 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,403 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,403 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,403 find_def_from_top label 302
DEBUG 2022-02-14 16:45:26,403 idom 60 from label 302
DEBUG 2022-02-14 16:45:26,403 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,403 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,403 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,403 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,403 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,403 Fix SSA violator on var factor
DEBUG 2022-02-14 16:45:26,404 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,404 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,404 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,404 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,404 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,404 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,404 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,404 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,404 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,404 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,404 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,404 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,404 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,404 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,404 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,404 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,404 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,404 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,404 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,404 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,404 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,404 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,405 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,405 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,405 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,405 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,405 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,405 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,405 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,405 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,405 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,405 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,405 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,405 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,405 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,405 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,405 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,405 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,405 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,405 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,405 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,405 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,405 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,405 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,405 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,405 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,405 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,406 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,406 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,406 first assign: factor
DEBUG 2022-02-14 16:45:26,406 replaced with: factor = oddloop
DEBUG 2022-02-14 16:45:26,406 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,406 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,406 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,406 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,406 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,406 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,406 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,406 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,406 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,406 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,406 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,406 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,406 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,406 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,406 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,406 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,406 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,406 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,406 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,406 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,406 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,406 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,407 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,407 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,407 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,407 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,407 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,407 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,407 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,407 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,407 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,407 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,407 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,407 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,407 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,407 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,407 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,407 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,408 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,408 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,408 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,408 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,408 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,408 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,408 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,408 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,409 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,409 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,409 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,409 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,409 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,409 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,409 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,409 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,409 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,409 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,409 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,409 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,409 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,409 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,410 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,410 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,410 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,410 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,410 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,410 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,410 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,410 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,410 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,410 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,410 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,410 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,410 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,410 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,411 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,411 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,411 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,411 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,411 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,411 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,411 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,411 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,411 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,411 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,411 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,411 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,411 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,411 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,411 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,411 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,412 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,412 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,412 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,412 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,412 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,412 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,412 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,412 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,412 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,412 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,412 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,412 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,412 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,412 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,412 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,413 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,413 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,413 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,413 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,413 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,413 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,413 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba792bb0>
DEBUG 2022-02-14 16:45:26,413 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,413 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,413 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,413 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,413 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,413 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,413 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,413 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,414 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f71ba7dd460>],
             90: [<numba.core.ir.Assign object at 0x7f71ba7cfdf0>],
             124: [<numba.core.ir.Assign object at 0x7f71ba7cfa90>]})
DEBUG 2022-02-14 16:45:26,414 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,414 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,414 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,414 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,414 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,414 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,414 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,414 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,414 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,414 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,414 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,414 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,414 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,415 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,415 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,415 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,415 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,415 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,415 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,415 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,415 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,415 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,416 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,416 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,416 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,416 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,416 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,416 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,416 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,416 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,416 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,416 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,416 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,416 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,416 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,416 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,416 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,417 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,417 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,417 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,417 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,417 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,417 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,417 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,417 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,417 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,417 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,417 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,417 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,417 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,417 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,417 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,417 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,417 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,417 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,417 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,417 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,418 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,418 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,418 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,418 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,418 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,418 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,418 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,418 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,418 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,418 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,418 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,418 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,418 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,418 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,418 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,418 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,418 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,418 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,418 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,418 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,418 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,418 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,419 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,419 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,419 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,419 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,419 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,419 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,419 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,419 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,419 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,419 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,419 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,419 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,419 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,419 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,419 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,419 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,419 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,419 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,420 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,420 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,420 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,420 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,420 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,420 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,420 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,420 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,420 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,420 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,420 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,420 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,420 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,420 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,420 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,420 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,420 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:26,420 find_def_from_top label 204
DEBUG 2022-02-14 16:45:26,420 idom 202 from label 204
DEBUG 2022-02-14 16:45:26,420 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,420 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,420 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,420 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,420 find_def_from_top label 140
DEBUG 2022-02-14 16:45:26,420 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:26,421 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:26,421 incoming_def factor = oddloop
DEBUG 2022-02-14 16:45:26,421 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:26,421 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,421 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:26,421 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,421 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:26,421 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,421 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,421 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,421 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,421 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,421 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,421 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,421 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,421 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,421 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,421 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,421 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,421 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,421 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,422 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,422 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,422 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,422 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,422 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,422 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,422 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,422 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,422 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,422 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,422 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,422 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,422 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,422 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,422 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,422 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,422 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,422 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,422 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,422 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,422 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,422 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,422 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,423 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,423 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,423 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,423 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,423 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,423 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,423 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,423 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,423 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792f70>
DEBUG 2022-02-14 16:45:26,423 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,423 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,423 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,423 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,423 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,423 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,423 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,423 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,423 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:45:26,423 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,423 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,423 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,423 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,423 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,423 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,423 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,423 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,423 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,424 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,424 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,424 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,424 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,424 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,424 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,424 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,424 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,424 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,424 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,424 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,424 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,424 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,424 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,424 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,425 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,425 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,425 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,425 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,425 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,425 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,425 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,425 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,425 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,425 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,425 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,425 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,425 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,425 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,425 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,425 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,425 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,425 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,425 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,425 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,425 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,425 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,426 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,426 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,426 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,426 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,426 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,426 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,426 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,426 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,426 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,426 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,426 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,426 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,426 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,426 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,426 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,426 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,426 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,426 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,426 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,426 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,426 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,426 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,426 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,426 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,427 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,427 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,427 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,427 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,427 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,427 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,427 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,427 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,427 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,427 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,427 first assign: powfactor
DEBUG 2022-02-14 16:45:26,427 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,427 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,427 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,427 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,427 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,427 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,427 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,427 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,427 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,427 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,427 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,427 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,427 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,427 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,428 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,428 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,428 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,428 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,428 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,428 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,428 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,428 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,428 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,428 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,428 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,428 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,428 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,428 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,428 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,428 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,428 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,428 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,428 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,428 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,428 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,428 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,428 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,428 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:26,428 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,429 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,429 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,429 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,429 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,429 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,429 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,429 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,429 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,429 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,429 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,429 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,429 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,429 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,429 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,429 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,429 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,429 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,429 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,429 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,429 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,429 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,429 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,429 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,429 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,429 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,430 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,430 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,430 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,430 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,430 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,430 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,430 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,430 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,430 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,430 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,430 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,430 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,430 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,430 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,430 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,430 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,430 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,430 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,430 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,430 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,430 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,430 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,430 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,431 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,431 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,431 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,431 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,431 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,431 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,431 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x7f71ba792af0>],
             204: [<numba.core.ir.Assign object at 0x7f71ba7934c0>]})
DEBUG 2022-02-14 16:45:26,431 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,431 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,431 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,431 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,431 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,431 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,431 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,431 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,431 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,431 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,431 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,431 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,431 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,431 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,432 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,432 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,432 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,432 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,432 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,432 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,432 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,432 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,432 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,432 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,432 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,432 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,432 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,432 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,432 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,432 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,433 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,433 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,433 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,433 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,433 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,433 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,433 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,433 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,433 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,433 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,433 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,433 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,433 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,433 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,433 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,433 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,433 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,433 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,433 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,434 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,434 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,434 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,434 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,434 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,434 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,434 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,434 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,434 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,434 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,434 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,434 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,434 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,434 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,434 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,434 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,434 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,434 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,434 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,434 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,434 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,435 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,435 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,435 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,435 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,435 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,435 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,435 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,435 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,435 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,435 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,435 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,435 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,435 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,435 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,435 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,435 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,435 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,435 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,435 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,436 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,436 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,436 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,436 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,436 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,436 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,436 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,436 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,436 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,436 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,436 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,436 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,436 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,436 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,436 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,436 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,436 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,436 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,436 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,436 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:26,436 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,436 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,436 find_def_from_top label 204
DEBUG 2022-02-14 16:45:26,436 idom 202 from label 204
DEBUG 2022-02-14 16:45:26,437 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,437 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,437 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-14 16:45:26,437 find_def_from_bottom label 298
DEBUG 2022-02-14 16:45:26,437 find_def_from_top label 298
DEBUG 2022-02-14 16:45:26,437 idom 240 from label 298
DEBUG 2022-02-14 16:45:26,437 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:26,437 find_def_from_top label 240
DEBUG 2022-02-14 16:45:26,437 idom 204 from label 240
DEBUG 2022-02-14 16:45:26,437 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:26,437 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,437 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,437 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,437 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,437 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,437 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,437 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,437 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,437 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,437 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,437 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,437 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,437 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,437 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,438 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,438 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,438 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,438 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,438 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,438 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,438 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,438 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,438 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,438 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,438 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,438 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,438 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,438 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,438 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,438 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,438 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,438 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,438 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,438 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,438 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,438 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,438 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,438 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,439 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:26,439 find_def_from_top label 242
DEBUG 2022-02-14 16:45:26,439 idom 240 from label 242
DEBUG 2022-02-14 16:45:26,439 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:26,439 find_def_from_top label 240
DEBUG 2022-02-14 16:45:26,439 idom 204 from label 240
DEBUG 2022-02-14 16:45:26,439 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:26,439 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:26,439 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,439 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,439 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,439 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,439 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,439 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,439 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,439 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,439 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,439 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,439 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba792ac0>
DEBUG 2022-02-14 16:45:26,439 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,439 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,439 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,439 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,440 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,440 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,440 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,440 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,440 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:45:26,440 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,440 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,440 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,440 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,440 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,440 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,440 first assign: D_S
DEBUG 2022-02-14 16:45:26,440 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,440 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,440 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,440 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,440 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,440 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,440 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,440 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,440 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,440 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,440 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,440 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,440 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,440 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,441 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,441 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,441 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,441 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,441 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,441 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,441 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,441 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,441 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,441 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,441 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,441 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,441 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,441 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,441 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,441 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,441 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,441 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,442 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,442 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,442 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,442 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,442 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,442 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,442 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,442 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,442 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,442 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,442 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,442 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,442 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,442 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,442 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,442 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,442 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,442 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,442 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,442 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,442 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,442 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,442 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,443 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,443 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,443 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,443 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,443 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,443 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,443 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,443 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,443 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,443 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,443 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,443 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,443 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,443 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,443 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,443 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,443 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,443 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,443 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,443 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,443 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,443 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,443 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,443 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,444 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,444 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,444 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,444 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,444 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,444 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,444 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,444 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,444 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,444 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,444 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,444 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,444 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,444 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,444 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,444 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,444 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,445 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:45:26,445 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,445 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,445 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,445 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,445 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,445 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,445 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,445 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,445 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:26,445 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,445 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,445 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,445 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,445 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,445 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,445 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,445 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,445 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,445 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,445 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,445 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,445 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,445 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,445 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,446 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,446 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,446 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,446 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,446 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,446 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,446 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,446 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,446 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,446 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,446 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,446 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,446 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,446 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,446 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,446 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,446 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,446 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,446 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,446 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:26,446 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,446 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,446 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,446 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,446 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,447 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,447 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,447 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,447 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,447 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,447 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba780490>
DEBUG 2022-02-14 16:45:26,447 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,447 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,447 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,447 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,447 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,447 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,447 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,447 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,447 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba7cff70>],
             124: [<numba.core.ir.Assign object at 0x7f71ba792040>]})
DEBUG 2022-02-14 16:45:26,447 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,447 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,448 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:26,448 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:26,448 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:26,448 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,448 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:26,448 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:26,448 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:26,448 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:26,448 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,448 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:26,448 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,448 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:26,448 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:26,448 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,448 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:26,448 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:26,448 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,448 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:26,448 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,448 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:26,448 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:26,449 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:26,449 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:26,449 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:26,449 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,449 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:26,449 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:26,449 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:26,449 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,449 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:26,449 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:26,449 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,449 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:26,449 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,449 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,449 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:26,449 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:26,449 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,449 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:26,449 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:26,449 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:26,449 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,449 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,449 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:26,449 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:26,449 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:26,450 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,450 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,450 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:26,450 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,450 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,450 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:26,450 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,450 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:26,450 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,450 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:26,450 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:26,450 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:26,450 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:26,450 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,451 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,451 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:26,451 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:26,451 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,451 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:26,451 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,451 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:26,451 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,451 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,451 find_def_from_top label 90
DEBUG 2022-02-14 16:45:26,451 idom 78 from label 90
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,452 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,452 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,452 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,452 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,452 find_def_from_top label 60
DEBUG 2022-02-14 16:45:26,452 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:26,452 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:26,452 find_def_from_top label 300
DEBUG 2022-02-14 16:45:26,452 idom 202 from label 300
DEBUG 2022-02-14 16:45:26,452 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:26,452 find_def_from_top label 202
DEBUG 2022-02-14 16:45:26,452 idom 140 from label 202
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:26,453 find_def_from_top label 140
DEBUG 2022-02-14 16:45:26,453 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:26,453 find_def_from_top label 72
DEBUG 2022-02-14 16:45:26,453 idom 62 from label 72
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,453 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,453 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,453 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:26,453 find_def_from_top label 90
DEBUG 2022-02-14 16:45:26,453 idom 78 from label 90
DEBUG 2022-02-14 16:45:26,453 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,453 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,453 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,454 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,454 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,454 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,454 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,454 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:26,454 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:26,454 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,454 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,454 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:26,454 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:26,454 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:26,454 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:26,455 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,455 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:26,455 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,455 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:26,455 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,455 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,455 find_def var='D_S' stmt=factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,455 find_def_from_top label 124
DEBUG 2022-02-14 16:45:26,455 idom 78 from label 124
DEBUG 2022-02-14 16:45:26,455 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,455 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,455 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,455 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,455 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,455 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,455 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,456 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:26,456 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,456 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:26,456 find_def_from_top label 124
DEBUG 2022-02-14 16:45:26,456 idom 78 from label 124
DEBUG 2022-02-14 16:45:26,456 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:26,456 find_def_from_top label 78
DEBUG 2022-02-14 16:45:26,456 idom 62 from label 78
DEBUG 2022-02-14 16:45:26,456 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:26,456 find_def_from_top label 62
DEBUG 2022-02-14 16:45:26,456 idom 60 from label 62
DEBUG 2022-02-14 16:45:26,456 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:26,456 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:26,456 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:26,456 on stmt: jump 140
DEBUG 2022-02-14 16:45:26,456 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,457 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,457 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,457 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:26,457 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:26,457 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:26,457 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:26,457 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:26,457 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:26,457 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:26,457 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,457 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,457 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,457 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,457 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,458 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,458 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,458 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,458 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,458 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,458 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:26,458 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:26,458 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,458 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:26,458 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:26,458 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:26,458 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:26,459 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,459 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:26,459 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:26,459 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,459 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:26,459 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,459 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:45:26,459 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:26,459 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,459 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:26,459 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:26,459 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:26,460 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:26,460 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,460 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:26,460 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:26,460 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,460 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:26,460 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,460 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:26,460 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:26,460 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:26,460 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:26,460 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:26,460 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,460 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:26,460 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:26,460 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,461 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:26,461 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,461 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:26,461 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,461 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:26,461 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:26,461 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:26,461 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:26,461 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,461 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:26,461 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:26,461 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:26,461 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,461 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,461 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:26,461 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:26,462 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:26,462 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:26,462 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:26,462 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:26,462 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:26,462 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,462 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:26,462 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,462 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:26,462 on stmt: jump 240
DEBUG 2022-02-14 16:45:26,462 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:26,462 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,462 on stmt: jump 202
DEBUG 2022-02-14 16:45:26,462 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:26,462 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,462 on stmt: jump 60
DEBUG 2022-02-14 16:45:26,463 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:26,463 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba7cfee0>
DEBUG 2022-02-14 16:45:26,463 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,463 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,463 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:26,463 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,463 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:26,463 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,463 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:26,463 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:26,470 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,470 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,470 stack: []
DEBUG 2022-02-14 16:45:26,470 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,470 stack []
DEBUG 2022-02-14 16:45:26,470 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,470 stack []
DEBUG 2022-02-14 16:45:26,470 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:26,470 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,471 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:26,471 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:26,471 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:26,471 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:26,471 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:26,471 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:26,471 end state. edges=[]
DEBUG 2022-02-14 16:45:26,471 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,471 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,471 defmap: {}
DEBUG 2022-02-14 16:45:26,471 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,471 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,471 keep phismap: {}
DEBUG 2022-02-14 16:45:26,471 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,471 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,471 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,472 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:26,473 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,473 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba7a2580>
DEBUG 2022-02-14 16:45:26,473 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:26,473 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:26,473 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:26,473 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,474 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:26,474 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:26,474 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba7a0190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba7a2c10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba7a0070>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71ba7a2130>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba7a20d0>]})
DEBUG 2022-02-14 16:45:26,474 SSA violators set()
DEBUG 2022-02-14 16:45:26,621 bytecode dump:
>          0	NOP(arg=None, lineno=169)
           2	LOAD_DEREF(arg=0, lineno=169)
           4	STORE_FAST(arg=1, lineno=169)
           6	LOAD_GLOBAL(arg=0, lineno=170)
           8	LOAD_METHOD(arg=1, lineno=170)
          10	LOAD_FAST(arg=0, lineno=170)
          12	CALL_METHOD(arg=1, lineno=170)
          14	GET_ITER(arg=None, lineno=170)
>         16	FOR_ITER(arg=16, lineno=170)
          18	STORE_FAST(arg=2, lineno=170)
          20	LOAD_FAST(arg=1, lineno=171)
          22	LOAD_FAST(arg=2, lineno=171)
          24	LOAD_METHOD(arg=2, lineno=171)
          26	CALL_METHOD(arg=0, lineno=171)
          28	INPLACE_ADD(arg=None, lineno=171)
          30	STORE_FAST(arg=1, lineno=171)
          32	JUMP_ABSOLUTE(arg=16, lineno=171)
>         34	LOAD_FAST(arg=1, lineno=172)
          36	RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:45:26,621 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,621 stack: []
DEBUG 2022-02-14 16:45:26,621 dispatch pc=0, inst=NOP(arg=None, lineno=169)
DEBUG 2022-02-14 16:45:26,621 stack []
DEBUG 2022-02-14 16:45:26,621 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=169)
DEBUG 2022-02-14 16:45:26,621 stack []
DEBUG 2022-02-14 16:45:26,621 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=169)
DEBUG 2022-02-14 16:45:26,621 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:45:26,622 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack []
DEBUG 2022-02-14 16:45:26,622 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack ['$6load_global.1']
DEBUG 2022-02-14 16:45:26,622 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack ['$8load_method.2']
DEBUG 2022-02-14 16:45:26,622 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack ['$8load_method.2', '$arr10.3']
DEBUG 2022-02-14 16:45:26,622 dispatch pc=14, inst=GET_ITER(arg=None, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack ['$12call_method.4']
DEBUG 2022-02-14 16:45:26,622 end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,622 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,622 stack: ['$phi16.0']
DEBUG 2022-02-14 16:45:26,622 dispatch pc=16, inst=FOR_ITER(arg=16, lineno=170)
DEBUG 2022-02-14 16:45:26,622 stack ['$phi16.0']
DEBUG 2022-02-14 16:45:26,622 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,622 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,622 stack: []
DEBUG 2022-02-14 16:45:26,622 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:45:26,622 stack []
DEBUG 2022-02-14 16:45:26,622 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:45:26,622 stack ['$c34.0']
DEBUG 2022-02-14 16:45:26,622 end state. edges=[]
DEBUG 2022-02-14 16:45:26,622 pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,622 stack: ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=170)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$c20.2']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0', '$28inplace_add.6']
DEBUG 2022-02-14 16:45:26,623 dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=171)
DEBUG 2022-02-14 16:45:26,623 stack ['$phi18.0']
DEBUG 2022-02-14 16:45:26,623 end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,623 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,623 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,623 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,623 defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG 2022-02-14 16:45:26,624 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:26,624 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:26,624 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:26,624 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:26,624 keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:26,624 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG 2022-02-14 16:45:26,625 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,625 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG 2022-02-14 16:45:26,625 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG 2022-02-14 16:45:26,625 block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG 2022-02-14 16:45:26,625 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,625 label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0j)                    ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:45:26,629 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,629 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba6ed910>
DEBUG 2022-02-14 16:45:26,629 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:45:26,629 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:45:26,629 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,629 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:45:26,629 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,629 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:45:26,629 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:45:26,629 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,629 ==== SSA block analysis pass on 16
DEBUG 2022-02-14 16:45:26,629 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba6ed910>
DEBUG 2022-02-14 16:45:26,629 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:45:26,629 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,629 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,629 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:45:26,629 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:45:26,629 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:45:26,629 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba6ed910>
DEBUG 2022-02-14 16:45:26,629 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:45:26,630 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:45:26,630 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,630 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,630 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:45:26,630 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,630 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:45:26,630 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba6ed910>
DEBUG 2022-02-14 16:45:26,630 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:45:26,630 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:45:26,630 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7f71ba6e0fd0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x7f71ba6eb100>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x7f71ba6eb3d0>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba6eb4f0>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba6eb610>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x7f71ba6ebca0>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x7f71ba6ebeb0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x7f71ba6ebfd0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7f71ba6ed400>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7f71ba6e0b20>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7f71ba6e0ca0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x7f71ba6e0a30>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x7f71ba6eb310>],
             'arr': [<numba.core.ir.Assign object at 0x7f71ba6e02b0>],
             'c': [<numba.core.ir.Assign object at 0x7f71ba6e0880>,
                   <numba.core.ir.Assign object at 0x7f71ba6ed0d0>],
             'v': [<numba.core.ir.Assign object at 0x7f71ba6eb8e0>]})
DEBUG 2022-02-14 16:45:26,630 SSA violators {'c'}
DEBUG 2022-02-14 16:45:26,630 Fix SSA violator on var c
DEBUG 2022-02-14 16:45:26,630 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,630 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,630 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:45:26,630 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:45:26,630 first assign: c
DEBUG 2022-02-14 16:45:26,630 replaced with: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:45:26,631 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,631 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:45:26,631 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,631 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:45:26,631 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:45:26,631 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,631 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:45:26,631 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,631 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:45:26,631 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,631 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,631 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:45:26,631 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:45:26,631 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:45:26,631 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,631 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:45:26,631 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:45:26,631 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,631 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,631 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:45:26,631 replaced with: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:45:26,631 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,631 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,631 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,631 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:45:26,631 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:45:26,632 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba6ed970>],
             18: [<numba.core.ir.Assign object at 0x7f71ba6ed6d0>]})
DEBUG 2022-02-14 16:45:26,632 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,632 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,632 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:45:26,632 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:45:26,632 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:26,632 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:45:26,632 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,632 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:45:26,632 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:45:26,632 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,632 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:45:26,632 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,632 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:45:26,632 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,632 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:45:26,632 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:45:26,632 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:45:26,632 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:45:26,632 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,632 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:45:26,632 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:45:26,632 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,633 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,633 find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,633 find_def_from_top label 18
DEBUG 2022-02-14 16:45:26,633 idom 16 from label 18
DEBUG 2022-02-14 16:45:26,633 find_def_from_bottom label 16
DEBUG 2022-02-14 16:45:26,633 find_def_from_top label 16
DEBUG 2022-02-14 16:45:26,633 insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG 2022-02-14 16:45:26,633 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:26,633 incoming_def c = freevar(zero: 0j)
DEBUG 2022-02-14 16:45:26,633 find_def_from_bottom label 18
DEBUG 2022-02-14 16:45:26,633 incoming_def c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:45:26,633 replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:26,633 on stmt: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:45:26,633 on stmt: jump 16
DEBUG 2022-02-14 16:45:26,633 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,633 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba6eda30>
DEBUG 2022-02-14 16:45:26,633 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:45:26,633 find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:45:26,633 find_def_from_top label 34
DEBUG 2022-02-14 16:45:26,633 idom 16 from label 34
DEBUG 2022-02-14 16:45:26,633 find_def_from_bottom label 16
DEBUG 2022-02-14 16:45:26,633 replaced with: $36return_value.1 = cast(value=c.2)
DEBUG 2022-02-14 16:45:26,633 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:45:26,643 bytecode dump:
>          0	NOP(arg=None, lineno=2820)
           2	LOAD_GLOBAL(arg=0, lineno=2820)
           4	LOAD_FAST(arg=0, lineno=2820)
           6	CALL_FUNCTION(arg=1, lineno=2820)
           8	STORE_FAST(arg=2, lineno=2820)
          10	LOAD_GLOBAL(arg=1, lineno=2821)
          12	LOAD_FAST(arg=2, lineno=2821)
          14	CALL_FUNCTION(arg=1, lineno=2821)
          16	GET_ITER(arg=None, lineno=2821)
>         18	FOR_ITER(arg=40, lineno=2821)
          20	STORE_FAST(arg=3, lineno=2821)
          22	LOAD_FAST(arg=0, lineno=2822)
          24	LOAD_FAST(arg=3, lineno=2822)
          26	BINARY_SUBSCR(arg=None, lineno=2822)
          28	LOAD_FAST(arg=1, lineno=2822)
          30	LOAD_GLOBAL(arg=0, lineno=2822)
          32	LOAD_FAST(arg=1, lineno=2822)
          34	CALL_FUNCTION(arg=1, lineno=2822)
          36	LOAD_FAST(arg=2, lineno=2822)
          38	BINARY_SUBTRACT(arg=None, lineno=2822)
          40	LOAD_FAST(arg=3, lineno=2822)
          42	BINARY_ADD(arg=None, lineno=2822)
          44	BINARY_SUBSCR(arg=None, lineno=2822)
          46	COMPARE_OP(arg=3, lineno=2822)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2822)
          50	LOAD_GLOBAL(arg=2, lineno=2823)
          52	LOAD_CONST(arg=1, lineno=2823)
          54	CALL_FUNCTION(arg=1, lineno=2823)
          56	RAISE_VARARGS(arg=1, lineno=2823)
          58	JUMP_ABSOLUTE(arg=18, lineno=2823)
>         60	LOAD_CONST(arg=0, lineno=2823)
          62	RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:45:26,643 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,643 stack: []
DEBUG 2022-02-14 16:45:26,643 dispatch pc=0, inst=NOP(arg=None, lineno=2820)
DEBUG 2022-02-14 16:45:26,643 stack []
DEBUG 2022-02-14 16:45:26,644 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2820)
DEBUG 2022-02-14 16:45:26,644 stack []
DEBUG 2022-02-14 16:45:26,644 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2820)
DEBUG 2022-02-14 16:45:26,644 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2820)
DEBUG 2022-02-14 16:45:26,644 stack ['$2load_global.0', '$shape4.1']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2820)
DEBUG 2022-02-14 16:45:26,644 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2821)
DEBUG 2022-02-14 16:45:26,644 stack []
DEBUG 2022-02-14 16:45:26,644 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2821)
DEBUG 2022-02-14 16:45:26,644 stack ['$10load_global.3']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2821)
DEBUG 2022-02-14 16:45:26,644 stack ['$10load_global.3', '$n12.4']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=16, inst=GET_ITER(arg=None, lineno=2821)
DEBUG 2022-02-14 16:45:26,644 stack ['$14call_function.5']
DEBUG 2022-02-14 16:45:26,644 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,644 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,644 stack: ['$phi18.0']
DEBUG 2022-02-14 16:45:26,644 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2821)
DEBUG 2022-02-14 16:45:26,644 stack ['$phi18.0']
DEBUG 2022-02-14 16:45:26,644 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,644 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,644 stack: []
DEBUG 2022-02-14 16:45:26,644 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2823)
DEBUG 2022-02-14 16:45:26,645 stack []
DEBUG 2022-02-14 16:45:26,645 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:45:26,645 stack ['$const60.0']
DEBUG 2022-02-14 16:45:26,645 end state. edges=[]
DEBUG 2022-02-14 16:45:26,645 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:45:26,645 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2821)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$shape22.2']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2022-02-14 16:45:26,645 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2822)
DEBUG 2022-02-14 16:45:26,645 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2822)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2822)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2822)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2022-02-14 16:45:26,646 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,646 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,646 stack: ['$phi50.0']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2823)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi50.0']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2823)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi50.0', '$50load_global.1']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2823)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2022-02-14 16:45:26,646 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2823)
DEBUG 2022-02-14 16:45:26,646 stack ['$phi50.0', '$54call_function.3']
DEBUG 2022-02-14 16:45:26,646 end state. edges=[]
DEBUG 2022-02-14 16:45:26,646 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:45:26,646 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,646 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,647 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-14 16:45:26,647 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-14 16:45:26,647 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,647 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,647 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:26,648 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:26,648 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-14 16:45:26,648 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,648 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2022-02-14 16:45:26,648 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-14 16:45:26,648 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2022-02-14 16:45:26,648 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,648 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,649 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2022-02-14 16:45:26,653 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,653 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba668a30>
DEBUG 2022-02-14 16:45:26,653 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:45:26,653 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2022-02-14 16:45:26,653 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:26,653 on stmt: n = const(int, 1)
DEBUG 2022-02-14 16:45:26,653 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:26,653 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,653 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2022-02-14 16:45:26,653 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2022-02-14 16:45:26,653 on stmt: jump 18
DEBUG 2022-02-14 16:45:26,653 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:45:26,653 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba668a30>
DEBUG 2022-02-14 16:45:26,653 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-14 16:45:26,653 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-14 16:45:26,653 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-14 16:45:26,653 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-14 16:45:26,653 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2022-02-14 16:45:26,653 ==== SSA block analysis pass on 20
DEBUG 2022-02-14 16:45:26,653 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba668a30>
DEBUG 2022-02-14 16:45:26,654 on stmt: i = $phi20.1
DEBUG 2022-02-14 16:45:26,654 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,654 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:26,654 on stmt: $34call_function.8 = const(int, 1)
DEBUG 2022-02-14 16:45:26,654 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2022-02-14 16:45:26,654 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2022-02-14 16:45:26,654 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,654 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2022-02-14 16:45:26,654 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,654 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,654 on stmt: branch $48pred, 50, 18
DEBUG 2022-02-14 16:45:26,654 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:45:26,654 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba668a30>
DEBUG 2022-02-14 16:45:26,654 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:45:26,654 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2022-02-14 16:45:26,654 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,654 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2022-02-14 16:45:26,654 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:45:26,654 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba668a30>
DEBUG 2022-02-14 16:45:26,654 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,654 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2022-02-14 16:45:26,654 on stmt: return $62return_value.1
DEBUG 2022-02-14 16:45:26,655 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7f71ba66ff70>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x7f71ba5f52b0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x7f71ba5f53d0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7f71ba5f5640>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba5f5760>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba5f5880>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x7f71ba5f5f40>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba66fa30>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x7f71ba5fb1f0>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x7f71ba66f5b0>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x7f71ba668760>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x7f71ba668c40>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x7f71ba668ac0>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x7f71ba5fb460>],
             '$48pred': [<numba.core.ir.Assign object at 0x7f71ba5fb6d0>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x7f71ba5f54f0>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x7f71ba5fba90>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x7f71ba5fbeb0>],
             '$const52.2': [<numba.core.ir.Assign object at 0x7f71ba5fb8b0>],
             '$const60.0': [<numba.core.ir.Assign object at 0x7f71ba5fbd30>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7f71ba66fbe0>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7f71ba5f5580>],
             'bool48': [<numba.core.ir.Assign object at 0x7f71ba5fb5b0>],
             'i': [<numba.core.ir.Assign object at 0x7f71ba5f5b50>],
             'main_shape': [<numba.core.ir.Assign object at 0x7f71ba66f8b0>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba66fd30>],
             'shape': [<numba.core.ir.Assign object at 0x7f71ba66f790>]})
DEBUG 2022-02-14 16:45:26,655 SSA violators set()
DEBUG 2022-02-14 16:45:26,836 bytecode dump:
>          0	NOP(arg=None, lineno=1064)
           2	LOAD_FAST(arg=0, lineno=1064)
           4	LOAD_ATTR(arg=0, lineno=1064)
           6	STORE_FAST(arg=2, lineno=1064)
           8	LOAD_FAST(arg=0, lineno=1065)
          10	LOAD_ATTR(arg=1, lineno=1065)
          12	STORE_FAST(arg=3, lineno=1065)
          14	LOAD_FAST(arg=1, lineno=1066)
          16	LOAD_ATTR(arg=0, lineno=1066)
          18	STORE_FAST(arg=4, lineno=1066)
          20	LOAD_FAST(arg=1, lineno=1067)
          22	LOAD_ATTR(arg=1, lineno=1067)
          24	STORE_FAST(arg=5, lineno=1067)
          26	LOAD_FAST(arg=4, lineno=1068)
          28	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          30	LOAD_FAST(arg=5, lineno=1068)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          34	LOAD_GLOBAL(arg=2, lineno=1069)
          36	LOAD_CONST(arg=1, lineno=1069)
          38	CALL_FUNCTION(arg=1, lineno=1069)
          40	RAISE_VARARGS(arg=1, lineno=1069)
>         42	LOAD_GLOBAL(arg=3, lineno=1070)
          44	LOAD_FAST(arg=4, lineno=1070)
          46	CALL_FUNCTION(arg=1, lineno=1070)
          48	LOAD_GLOBAL(arg=3, lineno=1070)
          50	LOAD_FAST(arg=5, lineno=1070)
          52	CALL_FUNCTION(arg=1, lineno=1070)
          54	COMPARE_OP(arg=5, lineno=1070)
          56	POP_JUMP_IF_FALSE(arg=126, lineno=1070)
          58	LOAD_FAST(arg=4, lineno=1072)
          60	POP_JUMP_IF_TRUE(arg=72, lineno=1072)
          62	LOAD_GLOBAL(arg=4, lineno=1073)
          64	LOAD_GLOBAL(arg=5, lineno=1073)
          66	LOAD_GLOBAL(arg=5, lineno=1073)
          68	CALL_FUNCTION(arg=2, lineno=1073)
          70	RETURN_VALUE(arg=None, lineno=1073)
>         72	LOAD_FAST(arg=5, lineno=1074)
          74	LOAD_FAST(arg=4, lineno=1074)
          76	BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
          78	STORE_FAST(arg=6, lineno=1074)
          80	LOAD_FAST(arg=4, lineno=1075)
          82	LOAD_FAST(arg=5, lineno=1075)
          84	LOAD_FAST(arg=6, lineno=1075)
          86	BINARY_MULTIPLY(arg=None, lineno=1075)
          88	BINARY_ADD(arg=None, lineno=1075)
          90	STORE_FAST(arg=7, lineno=1075)
          92	LOAD_GLOBAL(arg=4, lineno=1076)
          94	LOAD_FAST(arg=2, lineno=1077)
          96	LOAD_FAST(arg=3, lineno=1077)
          98	LOAD_FAST(arg=6, lineno=1077)
         100	BINARY_MULTIPLY(arg=None, lineno=1077)
         102	BINARY_ADD(arg=None, lineno=1077)
         104	LOAD_FAST(arg=7, lineno=1077)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
         108	LOAD_FAST(arg=3, lineno=1078)
         110	LOAD_FAST(arg=2, lineno=1078)
         112	LOAD_FAST(arg=6, lineno=1078)
         114	BINARY_MULTIPLY(arg=None, lineno=1078)
         116	BINARY_SUBTRACT(arg=None, lineno=1078)
         118	LOAD_FAST(arg=7, lineno=1078)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
         122	CALL_FUNCTION(arg=2, lineno=1076)
         124	RETURN_VALUE(arg=None, lineno=1076)
>        126	LOAD_FAST(arg=5, lineno=1081)
         128	POP_JUMP_IF_TRUE(arg=140, lineno=1081)
         130	LOAD_GLOBAL(arg=4, lineno=1082)
         132	LOAD_GLOBAL(arg=5, lineno=1082)
         134	LOAD_GLOBAL(arg=5, lineno=1082)
         136	CALL_FUNCTION(arg=2, lineno=1082)
         138	RETURN_VALUE(arg=None, lineno=1082)
>        140	LOAD_FAST(arg=4, lineno=1083)
         142	LOAD_FAST(arg=5, lineno=1083)
         144	BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
         146	STORE_FAST(arg=6, lineno=1083)
         148	LOAD_FAST(arg=4, lineno=1084)
         150	LOAD_FAST(arg=6, lineno=1084)
         152	BINARY_MULTIPLY(arg=None, lineno=1084)
         154	LOAD_FAST(arg=5, lineno=1084)
         156	BINARY_ADD(arg=None, lineno=1084)
         158	STORE_FAST(arg=7, lineno=1084)
         160	LOAD_GLOBAL(arg=4, lineno=1085)
         162	LOAD_FAST(arg=0, lineno=1086)
         164	LOAD_ATTR(arg=0, lineno=1086)
         166	LOAD_FAST(arg=6, lineno=1086)
         168	BINARY_MULTIPLY(arg=None, lineno=1086)
         170	LOAD_FAST(arg=0, lineno=1086)
         172	LOAD_ATTR(arg=1, lineno=1086)
         174	BINARY_ADD(arg=None, lineno=1086)
         176	LOAD_FAST(arg=7, lineno=1086)
         178	BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
         180	LOAD_FAST(arg=0, lineno=1087)
         182	LOAD_ATTR(arg=1, lineno=1087)
         184	LOAD_FAST(arg=6, lineno=1087)
         186	BINARY_MULTIPLY(arg=None, lineno=1087)
         188	LOAD_FAST(arg=0, lineno=1087)
         190	LOAD_ATTR(arg=0, lineno=1087)
         192	BINARY_SUBTRACT(arg=None, lineno=1087)
         194	LOAD_FAST(arg=7, lineno=1087)
         196	BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
         198	CALL_FUNCTION(arg=2, lineno=1085)
         200	RETURN_VALUE(arg=None, lineno=1085)
         202	LOAD_CONST(arg=0, lineno=1085)
         204	RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:45:26,836 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,836 stack: []
DEBUG 2022-02-14 16:45:26,836 dispatch pc=0, inst=NOP(arg=None, lineno=1064)
DEBUG 2022-02-14 16:45:26,836 stack []
DEBUG 2022-02-14 16:45:26,836 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG 2022-02-14 16:45:26,836 stack []
DEBUG 2022-02-14 16:45:26,836 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1064)
DEBUG 2022-02-14 16:45:26,837 stack ['$a2.0']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1064)
DEBUG 2022-02-14 16:45:26,837 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1065)
DEBUG 2022-02-14 16:45:26,837 stack []
DEBUG 2022-02-14 16:45:26,837 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=1065)
DEBUG 2022-02-14 16:45:26,837 stack ['$a8.2']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1065)
DEBUG 2022-02-14 16:45:26,837 stack ['$10load_attr.3']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1066)
DEBUG 2022-02-14 16:45:26,837 stack []
DEBUG 2022-02-14 16:45:26,837 dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=1066)
DEBUG 2022-02-14 16:45:26,837 stack ['$b14.4']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=1066)
DEBUG 2022-02-14 16:45:26,837 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1067)
DEBUG 2022-02-14 16:45:26,837 stack []
DEBUG 2022-02-14 16:45:26,837 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=1067)
DEBUG 2022-02-14 16:45:26,837 stack ['$b20.6']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1067)
DEBUG 2022-02-14 16:45:26,837 stack ['$22load_attr.7']
DEBUG 2022-02-14 16:45:26,837 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1068)
DEBUG 2022-02-14 16:45:26,838 stack []
DEBUG 2022-02-14 16:45:26,838 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:45:26,838 stack ['$breal26.8']
DEBUG 2022-02-14 16:45:26,838 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,838 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,838 stack: []
DEBUG 2022-02-14 16:45:26,838 dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=1068)
DEBUG 2022-02-14 16:45:26,838 stack []
DEBUG 2022-02-14 16:45:26,838 dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:45:26,838 stack ['$bimag30.0']
DEBUG 2022-02-14 16:45:26,838 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,838 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,838 stack: []
DEBUG 2022-02-14 16:45:26,838 dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:45:26,838 stack []
DEBUG 2022-02-14 16:45:26,838 dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1070)
DEBUG 2022-02-14 16:45:26,838 stack ['$42load_global.0']
DEBUG 2022-02-14 16:45:26,838 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:45:26,838 stack ['$42load_global.0', '$breal44.1']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:45:26,839 stack ['$46call_function.2']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1070)
DEBUG 2022-02-14 16:45:26,839 stack ['$46call_function.2', '$48load_global.3']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:45:26,839 stack ['$46call_function.2', '$48load_global.3', '$bimag50.4']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=1070)
DEBUG 2022-02-14 16:45:26,839 stack ['$46call_function.2', '$52call_function.5']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=126, lineno=1070)
DEBUG 2022-02-14 16:45:26,839 stack ['$54compare_op.6']
DEBUG 2022-02-14 16:45:26,839 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,839 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,839 stack: []
DEBUG 2022-02-14 16:45:26,839 dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=1069)
DEBUG 2022-02-14 16:45:26,839 stack []
DEBUG 2022-02-14 16:45:26,839 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1069)
DEBUG 2022-02-14 16:45:26,839 stack ['$34load_global.0']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2022-02-14 16:45:26,839 stack ['$34load_global.0', '$const36.1']
DEBUG 2022-02-14 16:45:26,839 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1069)
DEBUG 2022-02-14 16:45:26,839 stack ['$38call_function.2']
DEBUG 2022-02-14 16:45:26,840 end state. edges=[]
DEBUG 2022-02-14 16:45:26,840 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,840 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,840 stack: []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=1072)
DEBUG 2022-02-14 16:45:26,840 stack []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=60, inst=POP_JUMP_IF_TRUE(arg=72, lineno=1072)
DEBUG 2022-02-14 16:45:26,840 stack ['$breal58.0']
DEBUG 2022-02-14 16:45:26,840 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,840 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,840 stack: []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=1081)
DEBUG 2022-02-14 16:45:26,840 stack []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=128, inst=POP_JUMP_IF_TRUE(arg=140, lineno=1081)
DEBUG 2022-02-14 16:45:26,840 stack ['$bimag126.0']
DEBUG 2022-02-14 16:45:26,840 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0), Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,840 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,840 stack: []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=62, inst=LOAD_GLOBAL(arg=4, lineno=1073)
DEBUG 2022-02-14 16:45:26,840 stack []
DEBUG 2022-02-14 16:45:26,840 dispatch pc=64, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:45:26,840 stack ['$62load_global.0']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:45:26,841 stack ['$62load_global.0', '$64load_global.1']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=68, inst=CALL_FUNCTION(arg=2, lineno=1073)
DEBUG 2022-02-14 16:45:26,841 stack ['$62load_global.0', '$64load_global.1', '$66load_global.2']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1073)
DEBUG 2022-02-14 16:45:26,841 stack ['$68call_function.3']
DEBUG 2022-02-14 16:45:26,841 end state. edges=[]
DEBUG 2022-02-14 16:45:26,841 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,841 stack: []
DEBUG 2022-02-14 16:45:26,841 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=1074)
DEBUG 2022-02-14 16:45:26,841 stack []
DEBUG 2022-02-14 16:45:26,841 dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1074)
DEBUG 2022-02-14 16:45:26,841 stack ['$bimag72.0']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=76, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
DEBUG 2022-02-14 16:45:26,841 stack ['$bimag72.0', '$breal74.1']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=78, inst=STORE_FAST(arg=6, lineno=1074)
DEBUG 2022-02-14 16:45:26,841 stack ['$76binary_true_divide.2']
DEBUG 2022-02-14 16:45:26,841 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=1075)
DEBUG 2022-02-14 16:45:26,841 stack []
DEBUG 2022-02-14 16:45:26,841 dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1075)
DEBUG 2022-02-14 16:45:26,842 stack ['$breal80.3']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=1075)
DEBUG 2022-02-14 16:45:26,842 stack ['$breal80.3', '$bimag82.4']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=1075)
DEBUG 2022-02-14 16:45:26,842 stack ['$breal80.3', '$bimag82.4', '$ratio84.5']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1075)
DEBUG 2022-02-14 16:45:26,842 stack ['$breal80.3', '$86binary_multiply.6']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=90, inst=STORE_FAST(arg=7, lineno=1075)
DEBUG 2022-02-14 16:45:26,842 stack ['$88binary_add.7']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=92, inst=LOAD_GLOBAL(arg=4, lineno=1076)
DEBUG 2022-02-14 16:45:26,842 stack []
DEBUG 2022-02-14 16:45:26,842 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=1077)
DEBUG 2022-02-14 16:45:26,842 stack ['$92load_global.8']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1077)
DEBUG 2022-02-14 16:45:26,842 stack ['$92load_global.8', '$areal94.9']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=1077)
DEBUG 2022-02-14 16:45:26,842 stack ['$92load_global.8', '$areal94.9', '$aimag96.10']
DEBUG 2022-02-14 16:45:26,842 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=1077)
DEBUG 2022-02-14 16:45:26,842 stack ['$92load_global.8', '$areal94.9', '$aimag96.10', '$ratio98.11']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=1077)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$areal94.9', '$100binary_multiply.12']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=104, inst=LOAD_FAST(arg=7, lineno=1077)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$102binary_add.13']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$102binary_add.13', '$denom104.14']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=108, inst=LOAD_FAST(arg=3, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17', '$ratio112.18']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$114binary_multiply.19']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20']
DEBUG 2022-02-14 16:45:26,843 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
DEBUG 2022-02-14 16:45:26,843 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20', '$denom118.21']
DEBUG 2022-02-14 16:45:26,844 dispatch pc=122, inst=CALL_FUNCTION(arg=2, lineno=1076)
DEBUG 2022-02-14 16:45:26,844 stack ['$92load_global.8', '$106binary_true_divide.15', '$120binary_true_divide.22']
DEBUG 2022-02-14 16:45:26,844 dispatch pc=124, inst=RETURN_VALUE(arg=None, lineno=1076)
DEBUG 2022-02-14 16:45:26,844 stack ['$122call_function.23']
DEBUG 2022-02-14 16:45:26,844 end state. edges=[]
DEBUG 2022-02-14 16:45:26,844 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,844 stack: []
DEBUG 2022-02-14 16:45:26,844 dispatch pc=130, inst=LOAD_GLOBAL(arg=4, lineno=1082)
DEBUG 2022-02-14 16:45:26,844 stack []
DEBUG 2022-02-14 16:45:26,844 dispatch pc=132, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:45:26,844 stack ['$130load_global.0']
DEBUG 2022-02-14 16:45:26,844 dispatch pc=134, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:45:26,844 stack ['$130load_global.0', '$132load_global.1']
DEBUG 2022-02-14 16:45:26,844 dispatch pc=136, inst=CALL_FUNCTION(arg=2, lineno=1082)
DEBUG 2022-02-14 16:45:26,844 stack ['$130load_global.0', '$132load_global.1', '$134load_global.2']
DEBUG 2022-02-14 16:45:26,844 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=1082)
DEBUG 2022-02-14 16:45:26,844 stack ['$136call_function.3']
DEBUG 2022-02-14 16:45:26,844 end state. edges=[]
DEBUG 2022-02-14 16:45:26,845 pending: deque([State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,845 stack: []
DEBUG 2022-02-14 16:45:26,845 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=1083)
DEBUG 2022-02-14 16:45:26,845 stack []
DEBUG 2022-02-14 16:45:26,845 dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=1083)
DEBUG 2022-02-14 16:45:26,845 stack ['$breal140.0']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=144, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
DEBUG 2022-02-14 16:45:26,845 stack ['$breal140.0', '$bimag142.1']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=146, inst=STORE_FAST(arg=6, lineno=1083)
DEBUG 2022-02-14 16:45:26,845 stack ['$144binary_true_divide.2']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack []
DEBUG 2022-02-14 16:45:26,845 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack ['$breal148.3']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack ['$breal148.3', '$ratio150.4']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack ['$152binary_multiply.5']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack ['$152binary_multiply.5', '$bimag154.6']
DEBUG 2022-02-14 16:45:26,845 dispatch pc=158, inst=STORE_FAST(arg=7, lineno=1084)
DEBUG 2022-02-14 16:45:26,845 stack ['$156binary_add.7']
DEBUG 2022-02-14 16:45:26,846 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=1085)
DEBUG 2022-02-14 16:45:26,846 stack []
DEBUG 2022-02-14 16:45:26,846 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:45:26,846 stack ['$160load_global.8']
DEBUG 2022-02-14 16:45:26,846 dispatch pc=164, inst=LOAD_ATTR(arg=0, lineno=1086)
DEBUG 2022-02-14 16:45:26,846 stack ['$160load_global.8', '$a162.9']
DEBUG 2022-02-14 16:45:26,846 dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=1086)
DEBUG 2022-02-14 16:45:26,846 stack ['$160load_global.8', '$164load_attr.10']
DEBUG 2022-02-14 16:45:26,846 dispatch pc=168, inst=BINARY_MULTIPLY(arg=None, lineno=1086)
DEBUG 2022-02-14 16:45:26,846 stack ['$160load_global.8', '$164load_attr.10', '$ratio166.11']
DEBUG 2022-02-14 16:45:26,846 dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$168binary_multiply.12']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=172, inst=LOAD_ATTR(arg=1, lineno=1086)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$168binary_multiply.12', '$a170.13']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=1086)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$168binary_multiply.12', '$172load_attr.14']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1086)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$174binary_add.15']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=178, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$174binary_add.15', '$denom176.16']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$178binary_true_divide.17']
DEBUG 2022-02-14 16:45:26,847 dispatch pc=182, inst=LOAD_ATTR(arg=1, lineno=1087)
DEBUG 2022-02-14 16:45:26,847 stack ['$160load_global.8', '$178binary_true_divide.17', '$a180.18']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1087)
DEBUG 2022-02-14 16:45:26,848 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=1087)
DEBUG 2022-02-14 16:45:26,848 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19', '$ratio184.20']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:45:26,848 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=190, inst=LOAD_ATTR(arg=0, lineno=1087)
DEBUG 2022-02-14 16:45:26,848 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$a188.22']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=1087)
DEBUG 2022-02-14 16:45:26,848 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$190load_attr.23']
DEBUG 2022-02-14 16:45:26,848 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1087)
DEBUG 2022-02-14 16:45:26,849 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24']
DEBUG 2022-02-14 16:45:26,849 dispatch pc=196, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
DEBUG 2022-02-14 16:45:26,849 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24', '$denom194.25']
DEBUG 2022-02-14 16:45:26,849 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=1085)
DEBUG 2022-02-14 16:45:26,849 stack ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26']
DEBUG 2022-02-14 16:45:26,849 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:45:26,849 stack ['$198call_function.27']
DEBUG 2022-02-14 16:45:26,849 end state. edges=[]
DEBUG 2022-02-14 16:45:26,849 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,849 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,849 defmap: {}
DEBUG 2022-02-14 16:45:26,849 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,849 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,849 keep phismap: {}
DEBUG 2022-02-14 16:45:26,850 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,850 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$a8.2'}), (10, {'item': '$a8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$b14.4'}), (16, {'item': '$b14.4', 'res': '$16load_attr.5'}), (18, {'value': '$16load_attr.5'}), (20, {'res': '$b20.6'}), (22, {'item': '$b20.6', 'res': '$22load_attr.7'}), (24, {'value': '$22load_attr.7'}), (26, {'res': '$breal26.8'}), (28, {'pred': '$breal26.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 42: ()})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$bimag30.0'}), (32, {'pred': '$bimag30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$breal44.1'}), (46, {'func': '$42load_global.0', 'args': ['$breal44.1'], 'res': '$46call_function.2'}), (48, {'res': '$48load_global.3'}), (50, {'res': '$bimag50.4'}), (52, {'func': '$48load_global.3', 'args': ['$bimag50.4'], 'res': '$52call_function.5'}), (54, {'lhs': '$46call_function.2', 'rhs': '$52call_function.5', 'res': '$54compare_op.6'}), (56, {'pred': '$54compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 126: ()})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$breal58.0'}), (60, {'pred': '$breal58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 72: ()})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'res': '$64load_global.1'}), (66, {'res': '$66load_global.2'}), (68, {'func': '$62load_global.0', 'args': ['$64load_global.1', '$66load_global.2'], 'res': '$68call_function.3'}), (70, {'retval': '$68call_function.3', 'castval': '$70return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$bimag72.0'}), (74, {'res': '$breal74.1'}), (76, {'lhs': '$bimag72.0', 'rhs': '$breal74.1', 'res': '$76binary_true_divide.2'}), (78, {'value': '$76binary_true_divide.2'}), (80, {'res': '$breal80.3'}), (82, {'res': '$bimag82.4'}), (84, {'res': '$ratio84.5'}), (86, {'lhs': '$bimag82.4', 'rhs': '$ratio84.5', 'res': '$86binary_multiply.6'}), (88, {'lhs': '$breal80.3', 'rhs': '$86binary_multiply.6', 'res': '$88binary_add.7'}), (90, {'value': '$88binary_add.7'}), (92, {'res': '$92load_global.8'}), (94, {'res': '$areal94.9'}), (96, {'res': '$aimag96.10'}), (98, {'res': '$ratio98.11'}), (100, {'lhs': '$aimag96.10', 'rhs': '$ratio98.11', 'res': '$100binary_multiply.12'}), (102, {'lhs': '$areal94.9', 'rhs': '$100binary_multiply.12', 'res': '$102binary_add.13'}), (104, {'res': '$denom104.14'}), (106, {'lhs': '$102binary_add.13', 'rhs': '$denom104.14', 'res': '$106binary_true_divide.15'}), (108, {'res': '$aimag108.16'}), (110, {'res': '$areal110.17'}), (112, {'res': '$ratio112.18'}), (114, {'lhs': '$areal110.17', 'rhs': '$ratio112.18', 'res': '$114binary_multiply.19'}), (116, {'lhs': '$aimag108.16', 'rhs': '$114binary_multiply.19', 'res': '$116binary_subtract.20'}), (118, {'res': '$denom118.21'}), (120, {'lhs': '$116binary_subtract.20', 'rhs': '$denom118.21', 'res': '$120binary_true_divide.22'}), (122, {'func': '$92load_global.8', 'args': ['$106binary_true_divide.15', '$120binary_true_divide.22'], 'res': '$122call_function.23'}), (124, {'retval': '$122call_function.23', 'castval': '$124return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$bimag126.0'}), (128, {'pred': '$bimag126.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: (), 140: ()})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$132load_global.1'}), (134, {'res': '$134load_global.2'}), (136, {'func': '$130load_global.0', 'args': ['$132load_global.1', '$134load_global.2'], 'res': '$136call_function.3'}), (138, {'retval': '$136call_function.3', 'castval': '$138return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,850 block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$breal140.0'}), (142, {'res': '$bimag142.1'}), (144, {'lhs': '$breal140.0', 'rhs': '$bimag142.1', 'res': '$144binary_true_divide.2'}), (146, {'value': '$144binary_true_divide.2'}), (148, {'res': '$breal148.3'}), (150, {'res': '$ratio150.4'}), (152, {'lhs': '$breal148.3', 'rhs': '$ratio150.4', 'res': '$152binary_multiply.5'}), (154, {'res': '$bimag154.6'}), (156, {'lhs': '$152binary_multiply.5', 'rhs': '$bimag154.6', 'res': '$156binary_add.7'}), (158, {'value': '$156binary_add.7'}), (160, {'res': '$160load_global.8'}), (162, {'res': '$a162.9'}), (164, {'item': '$a162.9', 'res': '$164load_attr.10'}), (166, {'res': '$ratio166.11'}), (168, {'lhs': '$164load_attr.10', 'rhs': '$ratio166.11', 'res': '$168binary_multiply.12'}), (170, {'res': '$a170.13'}), (172, {'item': '$a170.13', 'res': '$172load_attr.14'}), (174, {'lhs': '$168binary_multiply.12', 'rhs': '$172load_attr.14', 'res': '$174binary_add.15'}), (176, {'res': '$denom176.16'}), (178, {'lhs': '$174binary_add.15', 'rhs': '$denom176.16', 'res': '$178binary_true_divide.17'}), (180, {'res': '$a180.18'}), (182, {'item': '$a180.18', 'res': '$182load_attr.19'}), (184, {'res': '$ratio184.20'}), (186, {'lhs': '$182load_attr.19', 'rhs': '$ratio184.20', 'res': '$186binary_multiply.21'}), (188, {'res': '$a188.22'}), (190, {'item': '$a188.22', 'res': '$190load_attr.23'}), (192, {'lhs': '$186binary_multiply.21', 'rhs': '$190load_attr.23', 'res': '$192binary_subtract.24'}), (194, {'res': '$denom194.25'}), (196, {'lhs': '$192binary_subtract.24', 'rhs': '$denom194.25', 'res': '$196binary_true_divide.26'}), (198, {'func': '$160load_global.8', 'args': ['$178binary_true_divide.17', '$196binary_true_divide.26'], 'res': '$198call_function.27'}), (200, {'retval': '$198call_function.27', 'castval': '$200return_value.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,853 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    areal = getattr(value=a, attr=real)      ['a', 'areal']
    aimag = getattr(value=a, attr=imag)      ['a', 'aimag']
    breal = getattr(value=b, attr=real)      ['b', 'breal']
    bimag = getattr(value=b, attr=imag)      ['b', 'bimag']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$28pred', 'bool28', 'breal']
    branch $28pred, 42, 30                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$32pred', 'bimag', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$34load_global.0']
    $const36.1 = const(str, complex division by zero) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(abs: <built-in function abs>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None) ['$42load_global.0', '$46call_function.2', 'breal']
    $48load_global.3 = global(abs: <built-in function abs>) ['$48load_global.3']
    $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None) ['$48load_global.3', '$52call_function.5', 'bimag']
    $54compare_op.6 = $46call_function.2 >= $52call_function.5 ['$46call_function.2', '$52call_function.5', '$54compare_op.6']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None) ['$54compare_op.6', '$56pred', 'bool56']
    branch $56pred, 58, 126                  ['$56pred']
label 58:
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$60pred', 'bool60', 'breal']
    branch $60pred, 72, 62                   ['$60pred']
label 62:
    $62load_global.0 = global(complex: <class 'complex'>) ['$62load_global.0']
    $64load_global.1 = global(NAN: nan)      ['$64load_global.1']
    $66load_global.2 = global(NAN: nan)      ['$66load_global.2']
    $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None) ['$62load_global.0', '$64load_global.1', '$66load_global.2', '$68call_function.3']
    $70return_value.4 = cast(value=$68call_function.3) ['$68call_function.3', '$70return_value.4']
    return $70return_value.4                 ['$70return_value.4']
label 72:
    ratio = bimag / breal                    ['bimag', 'breal', 'ratio']
    $86binary_multiply.6 = bimag * ratio     ['$86binary_multiply.6', 'bimag', 'ratio']
    denom = breal + $86binary_multiply.6     ['$86binary_multiply.6', 'breal', 'denom']
    $92load_global.8 = global(complex: <class 'complex'>) ['$92load_global.8']
    $100binary_multiply.12 = aimag * ratio   ['$100binary_multiply.12', 'aimag', 'ratio']
    $102binary_add.13 = areal + $100binary_multiply.12 ['$100binary_multiply.12', '$102binary_add.13', 'areal']
    $106binary_true_divide.15 = $102binary_add.13 / denom ['$102binary_add.13', '$106binary_true_divide.15', 'denom']
    $114binary_multiply.19 = areal * ratio   ['$114binary_multiply.19', 'areal', 'ratio']
    $116binary_subtract.20 = aimag - $114binary_multiply.19 ['$114binary_multiply.19', '$116binary_subtract.20', 'aimag']
    $120binary_true_divide.22 = $116binary_subtract.20 / denom ['$116binary_subtract.20', '$120binary_true_divide.22', 'denom']
    $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None) ['$106binary_true_divide.15', '$120binary_true_divide.22', '$122call_function.23', '$92load_global.8']
    $124return_value.24 = cast(value=$122call_function.23) ['$122call_function.23', '$124return_value.24']
    return $124return_value.24               ['$124return_value.24']
label 126:
    bool128 = global(bool: <class 'bool'>)   ['bool128']
    $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$128pred', 'bimag', 'bool128']
    branch $128pred, 140, 130                ['$128pred']
label 130:
    $130load_global.0 = global(complex: <class 'complex'>) ['$130load_global.0']
    $132load_global.1 = global(NAN: nan)     ['$132load_global.1']
    $134load_global.2 = global(NAN: nan)     ['$134load_global.2']
    $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None) ['$130load_global.0', '$132load_global.1', '$134load_global.2', '$136call_function.3']
    $138return_value.4 = cast(value=$136call_function.3) ['$136call_function.3', '$138return_value.4']
    return $138return_value.4                ['$138return_value.4']
label 140:
    ratio = breal / bimag                    ['bimag', 'breal', 'ratio']
    $152binary_multiply.5 = breal * ratio    ['$152binary_multiply.5', 'breal', 'ratio']
    denom = $152binary_multiply.5 + bimag    ['$152binary_multiply.5', 'bimag', 'denom']
    $160load_global.8 = global(complex: <class 'complex'>) ['$160load_global.8']
    $164load_attr.10 = getattr(value=a, attr=real) ['$164load_attr.10', 'a']
    $168binary_multiply.12 = $164load_attr.10 * ratio ['$164load_attr.10', '$168binary_multiply.12', 'ratio']
    $172load_attr.14 = getattr(value=a, attr=imag) ['$172load_attr.14', 'a']
    $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14 ['$168binary_multiply.12', '$172load_attr.14', '$174binary_add.15']
    $178binary_true_divide.17 = $174binary_add.15 / denom ['$174binary_add.15', '$178binary_true_divide.17', 'denom']
    $182load_attr.19 = getattr(value=a, attr=imag) ['$182load_attr.19', 'a']
    $186binary_multiply.21 = $182load_attr.19 * ratio ['$182load_attr.19', '$186binary_multiply.21', 'ratio']
    $190load_attr.23 = getattr(value=a, attr=real) ['$190load_attr.23', 'a']
    $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23 ['$186binary_multiply.21', '$190load_attr.23', '$192binary_subtract.24']
    $196binary_true_divide.26 = $192binary_subtract.24 / denom ['$192binary_subtract.24', '$196binary_true_divide.26', 'denom']
    $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None) ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26', '$198call_function.27']
    $200return_value.28 = cast(value=$198call_function.27) ['$198call_function.27', '$200return_value.28']
    return $200return_value.28               ['$200return_value.28']

DEBUG 2022-02-14 16:45:26,861 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,861 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,861 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,862 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,862 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,862 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,862 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:45:26,862 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:45:26,862 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,862 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,862 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:45:26,862 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:45:26,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,862 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,862 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,862 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:45:26,862 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:45:26,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,862 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:45:26,862 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:45:26,862 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,862 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:45:26,862 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:45:26,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,862 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,863 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,863 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,863 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,863 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:45:26,863 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,863 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,863 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:45:26,863 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:45:26,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,863 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,863 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,863 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:45:26,863 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:45:26,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,863 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,863 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,863 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,863 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,863 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:45:26,863 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:45:26,863 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:45:26,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,863 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,864 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,864 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,864 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,864 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,864 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:45:26,864 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,864 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,864 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:45:26,864 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,864 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,864 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:45:26,864 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:45:26,864 ==== SSA block analysis pass on 126
DEBUG 2022-02-14 16:45:26,864 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,864 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,864 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,864 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:45:26,864 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:45:26,864 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,864 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,864 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,864 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,864 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,865 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:45:26,865 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:45:26,865 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:45:26,865 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba9bb8e0>
DEBUG 2022-02-14 16:45:26,865 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:45:26,865 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:45:26,865 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,865 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,865 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,865 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:45:26,865 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,865 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:45:26,865 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,865 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,865 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:45:26,865 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,865 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:45:26,865 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,865 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,865 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:45:26,865 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:45:26,866 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71ba8bd700>],
             '$102binary_add.13': [<numba.core.ir.Assign object at 0x7f71ba8bd7c0>],
             '$106binary_true_divide.15': [<numba.core.ir.Assign object at 0x7f71ba8bd160>],
             '$114binary_multiply.19': [<numba.core.ir.Assign object at 0x7f71ba8bd610>],
             '$116binary_subtract.20': [<numba.core.ir.Assign object at 0x7f71ba849ee0>],
             '$120binary_true_divide.22': [<numba.core.ir.Assign object at 0x7f71ba849ac0>],
             '$122call_function.23': [<numba.core.ir.Assign object at 0x7f71ba8492e0>],
             '$124return_value.24': [<numba.core.ir.Assign object at 0x7f71ba849430>],
             '$128pred': [<numba.core.ir.Assign object at 0x7f71ba8bd370>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x7f71ba8c5e50>],
             '$132load_global.1': [<numba.core.ir.Assign object at 0x7f71ba8c5d60>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x7f71ba8c5640>],
             '$136call_function.3': [<numba.core.ir.Assign object at 0x7f71ba8c5580>],
             '$138return_value.4': [<numba.core.ir.Assign object at 0x7f71ba8c5490>],
             '$152binary_multiply.5': [<numba.core.ir.Assign object at 0x7f71ba851940>],
             '$160load_global.8': [<numba.core.ir.Assign object at 0x7f71ba851130>],
             '$164load_attr.10': [<numba.core.ir.Assign object at 0x7f71ba84c580>],
             '$168binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71ba84cf70>],
             '$172load_attr.14': [<numba.core.ir.Assign object at 0x7f71ba84cc40>],
             '$174binary_add.15': [<numba.core.ir.Assign object at 0x7f71ba84ca90>],
             '$178binary_true_divide.17': [<numba.core.ir.Assign object at 0x7f71ba84c760>],
             '$182load_attr.19': [<numba.core.ir.Assign object at 0x7f71ba9f4430>],
             '$186binary_multiply.21': [<numba.core.ir.Assign object at 0x7f71ba9f4910>],
             '$190load_attr.23': [<numba.core.ir.Assign object at 0x7f71ba9450a0>],
             '$192binary_subtract.24': [<numba.core.ir.Assign object at 0x7f71ba945220>],
             '$196binary_true_divide.26': [<numba.core.ir.Assign object at 0x7f71ba945a90>],
             '$198call_function.27': [<numba.core.ir.Assign object at 0x7f71ba945df0>],
             '$200return_value.28': [<numba.core.ir.Assign object at 0x7f71ba945d30>],
             '$28pred': [<numba.core.ir.Assign object at 0x7f71ba8aeeb0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7f71ba8ae670>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x7f71ba8ae760>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x7f71ba81bfd0>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x7f71ba81bbe0>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x7f71ba81b1f0>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x7f71ba81b2b0>],
             '$52call_function.5': [<numba.core.ir.Assign object at 0x7f71ba81b1c0>],
             '$54compare_op.6': [<numba.core.ir.Assign object at 0x7f71ba81bdf0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f71ba81b070>],
             '$60pred': [<numba.core.ir.Assign object at 0x7f71ba823c70>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x7f71ba823af0>],
             '$64load_global.1': [<numba.core.ir.Assign object at 0x7f71ba823910>],
             '$66load_global.2': [<numba.core.ir.Assign object at 0x7f71ba823f40>],
             '$68call_function.3': [<numba.core.ir.Assign object at 0x7f71ba823400>],
             '$70return_value.4': [<numba.core.ir.Assign object at 0x7f71ba823100>],
             '$86binary_multiply.6': [<numba.core.ir.Assign object at 0x7f71ba887190>],
             '$92load_global.8': [<numba.core.ir.Assign object at 0x7f71ba887580>],
             '$const36.1': [<numba.core.ir.Assign object at 0x7f71ba8ae880>],
             'a': [<numba.core.ir.Assign object at 0x7f71ba82ecd0>],
             'aimag': [<numba.core.ir.Assign object at 0x7f71ba7aa340>],
             'areal': [<numba.core.ir.Assign object at 0x7f71ba8aa6d0>],
             'b': [<numba.core.ir.Assign object at 0x7f71ba82e040>],
             'bimag': [<numba.core.ir.Assign object at 0x7f71ba8aed60>],
             'bool128': [<numba.core.ir.Assign object at 0x7f71ba8bda00>],
             'bool28': [<numba.core.ir.Assign object at 0x7f71ba8aec70>],
             'bool32': [<numba.core.ir.Assign object at 0x7f71ba8aedf0>],
             'bool56': [<numba.core.ir.Assign object at 0x7f71ba81b190>],
             'bool60': [<numba.core.ir.Assign object at 0x7f71ba823bb0>],
             'breal': [<numba.core.ir.Assign object at 0x7f71ba7aac40>],
             'denom': [<numba.core.ir.Assign object at 0x7f71ba887310>,
                       <numba.core.ir.Assign object at 0x7f71ba851730>],
             'ratio': [<numba.core.ir.Assign object at 0x7f71ba887ac0>,
                       <numba.core.ir.Assign object at 0x7f71ba851e80>]})
DEBUG 2022-02-14 16:45:26,866 SSA violators {'ratio', 'denom'}
DEBUG 2022-02-14 16:45:26,867 Fix SSA violator on var ratio
DEBUG 2022-02-14 16:45:26,867 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,867 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,867 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,867 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,867 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,867 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:45:26,867 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:45:26,867 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,867 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,867 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:45:26,867 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:45:26,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,867 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,867 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,867 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:45:26,867 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,867 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:45:26,867 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:45:26,867 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,867 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:45:26,867 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:26,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,868 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,868 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,868 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,868 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,868 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:45:26,868 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,868 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,868 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:45:26,868 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:26,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,868 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,868 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,868 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:45:26,868 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,868 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,868 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,868 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,868 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,868 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:45:26,868 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:45:26,868 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,869 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,869 first assign: ratio
DEBUG 2022-02-14 16:45:26,869 replaced with: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,869 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,869 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,869 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,869 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,869 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:45:26,869 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,869 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,869 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:45:26,869 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,869 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,869 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:45:26,869 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:45:26,869 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:45:26,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,869 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,869 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,869 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:45:26,869 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:26,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,870 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,870 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,870 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,870 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,870 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:45:26,870 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:45:26,870 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,870 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,870 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:45:26,870 replaced with: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:45:26,870 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:45:26,870 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,870 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,870 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,870 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:45:26,870 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,870 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:45:26,870 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,870 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,870 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:45:26,870 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,870 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:45:26,870 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,870 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,871 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:45:26,871 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:45:26,871 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f71ba9458e0>],
             140: [<numba.core.ir.Assign object at 0x7f71ba9f4be0>]})
DEBUG 2022-02-14 16:45:26,871 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,871 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,871 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,871 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,871 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,871 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:45:26,871 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:45:26,871 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,871 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,871 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:45:26,871 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:45:26,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,871 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,871 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,871 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:45:26,871 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,871 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:45:26,872 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,872 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:45:26,872 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:26,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,872 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,872 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,872 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:45:26,872 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,872 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:45:26,872 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:26,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,872 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,872 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:45:26,872 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,872 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,872 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,873 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,873 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,873 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:45:26,873 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:45:26,873 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,873 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,873 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,873 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,873 find_def var='ratio' stmt=$86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,873 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,873 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,873 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,873 find_def var='ratio' stmt=$100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,873 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:45:26,873 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,873 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,873 find_def var='ratio' stmt=$114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,873 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:45:26,873 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,873 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,873 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:45:26,874 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:45:26,874 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:45:26,874 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,874 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,874 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,874 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:45:26,874 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:26,874 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,874 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,874 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,874 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,874 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,874 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:45:26,874 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:45:26,874 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,874 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9bb0a0>
DEBUG 2022-02-14 16:45:26,874 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:45:26,874 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:45:26,874 find_def var='ratio' stmt=$152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:45:26,874 replaced with: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:45:26,874 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,874 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,875 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,875 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:45:26,875 find_def var='ratio' stmt=$168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:45:26,875 replaced with: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:45:26,875 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,875 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:45:26,875 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,875 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,875 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:45:26,875 find_def var='ratio' stmt=$186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:45:26,875 replaced with: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:45:26,875 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,875 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:45:26,875 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,875 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,875 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:45:26,875 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:45:26,875 Fix SSA violator on var denom
DEBUG 2022-02-14 16:45:26,875 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,875 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,876 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,876 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,876 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,876 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,876 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:45:26,876 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:45:26,876 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,876 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,876 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:45:26,876 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:45:26,876 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,876 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,876 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,876 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:45:26,876 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,876 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,876 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:45:26,876 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:45:26,876 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,876 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:45:26,876 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:26,876 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,876 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,876 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,876 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,877 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,877 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:45:26,877 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,877 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,877 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:45:26,877 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:26,877 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,877 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,877 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,877 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:45:26,877 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,877 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,877 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,877 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,877 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,877 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,877 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:45:26,877 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:45:26,877 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,877 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,877 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,877 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,877 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,877 first assign: denom
DEBUG 2022-02-14 16:45:26,878 replaced with: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,878 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,878 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,878 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:45:26,878 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,878 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,878 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:45:26,878 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,878 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,878 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:45:26,878 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:45:26,878 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:45:26,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,878 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,878 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,878 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:45:26,878 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:26,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,878 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,878 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,878 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,878 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,878 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:45:26,878 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:45:26,879 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba823220>
DEBUG 2022-02-14 16:45:26,879 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:45:26,879 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:45:26,879 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,879 replaced with: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,879 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,879 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,879 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:45:26,879 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,879 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:45:26,879 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,879 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,879 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:45:26,879 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,879 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:45:26,879 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,879 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,879 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:45:26,879 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:45:26,879 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f71ba945550>],
             140: [<numba.core.ir.Assign object at 0x7f71ba82e5b0>]})
DEBUG 2022-02-14 16:45:26,879 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:26,880 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,880 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,880 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,880 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,880 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,880 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:45:26,880 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:45:26,880 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,880 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,880 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:45:26,880 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:45:26,880 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,880 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,880 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,880 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:45:26,880 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:26,880 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,880 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:45:26,880 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:45:26,880 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,880 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:45:26,880 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:26,880 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,880 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,880 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,880 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:45:26,881 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,881 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:45:26,881 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,881 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,881 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:45:26,881 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:26,881 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,881 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,881 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,881 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:45:26,881 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:26,881 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,881 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,881 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,881 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,881 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,881 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:45:26,881 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:45:26,881 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:26,881 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,881 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:45:26,881 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:45:26,881 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:45:26,881 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,881 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:45:26,882 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:45:26,882 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,882 find_def var='denom' stmt=$106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:45:26,882 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:45:26,882 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:45:26,882 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,882 find_def var='denom' stmt=$120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:45:26,882 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,882 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:45:26,882 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:45:26,882 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:45:26,882 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,882 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,882 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,882 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:45:26,882 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:26,882 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,882 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,882 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,882 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:45:26,882 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,882 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:45:26,882 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:45:26,883 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:26,883 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba9f4ac0>
DEBUG 2022-02-14 16:45:26,883 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:45:26,883 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:45:26,883 on stmt: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:45:26,883 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:45:26,883 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,883 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:45:26,883 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,883 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:45:26,883 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,883 find_def var='denom' stmt=$178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:45:26,883 replaced with: $178binary_true_divide.17 = $174binary_add.15 / denom.1
DEBUG 2022-02-14 16:45:26,883 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:45:26,883 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:45:26,883 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:45:26,883 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:45:26,883 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,883 find_def var='denom' stmt=$196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:45:26,883 replaced with: $196binary_true_divide.26 = $192binary_subtract.24 / denom.1
DEBUG 2022-02-14 16:45:26,884 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,884 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:45:26,884 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:45:26,944 bytecode dump:
>          0	NOP(arg=None, lineno=509)
           2	LOAD_FAST(arg=0, lineno=509)
           4	LOAD_ATTR(arg=0, lineno=509)
           6	UNPACK_SEQUENCE(arg=1, lineno=509)
           8	STORE_FAST(arg=2, lineno=509)
          10	LOAD_FAST(arg=1, lineno=510)
          12	LOAD_ATTR(arg=0, lineno=510)
          14	UNPACK_SEQUENCE(arg=1, lineno=510)
          16	STORE_FAST(arg=3, lineno=510)
          18	LOAD_FAST(arg=2, lineno=511)
          20	LOAD_FAST(arg=3, lineno=511)
          22	COMPARE_OP(arg=3, lineno=511)
          24	POP_JUMP_IF_FALSE(arg=34, lineno=511)
          26	LOAD_GLOBAL(arg=1, lineno=512)
          28	LOAD_CONST(arg=1, lineno=512)
          30	CALL_FUNCTION(arg=1, lineno=512)
          32	RAISE_VARARGS(arg=1, lineno=512)
>         34	LOAD_CONST(arg=0, lineno=512)
          36	RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:45:26,944 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,944 stack: []
DEBUG 2022-02-14 16:45:26,944 dispatch pc=0, inst=NOP(arg=None, lineno=509)
DEBUG 2022-02-14 16:45:26,944 stack []
DEBUG 2022-02-14 16:45:26,944 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=509)
DEBUG 2022-02-14 16:45:26,944 stack []
DEBUG 2022-02-14 16:45:26,944 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=509)
DEBUG 2022-02-14 16:45:26,944 stack ['$a2.0']
DEBUG 2022-02-14 16:45:26,944 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=1, lineno=509)
DEBUG 2022-02-14 16:45:26,945 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=509)
DEBUG 2022-02-14 16:45:26,945 stack ['$6unpack_sequence.2']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=510)
DEBUG 2022-02-14 16:45:26,945 stack []
DEBUG 2022-02-14 16:45:26,945 dispatch pc=12, inst=LOAD_ATTR(arg=0, lineno=510)
DEBUG 2022-02-14 16:45:26,945 stack ['$b10.4']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=14, inst=UNPACK_SEQUENCE(arg=1, lineno=510)
DEBUG 2022-02-14 16:45:26,945 stack ['$12load_attr.5']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=510)
DEBUG 2022-02-14 16:45:26,945 stack ['$14unpack_sequence.6']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=511)
DEBUG 2022-02-14 16:45:26,945 stack []
DEBUG 2022-02-14 16:45:26,945 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=511)
DEBUG 2022-02-14 16:45:26,945 stack ['$m18.8']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=22, inst=COMPARE_OP(arg=3, lineno=511)
DEBUG 2022-02-14 16:45:26,945 stack ['$m18.8', '$n20.9']
DEBUG 2022-02-14 16:45:26,945 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=34, lineno=511)
DEBUG 2022-02-14 16:45:26,945 stack ['$22compare_op.10']
DEBUG 2022-02-14 16:45:26,945 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,945 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,945 stack: []
DEBUG 2022-02-14 16:45:26,945 dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=512)
DEBUG 2022-02-14 16:45:26,945 stack []
DEBUG 2022-02-14 16:45:26,945 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=512)
DEBUG 2022-02-14 16:45:26,945 stack ['$26load_global.0']
DEBUG 2022-02-14 16:45:26,946 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=512)
DEBUG 2022-02-14 16:45:26,946 stack ['$26load_global.0', '$const28.1']
DEBUG 2022-02-14 16:45:26,946 dispatch pc=32, inst=RAISE_VARARGS(arg=1, lineno=512)
DEBUG 2022-02-14 16:45:26,946 stack ['$30call_function.2']
DEBUG 2022-02-14 16:45:26,946 end state. edges=[]
DEBUG 2022-02-14 16:45:26,946 pending: deque([State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,946 stack: []
DEBUG 2022-02-14 16:45:26,946 dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=512)
DEBUG 2022-02-14 16:45:26,946 stack []
DEBUG 2022-02-14 16:45:26,946 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:45:26,946 stack ['$const34.0']
DEBUG 2022-02-14 16:45:26,946 end state. edges=[]
DEBUG 2022-02-14 16:45:26,946 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,946 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,946 defmap: {}
DEBUG 2022-02-14 16:45:26,946 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,946 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,946 keep phismap: {}
DEBUG 2022-02-14 16:45:26,946 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,946 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,947 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2'], 'tupleobj': '$6unpack_sequence.3'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'res': '$b10.4'}), (12, {'item': '$b10.4', 'res': '$12load_attr.5'}), (14, {'iterable': '$12load_attr.5', 'stores': ['$14unpack_sequence.6'], 'tupleobj': '$14unpack_sequence.7'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'res': '$m18.8'}), (20, {'res': '$n20.9'}), (22, {'lhs': '$m18.8', 'rhs': '$n20.9', 'res': '$22compare_op.10'}), (24, {'pred': '$22compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 34: ()})
DEBUG 2022-02-14 16:45:26,947 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_global.0'}), (28, {'res': '$const28.1'}), (30, {'func': '$26load_global.0', 'args': ['$const28.1'], 'res': '$30call_function.2'}), (32, {'exc': '$30call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,947 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,948 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1) ['$4load_attr.1', '$6unpack_sequence.3']
    m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', 'm']
    $12load_attr.5 = getattr(value=b, attr=shape) ['$12load_attr.5', 'b']
    $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1) ['$12load_attr.5', '$14unpack_sequence.7']
    n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', 'n']
    $22compare_op.10 = m != n                ['$22compare_op.10', 'm', 'n']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None) ['$22compare_op.10', '$24pred', 'bool24']
    branch $24pred, 26, 34                   ['$24pred']
label 26:
    $26load_global.0 = global(ValueError: <class 'ValueError'>) ['$26load_global.0']
    $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector)) ['$const28.1']
    $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None) ['$26load_global.0', '$30call_function.2', '$const28.1']
    raise $30call_function.2                 ['$30call_function.2']
label 34:
    $const34.0 = const(NoneType, None)       ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:45:26,951 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba81dca0>
DEBUG 2022-02-14 16:45:26,951 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:26,951 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:26,951 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:45:26,951 on stmt: $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1)
DEBUG 2022-02-14 16:45:26,951 on stmt: m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,951 on stmt: $12load_attr.5 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:45:26,951 on stmt: $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1)
DEBUG 2022-02-14 16:45:26,951 on stmt: n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:26,951 on stmt: $22compare_op.10 = m != n
DEBUG 2022-02-14 16:45:26,951 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,951 on stmt: $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,951 on stmt: branch $24pred, 26, 34
DEBUG 2022-02-14 16:45:26,951 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:26,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba81dca0>
DEBUG 2022-02-14 16:45:26,951 on stmt: $26load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:45:26,951 on stmt: $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector))
DEBUG 2022-02-14 16:45:26,951 on stmt: $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,951 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (vector * vector)')
DEBUG 2022-02-14 16:45:26,951 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:45:26,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba81dca0>
DEBUG 2022-02-14 16:45:26,951 on stmt: $const34.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,952 on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG 2022-02-14 16:45:26,952 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:45:26,952 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7f71ba905730>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7f71ba8fab20>],
             '$22compare_op.10': [<numba.core.ir.Assign object at 0x7f71ba81db80>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f71ba81de50>],
             '$26load_global.0': [<numba.core.ir.Assign object at 0x7f71ba81da30>],
             '$30call_function.2': [<numba.core.ir.Assign object at 0x7f71ba81d430>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7f71ba945520>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f71ba5cb970>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f71ba5cbb20>],
             '$const28.1': [<numba.core.ir.Assign object at 0x7f71ba81d730>],
             '$const34.0': [<numba.core.ir.Assign object at 0x7f71ba945100>],
             'a': [<numba.core.ir.Assign object at 0x7f71ba851d00>],
             'b': [<numba.core.ir.Assign object at 0x7f71ba5cb6d0>],
             'bool24': [<numba.core.ir.Assign object at 0x7f71ba81dfd0>],
             'm': [<numba.core.ir.Assign object at 0x7f71ba905d30>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba81d640>]})
DEBUG 2022-02-14 16:45:26,952 SSA violators set()
DEBUG 2022-02-14 16:45:26,969 bytecode dump:
>          0	NOP(arg=None, lineno=309)
           2	LOAD_FAST(arg=0, lineno=309)
           4	LOAD_DEREF(arg=0, lineno=309)
           6	COMPARE_OP(arg=4, lineno=309)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=309)
          10	LOAD_GLOBAL(arg=0, lineno=310)
          12	LOAD_CONST(arg=1, lineno=310)
          14	CALL_FUNCTION(arg=1, lineno=310)
          16	RAISE_VARARGS(arg=1, lineno=310)
>         18	LOAD_CONST(arg=0, lineno=310)
          20	RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:45:26,969 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,969 stack: []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=0, inst=NOP(arg=None, lineno=309)
DEBUG 2022-02-14 16:45:26,970 stack []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=309)
DEBUG 2022-02-14 16:45:26,970 stack []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=309)
DEBUG 2022-02-14 16:45:26,970 stack ['$n2.0']
DEBUG 2022-02-14 16:45:26,970 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=309)
DEBUG 2022-02-14 16:45:26,970 stack ['$n2.0', '$4load_deref.1']
DEBUG 2022-02-14 16:45:26,970 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=309)
DEBUG 2022-02-14 16:45:26,970 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:26,970 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,970 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,970 stack: []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=310)
DEBUG 2022-02-14 16:45:26,970 stack []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=310)
DEBUG 2022-02-14 16:45:26,970 stack ['$10load_global.0']
DEBUG 2022-02-14 16:45:26,970 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=310)
DEBUG 2022-02-14 16:45:26,970 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:45:26,970 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=310)
DEBUG 2022-02-14 16:45:26,970 stack ['$14call_function.2']
DEBUG 2022-02-14 16:45:26,970 end state. edges=[]
DEBUG 2022-02-14 16:45:26,970 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,970 stack: []
DEBUG 2022-02-14 16:45:26,970 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=310)
DEBUG 2022-02-14 16:45:26,971 stack []
DEBUG 2022-02-14 16:45:26,971 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:45:26,971 stack ['$const18.0']
DEBUG 2022-02-14 16:45:26,971 end state. edges=[]
DEBUG 2022-02-14 16:45:26,971 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:26,971 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:26,971 defmap: {}
DEBUG 2022-02-14 16:45:26,971 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,971 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:26,971 keep phismap: {}
DEBUG 2022-02-14 16:45:26,971 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:26,971 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:26,971 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$4load_deref.1'}), (6, {'lhs': '$n2.0', 'rhs': '$4load_deref.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:45:26,971 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,971 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:26,972 label 0:
    n = arg(0, name=n)                       ['n']
    $4load_deref.1 = freevar(_maxint: 2147483647) ['$4load_deref.1']
    $6compare_op.2 = n > $4load_deref.1      ['$4load_deref.1', '$6compare_op.2', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$10load_global.0']
    $const12.1 = const(str, array size too large to fit in C int) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:45:26,974 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:26,974 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba87eb20>
DEBUG 2022-02-14 16:45:26,974 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:45:26,974 on stmt: $4load_deref.1 = freevar(_maxint: 2147483647)
DEBUG 2022-02-14 16:45:26,974 on stmt: $6compare_op.2 = n > $4load_deref.1
DEBUG 2022-02-14 16:45:26,974 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:26,974 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,974 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:45:26,974 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:45:26,974 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba87eb20>
DEBUG 2022-02-14 16:45:26,974 on stmt: $10load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:26,974 on stmt: $const12.1 = const(str, array size too large to fit in C int)
DEBUG 2022-02-14 16:45:26,974 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:26,974 on stmt: <static> raise <class 'OverflowError'>('array size too large to fit in C int')
DEBUG 2022-02-14 16:45:26,974 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:45:26,974 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba87eb20>
DEBUG 2022-02-14 16:45:26,974 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:26,974 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:45:26,974 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:45:26,974 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7f71ba87ae80>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7f71ba875220>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7f71ba875640>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x7f71ba87a820>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71ba87a9d0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f71ba87ac40>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f71ba875040>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7f71ba8754c0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f71ba87ab20>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba87a0d0>]})
DEBUG 2022-02-14 16:45:26,975 SSA violators set()
DEBUG 2022-02-14 16:45:26,996 bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_FAST(arg=0, lineno=486)
           4	LOAD_ATTR(arg=0, lineno=486)
           6	UNPACK_SEQUENCE(arg=2, lineno=486)
           8	STORE_FAST(arg=2, lineno=486)
          10	STORE_FAST(arg=3, lineno=486)
          12	LOAD_FAST(arg=1, lineno=487)
          14	LOAD_ATTR(arg=0, lineno=487)
          16	UNPACK_SEQUENCE(arg=1, lineno=487)
          18	STORE_FAST(arg=4, lineno=487)
          20	LOAD_FAST(arg=3, lineno=488)
          22	LOAD_CONST(arg=1, lineno=488)
          24	COMPARE_OP(arg=2, lineno=488)
          26	POP_JUMP_IF_FALSE(arg=44, lineno=488)
          28	LOAD_GLOBAL(arg=1, lineno=489)
          30	LOAD_METHOD(arg=2, lineno=489)
          32	LOAD_FAST(arg=2, lineno=489)
          34	BUILD_TUPLE(arg=1, lineno=489)
          36	LOAD_FAST(arg=0, lineno=489)
          38	LOAD_ATTR(arg=3, lineno=489)
          40	CALL_METHOD(arg=2, lineno=489)
          42	RETURN_VALUE(arg=None, lineno=489)
>         44	LOAD_GLOBAL(arg=1, lineno=490)
          46	LOAD_METHOD(arg=4, lineno=490)
          48	LOAD_FAST(arg=2, lineno=490)
          50	BUILD_TUPLE(arg=1, lineno=490)
          52	LOAD_FAST(arg=0, lineno=490)
          54	LOAD_ATTR(arg=3, lineno=490)
          56	CALL_METHOD(arg=2, lineno=490)
          58	STORE_FAST(arg=5, lineno=490)
          60	LOAD_GLOBAL(arg=1, lineno=491)
          62	LOAD_METHOD(arg=5, lineno=491)
          64	LOAD_FAST(arg=0, lineno=491)
          66	LOAD_FAST(arg=1, lineno=491)
          68	LOAD_FAST(arg=5, lineno=491)
          70	CALL_METHOD(arg=3, lineno=491)
          72	RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:45:26,996 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,996 stack: []
DEBUG 2022-02-14 16:45:26,996 dispatch pc=0, inst=NOP(arg=None, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack []
DEBUG 2022-02-14 16:45:26,997 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack []
DEBUG 2022-02-14 16:45:26,997 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack ['$a2.0']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=10, inst=STORE_FAST(arg=3, lineno=486)
DEBUG 2022-02-14 16:45:26,997 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=487)
DEBUG 2022-02-14 16:45:26,997 stack []
DEBUG 2022-02-14 16:45:26,997 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=487)
DEBUG 2022-02-14 16:45:26,997 stack ['$b12.5']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=487)
DEBUG 2022-02-14 16:45:26,997 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=487)
DEBUG 2022-02-14 16:45:26,997 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=488)
DEBUG 2022-02-14 16:45:26,997 stack []
DEBUG 2022-02-14 16:45:26,997 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=488)
DEBUG 2022-02-14 16:45:26,997 stack ['$n20.9']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=24, inst=COMPARE_OP(arg=2, lineno=488)
DEBUG 2022-02-14 16:45:26,997 stack ['$n20.9', '$const22.10']
DEBUG 2022-02-14 16:45:26,997 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=44, lineno=488)
DEBUG 2022-02-14 16:45:26,997 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:45:26,998 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:26,998 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,998 stack: []
DEBUG 2022-02-14 16:45:26,998 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack []
DEBUG 2022-02-14 16:45:26,998 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$28load_global.0']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$30load_method.1']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=34, inst=BUILD_TUPLE(arg=1, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$30load_method.1', '$m32.2']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$30load_method.1', '$34build_tuple.3']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$30load_method.1', '$34build_tuple.3', '$a36.4']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=40, inst=CALL_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5']
DEBUG 2022-02-14 16:45:26,998 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=489)
DEBUG 2022-02-14 16:45:26,998 stack ['$40call_method.6']
DEBUG 2022-02-14 16:45:26,998 end state. edges=[]
DEBUG 2022-02-14 16:45:26,998 pending: deque([State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:45:26,998 stack: []
DEBUG 2022-02-14 16:45:26,998 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=490)
DEBUG 2022-02-14 16:45:26,998 stack []
DEBUG 2022-02-14 16:45:26,998 dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=490)
DEBUG 2022-02-14 16:45:26,998 stack ['$44load_global.0']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$46load_method.1']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=50, inst=BUILD_TUPLE(arg=1, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$46load_method.1', '$m48.2']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$46load_method.1', '$50build_tuple.3']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$46load_method.1', '$50build_tuple.3', '$a52.4']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=58, inst=STORE_FAST(arg=5, lineno=490)
DEBUG 2022-02-14 16:45:26,999 stack ['$56call_method.6']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=60, inst=LOAD_GLOBAL(arg=1, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack []
DEBUG 2022-02-14 16:45:26,999 dispatch pc=62, inst=LOAD_METHOD(arg=5, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$60load_global.7']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$62load_method.8']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$62load_method.8', '$a64.9']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$62load_method.8', '$a64.9', '$b66.10']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=70, inst=CALL_METHOD(arg=3, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$62load_method.8', '$a64.9', '$b66.10', '$out68.11']
DEBUG 2022-02-14 16:45:26,999 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:45:26,999 stack ['$70call_method.12']
DEBUG 2022-02-14 16:45:26,999 end state. edges=[]
DEBUG 2022-02-14 16:45:27,000 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,000 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,000 defmap: {}
DEBUG 2022-02-14 16:45:27,000 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,000 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,000 keep phismap: {}
DEBUG 2022-02-14 16:45:27,000 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:27,000 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,000 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$const22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 44: ()})
DEBUG 2022-02-14 16:45:27,000 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'item': '$28load_global.0', 'res': '$30load_method.1'}), (32, {'res': '$m32.2'}), (34, {'items': ['$m32.2'], 'res': '$34build_tuple.3'}), (36, {'res': '$a36.4'}), (38, {'item': '$a36.4', 'res': '$38load_attr.5'}), (40, {'func': '$30load_method.1', 'args': ['$34build_tuple.3', '$38load_attr.5'], 'res': '$40call_method.6'}), (42, {'retval': '$40call_method.6', 'castval': '$42return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,000 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$m48.2'}), (50, {'items': ['$m48.2'], 'res': '$50build_tuple.3'}), (52, {'res': '$a52.4'}), (54, {'item': '$a52.4', 'res': '$54load_attr.5'}), (56, {'func': '$46load_method.1', 'args': ['$50build_tuple.3', '$54load_attr.5'], 'res': '$56call_method.6'}), (58, {'value': '$56call_method.6'}), (60, {'res': '$60load_global.7'}), (62, {'item': '$60load_global.7', 'res': '$62load_method.8'}), (64, {'res': '$a64.9'}), (66, {'res': '$b66.10'}), (68, {'res': '$out68.11'}), (70, {'func': '$62load_method.8', 'args': ['$a64.9', '$b66.10', '$out68.11'], 'res': '$70call_method.12'}), (72, {'retval': '$70call_method.12', 'castval': '$72return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,001 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    n = $6unpack_sequence.3                  ['$6unpack_sequence.3', 'n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', '_n']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24compare_op.11 = n == $const22.10      ['$24compare_op.11', '$const22.10', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 44                   ['$26pred']
label 28:
    $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.0']
    $30load_method.1 = getattr(value=$28load_global.0, attr=zeros) ['$28load_global.0', '$30load_method.1']
    $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$34build_tuple.3', 'm']
    $38load_attr.5 = getattr(value=a, attr=dtype) ['$38load_attr.5', 'a']
    $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None) ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5', '$40call_method.6']
    $42return_value.7 = cast(value=$40call_method.6) ['$40call_method.6', '$42return_value.7']
    return $42return_value.7                 ['$42return_value.7']
label 44:
    $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=empty) ['$44load_global.0', '$46load_method.1']
    $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$50build_tuple.3', 'm']
    $54load_attr.5 = getattr(value=a, attr=dtype) ['$54load_attr.5', 'a']
    out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None) ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5', 'out']
    $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$60load_global.7']
    $62load_method.8 = getattr(value=$60load_global.7, attr=dot) ['$60load_global.7', '$62load_method.8']
    $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None) ['$62load_method.8', '$70call_method.12', 'a', 'b', 'out']
    $72return_value.13 = cast(value=$70call_method.12) ['$70call_method.12', '$72return_value.13']
    return $72return_value.13                ['$72return_value.13']

DEBUG 2022-02-14 16:45:27,004 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,004 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba529880>
DEBUG 2022-02-14 16:45:27,004 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:27,004 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:27,004 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:45:27,004 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:45:27,004 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,004 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,004 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:45:27,004 on stmt: n = $6unpack_sequence.3
DEBUG 2022-02-14 16:45:27,004 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:45:27,004 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:45:27,004 on stmt: _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,004 on stmt: $const22.10 = const(int, 0)
DEBUG 2022-02-14 16:45:27,005 on stmt: $24compare_op.11 = n == $const22.10
DEBUG 2022-02-14 16:45:27,005 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,005 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,005 on stmt: branch $26pred, 28, 44
DEBUG 2022-02-14 16:45:27,005 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:45:27,005 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba529880>
DEBUG 2022-02-14 16:45:27,005 on stmt: $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,005 on stmt: $30load_method.1 = getattr(value=$28load_global.0, attr=zeros)
DEBUG 2022-02-14 16:45:27,005 on stmt: $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:45:27,005 on stmt: $38load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:45:27,005 on stmt: $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,005 on stmt: $42return_value.7 = cast(value=$40call_method.6)
DEBUG 2022-02-14 16:45:27,005 on stmt: return $42return_value.7
DEBUG 2022-02-14 16:45:27,005 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:45:27,005 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba529880>
DEBUG 2022-02-14 16:45:27,005 on stmt: $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,005 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=empty)
DEBUG 2022-02-14 16:45:27,005 on stmt: $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:45:27,005 on stmt: $54load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:45:27,005 on stmt: out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,005 on stmt: $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,005 on stmt: $62load_method.8 = getattr(value=$60load_global.7, attr=dot)
DEBUG 2022-02-14 16:45:27,005 on stmt: $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,006 on stmt: $72return_value.13 = cast(value=$70call_method.12)
DEBUG 2022-02-14 16:45:27,006 on stmt: return $72return_value.13
DEBUG 2022-02-14 16:45:27,006 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7f71ba531fa0>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7f71ba536190>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7f71ba5367f0>],
             '$26pred': [<numba.core.ir.Assign object at 0x7f71ba536a60>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7f71ba536b80>],
             '$30load_method.1': [<numba.core.ir.Assign object at 0x7f71ba536d00>],
             '$34build_tuple.3': [<numba.core.ir.Assign object at 0x7f71ba536fd0>],
             '$38load_attr.5': [<numba.core.ir.Assign object at 0x7f71ba538280>],
             '$40call_method.6': [<numba.core.ir.Assign object at 0x7f71ba538490>],
             '$42return_value.7': [<numba.core.ir.Assign object at 0x7f71ba538580>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f71ba538760>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x7f71ba5388e0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f71ba531700>],
             '$50build_tuple.3': [<numba.core.ir.Assign object at 0x7f71ba538bb0>],
             '$54load_attr.5': [<numba.core.ir.Assign object at 0x7f71ba5313a0>],
             '$60load_global.7': [<numba.core.ir.Assign object at 0x7f71ba529340>],
             '$62load_method.8': [<numba.core.ir.Assign object at 0x7f71ba529730>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f71ba531a00>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f71ba531b20>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f71ba5318b0>],
             '$70call_method.12': [<numba.core.ir.Assign object at 0x7f71ba53b0d0>],
             '$72return_value.13': [<numba.core.ir.Assign object at 0x7f71ba53b1c0>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7f71ba536640>],
             '_n': [<numba.core.ir.Assign object at 0x7f71ba5362e0>],
             'a': [<numba.core.ir.Assign object at 0x7f71ba5295e0>],
             'b': [<numba.core.ir.Assign object at 0x7f71ba531460>],
             'bool26': [<numba.core.ir.Assign object at 0x7f71ba536940>],
             'm': [<numba.core.ir.Assign object at 0x7f71ba531be0>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba531d00>],
             'out': [<numba.core.ir.Assign object at 0x7f71ba531190>]})
DEBUG 2022-02-14 16:45:27,006 SSA violators set()
DEBUG 2022-02-14 16:45:27,010 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,010 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,010 stack: []
DEBUG 2022-02-14 16:45:27,010 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,010 stack []
DEBUG 2022-02-14 16:45:27,010 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,010 stack []
DEBUG 2022-02-14 16:45:27,010 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,010 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:27,010 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:27,010 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:27,011 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:27,011 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:27,011 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,011 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:27,011 end state. edges=[]
DEBUG 2022-02-14 16:45:27,011 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,011 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,011 defmap: {}
DEBUG 2022-02-14 16:45:27,011 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,011 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,011 keep phismap: {}
DEBUG 2022-02-14 16:45:27,011 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:27,011 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,011 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,011 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:27,013 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,013 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba545b80>
DEBUG 2022-02-14 16:45:27,013 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:27,013 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:27,013 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:27,013 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,013 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:27,013 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:27,013 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba54d100>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba545400>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba545fa0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba545250>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba545430>]})
DEBUG 2022-02-14 16:45:27,013 SSA violators set()
DEBUG 2022-02-14 16:45:27,041 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,041 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,041 stack: []
DEBUG 2022-02-14 16:45:27,041 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,041 stack []
DEBUG 2022-02-14 16:45:27,041 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,041 stack []
DEBUG 2022-02-14 16:45:27,041 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,041 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:27,041 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:27,041 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:27,041 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:27,041 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:27,042 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,042 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:27,042 end state. edges=[]
DEBUG 2022-02-14 16:45:27,042 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,042 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,042 defmap: {}
DEBUG 2022-02-14 16:45:27,042 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,042 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,042 keep phismap: {}
DEBUG 2022-02-14 16:45:27,042 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:27,042 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,042 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,042 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:27,044 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,044 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4f7910>
DEBUG 2022-02-14 16:45:27,044 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:27,044 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:27,044 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:27,044 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,044 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:27,044 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:27,044 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba4f7f70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba4f7a30>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba4f7e50>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba4f71f0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba4f70d0>]})
DEBUG 2022-02-14 16:45:27,044 SSA violators set()
DEBUG 2022-02-14 16:45:27,072 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,072 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,072 stack: []
DEBUG 2022-02-14 16:45:27,072 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack []
DEBUG 2022-02-14 16:45:27,072 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack []
DEBUG 2022-02-14 16:45:27,072 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:27,072 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:27,072 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:27,072 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
DEBUG 2022-02-14 16:45:27,072 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:27,072 stack ['$10call_function.4']
DEBUG 2022-02-14 16:45:27,072 end state. edges=[]
DEBUG 2022-02-14 16:45:27,073 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,073 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,073 defmap: {}
DEBUG 2022-02-14 16:45:27,073 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,073 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,073 keep phismap: {}
DEBUG 2022-02-14 16:45:27,073 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:27,073 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,073 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,073 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:45:27,074 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,074 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4bf850>
DEBUG 2022-02-14 16:45:27,075 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:27,075 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:27,075 on stmt: tmp2 = arg(2, name=tmp2)
DEBUG 2022-02-14 16:45:27,075 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:27,075 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,075 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:45:27,075 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:45:27,075 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f71ba4c5700>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f71ba4c5820>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba4c51c0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba4bf550>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba4bf070>],
             'tmp2': [<numba.core.ir.Assign object at 0x7f71ba4c5040>]})
DEBUG 2022-02-14 16:45:27,075 SSA violators set()
DEBUG 2022-02-14 16:45:27,081 bytecode dump:
>          0	NOP(arg=None, lineno=571)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	UNPACK_SEQUENCE(arg=2, lineno=571)
           8	STORE_FAST(arg=3, lineno=571)
          10	STORE_FAST(arg=4, lineno=571)
          12	LOAD_FAST(arg=1, lineno=572)
          14	LOAD_ATTR(arg=0, lineno=572)
          16	UNPACK_SEQUENCE(arg=1, lineno=572)
          18	STORE_FAST(arg=5, lineno=572)
          20	LOAD_FAST(arg=5, lineno=573)
          22	LOAD_FAST(arg=4, lineno=573)
          24	COMPARE_OP(arg=3, lineno=573)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=573)
          28	LOAD_GLOBAL(arg=1, lineno=574)
          30	LOAD_CONST(arg=1, lineno=574)
          32	CALL_FUNCTION(arg=1, lineno=574)
          34	RAISE_VARARGS(arg=1, lineno=574)
>         36	LOAD_FAST(arg=2, lineno=576)
          38	LOAD_ATTR(arg=0, lineno=576)
          40	LOAD_FAST(arg=3, lineno=576)
          42	BUILD_TUPLE(arg=1, lineno=576)
          44	COMPARE_OP(arg=3, lineno=576)
          46	POP_JUMP_IF_FALSE(arg=56, lineno=576)
          48	LOAD_GLOBAL(arg=1, lineno=577)
          50	LOAD_CONST(arg=2, lineno=577)
          52	CALL_FUNCTION(arg=1, lineno=577)
          54	RAISE_VARARGS(arg=1, lineno=577)
>         56	LOAD_CONST(arg=0, lineno=577)
          58	RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:45:27,081 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,081 stack: []
DEBUG 2022-02-14 16:45:27,081 dispatch pc=0, inst=NOP(arg=None, lineno=571)
DEBUG 2022-02-14 16:45:27,081 stack []
DEBUG 2022-02-14 16:45:27,081 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
DEBUG 2022-02-14 16:45:27,081 stack []
DEBUG 2022-02-14 16:45:27,081 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
DEBUG 2022-02-14 16:45:27,081 stack ['$a2.0']
DEBUG 2022-02-14 16:45:27,081 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=571)
DEBUG 2022-02-14 16:45:27,081 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:27,081 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=571)
DEBUG 2022-02-14 16:45:27,082 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=10, inst=STORE_FAST(arg=4, lineno=571)
DEBUG 2022-02-14 16:45:27,082 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=572)
DEBUG 2022-02-14 16:45:27,082 stack []
DEBUG 2022-02-14 16:45:27,082 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=572)
DEBUG 2022-02-14 16:45:27,082 stack ['$b12.5']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=572)
DEBUG 2022-02-14 16:45:27,082 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=18, inst=STORE_FAST(arg=5, lineno=572)
DEBUG 2022-02-14 16:45:27,082 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=573)
DEBUG 2022-02-14 16:45:27,082 stack []
DEBUG 2022-02-14 16:45:27,082 dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=573)
DEBUG 2022-02-14 16:45:27,082 stack ['$n20.9']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=573)
DEBUG 2022-02-14 16:45:27,082 stack ['$n20.9', '$_n22.10']
DEBUG 2022-02-14 16:45:27,082 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=573)
DEBUG 2022-02-14 16:45:27,082 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:45:27,082 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,082 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,082 stack: []
DEBUG 2022-02-14 16:45:27,082 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=574)
DEBUG 2022-02-14 16:45:27,082 stack []
DEBUG 2022-02-14 16:45:27,082 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=574)
DEBUG 2022-02-14 16:45:27,082 stack ['$28load_global.0']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=574)
DEBUG 2022-02-14 16:45:27,083 stack ['$28load_global.0', '$const30.1']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=574)
DEBUG 2022-02-14 16:45:27,083 stack ['$32call_function.2']
DEBUG 2022-02-14 16:45:27,083 end state. edges=[]
DEBUG 2022-02-14 16:45:27,083 pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,083 stack: []
DEBUG 2022-02-14 16:45:27,083 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack []
DEBUG 2022-02-14 16:45:27,083 dispatch pc=38, inst=LOAD_ATTR(arg=0, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack ['$out36.0']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack ['$38load_attr.1']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=42, inst=BUILD_TUPLE(arg=1, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack ['$38load_attr.1', '$m40.2']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=44, inst=COMPARE_OP(arg=3, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack ['$38load_attr.1', '$42build_tuple.3']
DEBUG 2022-02-14 16:45:27,083 dispatch pc=46, inst=POP_JUMP_IF_FALSE(arg=56, lineno=576)
DEBUG 2022-02-14 16:45:27,083 stack ['$44compare_op.4']
DEBUG 2022-02-14 16:45:27,083 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,083 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,083 stack: []
DEBUG 2022-02-14 16:45:27,084 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack []
DEBUG 2022-02-14 16:45:27,084 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack ['$48load_global.0']
DEBUG 2022-02-14 16:45:27,084 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack ['$48load_global.0', '$const50.1']
DEBUG 2022-02-14 16:45:27,084 dispatch pc=54, inst=RAISE_VARARGS(arg=1, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack ['$52call_function.2']
DEBUG 2022-02-14 16:45:27,084 end state. edges=[]
DEBUG 2022-02-14 16:45:27,084 pending: deque([State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,084 stack: []
DEBUG 2022-02-14 16:45:27,084 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack []
DEBUG 2022-02-14 16:45:27,084 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:45:27,084 stack ['$const56.0']
DEBUG 2022-02-14 16:45:27,084 end state. edges=[]
DEBUG 2022-02-14 16:45:27,084 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,084 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,084 defmap: {}
DEBUG 2022-02-14 16:45:27,084 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,084 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:27,084 keep phismap: {}
DEBUG 2022-02-14 16:45:27,085 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:27,085 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,085 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$_n22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$_n22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG 2022-02-14 16:45:27,085 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,085 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$out36.0'}), (38, {'item': '$out36.0', 'res': '$38load_attr.1'}), (40, {'res': '$m40.2'}), (42, {'items': ['$m40.2'], 'res': '$42build_tuple.3'}), (44, {'lhs': '$38load_attr.1', 'rhs': '$42build_tuple.3', 'res': '$44compare_op.4'}), (46, {'pred': '$44compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 56: ()})
DEBUG 2022-02-14 16:45:27,085 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_global.0'}), (50, {'res': '$const50.1'}), (52, {'func': '$48load_global.0', 'args': ['$const50.1'], 'res': '$52call_function.2'}), (54, {'exc': '$52call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,085 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$const56.0'}), (58, {'retval': '$const56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,086 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    _n = $6unpack_sequence.3                 ['$6unpack_sequence.3', '_n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', 'n']
    $24compare_op.11 = n != _n               ['$24compare_op.11', '_n', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector)) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_attr.1 = getattr(value=out, attr=shape) ['$38load_attr.1', 'out']
    $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)]) ['$42build_tuple.3', 'm']
    $44compare_op.4 = $38load_attr.1 != $42build_tuple.3 ['$38load_attr.1', '$42build_tuple.3', '$44compare_op.4']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None) ['$44compare_op.4', '$46pred', 'bool46']
    branch $46pred, 48, 56                   ['$46pred']
label 48:
    $48load_global.0 = global(ValueError: <class 'ValueError'>) ['$48load_global.0']
    $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector)) ['$const50.1']
    $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None) ['$48load_global.0', '$52call_function.2', '$const50.1']
    raise $52call_function.2                 ['$52call_function.2']
label 56:
    $const56.0 = const(NoneType, None)       ['$const56.0']
    $58return_value.1 = cast(value=$const56.0) ['$58return_value.1', '$const56.0']
    return $58return_value.1                 ['$58return_value.1']

DEBUG 2022-02-14 16:45:27,089 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,089 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4648b0>
DEBUG 2022-02-14 16:45:27,089 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:27,089 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:27,089 on stmt: out = arg(2, name=out)
DEBUG 2022-02-14 16:45:27,089 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:45:27,089 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:45:27,089 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,089 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,089 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:45:27,089 on stmt: _n = $6unpack_sequence.3
DEBUG 2022-02-14 16:45:27,089 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:45:27,089 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:45:27,089 on stmt: n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,089 on stmt: $24compare_op.11 = n != _n
DEBUG 2022-02-14 16:45:27,089 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,089 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,089 on stmt: branch $26pred, 28, 36
DEBUG 2022-02-14 16:45:27,089 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:45:27,090 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4648b0>
DEBUG 2022-02-14 16:45:27,090 on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:45:27,090 on stmt: $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector))
DEBUG 2022-02-14 16:45:27,090 on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,090 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (matrix * vector)')
DEBUG 2022-02-14 16:45:27,090 ==== SSA block analysis pass on 36
DEBUG 2022-02-14 16:45:27,090 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4648b0>
DEBUG 2022-02-14 16:45:27,090 on stmt: $38load_attr.1 = getattr(value=out, attr=shape)
DEBUG 2022-02-14 16:45:27,090 on stmt: $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)])
DEBUG 2022-02-14 16:45:27,090 on stmt: $44compare_op.4 = $38load_attr.1 != $42build_tuple.3
DEBUG 2022-02-14 16:45:27,090 on stmt: bool46 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,090 on stmt: $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,090 on stmt: branch $46pred, 48, 56
DEBUG 2022-02-14 16:45:27,090 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:27,090 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4648b0>
DEBUG 2022-02-14 16:45:27,090 on stmt: $48load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:45:27,090 on stmt: $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector))
DEBUG 2022-02-14 16:45:27,090 on stmt: $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,090 on stmt: <static> raise <class 'ValueError'>('incompatible output array size for np.dot(a, b, out) (matrix * vector)')
DEBUG 2022-02-14 16:45:27,090 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:45:27,090 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba4648b0>
DEBUG 2022-02-14 16:45:27,090 on stmt: $const56.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,090 on stmt: $58return_value.1 = cast(value=$const56.0)
DEBUG 2022-02-14 16:45:27,090 on stmt: return $58return_value.1
DEBUG 2022-02-14 16:45:27,091 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7f71ba4642b0>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7f71ba4dfc70>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7f71ba46ba90>],
             '$26pred': [<numba.core.ir.Assign object at 0x7f71ba46bd00>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7f71ba46b970>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x7f71ba46f160>],
             '$38load_attr.1': [<numba.core.ir.Assign object at 0x7f71ba46f520>],
             '$42build_tuple.3': [<numba.core.ir.Assign object at 0x7f71ba46f7f0>],
             '$44compare_op.4': [<numba.core.ir.Assign object at 0x7f71ba46f970>],
             '$46pred': [<numba.core.ir.Assign object at 0x7f71ba46fbe0>],
             '$48load_global.0': [<numba.core.ir.Assign object at 0x7f71ba46fdc0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f71ba46b2e0>],
             '$52call_function.2': [<numba.core.ir.Assign object at 0x7f71ba471160>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x7f71ba471580>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f71ba46b5e0>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f71ba464d60>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f71ba46b490>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7f71ba46bf40>],
             '$const50.1': [<numba.core.ir.Assign object at 0x7f71ba46ff40>],
             '$const56.0': [<numba.core.ir.Assign object at 0x7f71ba471400>],
             '_n': [<numba.core.ir.Assign object at 0x7f71ba464b20>],
             'a': [<numba.core.ir.Assign object at 0x7f71ba4640a0>],
             'b': [<numba.core.ir.Assign object at 0x7f71ba464ee0>],
             'bool26': [<numba.core.ir.Assign object at 0x7f71ba46bbe0>],
             'bool46': [<numba.core.ir.Assign object at 0x7f71ba46fac0>],
             'm': [<numba.core.ir.Assign object at 0x7f71ba464c40>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba4dfeb0>],
             'out': [<numba.core.ir.Assign object at 0x7f71ba46b040>]})
DEBUG 2022-02-14 16:45:27,091 SSA violators set()
DEBUG 2022-02-14 16:45:27,553 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:27,554 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:27,554 stack: []
DEBUG 2022-02-14 16:45:27,554 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:27,554 stack []
DEBUG 2022-02-14 16:45:27,554 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:27,554 stack []
DEBUG 2022-02-14 16:45:27,554 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:27,554 stack ['$E2.0']
DEBUG 2022-02-14 16:45:27,554 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:45:27,554 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:27,554 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-14 16:45:27,554 stack ['$6call_method.2']
DEBUG 2022-02-14 16:45:27,554 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-14 16:45:27,554 stack []
DEBUG 2022-02-14 16:45:27,554 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-14 16:45:27,554 stack ['$const10.3']
DEBUG 2022-02-14 16:45:27,554 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:45:27,554 stack []
DEBUG 2022-02-14 16:45:27,554 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:27,554 stack ['$14load_global.4']
DEBUG 2022-02-14 16:45:27,554 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:27,554 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-14 16:45:27,555 stack ['$34call_function_kw.14']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-14 16:45:27,555 stack []
DEBUG 2022-02-14 16:45:27,555 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-14 16:45:27,555 stack ['$const38.15']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-14 16:45:27,555 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-14 16:45:27,555 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-14 16:45:27,555 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack []
DEBUG 2022-02-14 16:45:27,556 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$46load_global.18']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$56call_function.23']
DEBUG 2022-02-14 16:45:27,556 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,556 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,556 stack: ['$phi60.0']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-14 16:45:27,556 stack ['$phi60.0']
DEBUG 2022-02-14 16:45:27,556 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,556 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:27,556 stack: []
DEBUG 2022-02-14 16:45:27,556 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-14 16:45:27,556 stack []
DEBUG 2022-02-14 16:45:27,556 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-14 16:45:27,556 stack ['$comb302.0']
DEBUG 2022-02-14 16:45:27,556 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:45:27,557 stack ['$314binary_subscr.7']
DEBUG 2022-02-14 16:45:27,557 end state. edges=[]
DEBUG 2022-02-14 16:45:27,557 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:27,557 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-14 16:45:27,557 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-14 16:45:27,557 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-14 16:45:27,557 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-14 16:45:27,557 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-14 16:45:27,557 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-14 16:45:27,557 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-14 16:45:27,557 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,557 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,558 stack: ['$phi72.0']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi72.0']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi72.0']
DEBUG 2022-02-14 16:45:27,558 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,558 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,558 stack: ['$phi78.0']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-14 16:45:27,558 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-14 16:45:27,558 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-14 16:45:27,558 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,558 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,558 stack: ['$phi140.0']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-14 16:45:27,559 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:27,559 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-14 16:45:27,560 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-14 16:45:27,560 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-14 16:45:27,561 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,561 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:45:27,561 stack: ['$phi90.0']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-14 16:45:27,561 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-14 16:45:27,561 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi90.0']
DEBUG 2022-02-14 16:45:27,562 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,562 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,562 stack: ['$phi124.0']
DEBUG 2022-02-14 16:45:27,562 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-14 16:45:27,562 stack ['$phi124.0']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-14 16:45:27,563 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,563 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,563 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-14 16:45:27,563 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:45:27,563 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,563 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,563 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,563 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,563 stack: ['$phi300.0']
DEBUG 2022-02-14 16:45:27,563 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi300.0']
DEBUG 2022-02-14 16:45:27,564 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,564 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:27,564 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:45:27,564 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-14 16:45:27,564 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-14 16:45:27,565 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-14 16:45:27,565 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-14 16:45:27,565 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,566 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,566 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,566 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:45:27,566 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-14 16:45:27,566 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:45:27,566 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,566 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-14 16:45:27,566 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:45:27,566 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-14 16:45:27,566 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:45:27,566 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,566 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:45:27,566 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:45:27,566 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-14 16:45:27,566 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:45:27,566 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:45:27,566 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:45:27,566 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:45:27,566 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,567 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-14 16:45:27,567 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-14 16:45:27,568 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-14 16:45:27,568 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,569 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-14 16:45:27,569 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,569 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-14 16:45:27,569 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,569 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-14 16:45:27,569 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:45:27,569 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:45:27,569 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-14 16:45:27,569 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:45:27,569 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:27,569 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,569 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:45:27,569 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:27,569 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:27,570 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:45:27,570 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:27,571 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-14 16:45:27,572 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:27,573 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:27,574 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:27,574 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:27,575 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-14 16:45:27,575 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-14 16:45:27,575 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-14 16:45:27,576 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:27,579 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-14 16:45:27,591 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:27,591 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,591 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,591 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,591 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,591 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,591 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,591 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,591 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,591 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,591 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,591 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,592 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,592 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,592 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,592 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,592 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,592 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,592 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,592 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,592 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,592 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,593 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,593 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,593 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,593 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,593 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,593 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:45:27,593 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,593 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,593 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,593 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,593 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,593 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,593 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:45:27,593 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,593 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,593 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,593 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,593 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,593 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,593 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,593 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:45:27,593 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,594 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,594 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,594 ==== SSA block analysis pass on 78
DEBUG 2022-02-14 16:45:27,594 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,594 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,594 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,594 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,594 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,594 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,594 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,594 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,594 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:45:27,594 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,594 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:27,594 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,594 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,594 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,594 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,594 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,594 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,594 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,594 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,594 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,594 ==== SSA block analysis pass on 124
DEBUG 2022-02-14 16:45:27,594 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,595 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,595 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,595 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,595 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,595 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:45:27,595 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,595 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,595 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,595 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,595 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,595 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,595 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,595 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,595 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,595 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,595 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,595 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,595 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,596 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,596 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,596 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,596 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,596 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,596 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,596 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,596 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,596 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,596 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,596 ==== SSA block analysis pass on 202
DEBUG 2022-02-14 16:45:27,596 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,596 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,596 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,596 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,596 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,596 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,596 ==== SSA block analysis pass on 204
DEBUG 2022-02-14 16:45:27,596 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,596 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,596 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,596 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,596 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,596 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,596 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,596 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,596 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,597 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,597 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,597 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,597 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,597 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,597 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,597 ==== SSA block analysis pass on 240
DEBUG 2022-02-14 16:45:27,597 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,597 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,597 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,597 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,597 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,597 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,597 ==== SSA block analysis pass on 242
DEBUG 2022-02-14 16:45:27,597 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,597 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,597 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,597 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,597 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,597 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,597 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,597 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,597 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,597 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,597 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,597 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,597 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,598 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,598 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,598 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,598 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,598 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,598 ==== SSA block analysis pass on 298
DEBUG 2022-02-14 16:45:27,598 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,598 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,598 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:45:27,598 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,598 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,598 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:45:27,598 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba805040>
DEBUG 2022-02-14 16:45:27,598 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,598 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,598 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,598 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,598 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,598 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,598 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,598 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,599 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x7f71ba36c730>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f71ba36c160>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x7f71ba21c730>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x7f71ba21ceb0>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x7f71ba7d6580>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7f71ba796310>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x7f71ba7d6b80>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x7f71ba7d6fd0>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x7f71ba7d5130>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x7f71ba7d52e0>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x7f71ba7d5460>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7f71ba796190>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x7f71ba7d5af0>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x7f71ba7d5c10>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x7f71ba7d5dc0>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x7f71ba7d5fd0>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x7f71ba1df580>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x7f71ba1df880>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x7f71ba1dfa30>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x7f71ba1dfb50>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba1dfbb0>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba1dfd00>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x7f71ba1dfe20>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x7f71ba1ee640>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x7f71ba1ee7c0>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x7f71ba1ee9d0>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x7f71ba1eedc0>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x7f71ba1eb100>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x7f71ba1eb520>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x7f71ba1eb6d0>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x7f71ba1eb7f0>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba1eb940>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x7f71ba1eba60>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x7f71ba1ebb80>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x7f71ba3be460>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x7f71ba201520>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x7f71ba2016a0>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71ba201a00>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x7f71ba201f40>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x7f71ba426d00>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x7f71ba1e6460>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x7f71ba1e65e0>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x7f71ba1e68e0>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x7f71ba1e6a60>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x7f71ba1e6be0>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x7f71ba1e6e80>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x7f71ba3f3f40>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x7f71ba1e3640>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x7f71ba3f0850>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x7f71ba1e3220>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x7f71ba1e33a0>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x7f71ba1e3040>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71ba1e3dc0>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x7f71ba1e35e0>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x7f71ba745130>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71ba77cc10>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x7f71ba2b59d0>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x7f71ba2b5ee0>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x7f71ba2b5ca0>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7f71ba2b5cd0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba2b5bb0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba2b5a00>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x7f71ba2b5160>],
             '$70pred': [<numba.core.ir.Assign object at 0x7f71ba294a90>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x7f71ba1f13d0>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x7f71ba1f1100>],
             '$88pred': [<numba.core.ir.Assign object at 0x7f71ba1f1e50>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x7f71ba1f1af0>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x7f71ba1f18e0>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x7f71ba1f1520>],
             '$const106.9': [<numba.core.ir.Assign object at 0x7f71ba36c340>],
             '$const144.2': [<numba.core.ir.Assign object at 0x7f71ba7d62b0>],
             '$const154.6': [<numba.core.ir.Assign object at 0x7f71ba7d68b0>],
             '$const160.9': [<numba.core.ir.Assign object at 0x7f71ba7d6cd0>],
             '$const162.10': [<numba.core.ir.Assign object at 0x7f71ba7d6e50>],
             '$const174.17': [<numba.core.ir.Assign object at 0x7f71ba7d57f0>],
             '$const176.18': [<numba.core.ir.Assign object at 0x7f71ba7d5970>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7f71ba77e130>],
             '$const186.23': [<numba.core.ir.Assign object at 0x7f71ba1df190>],
             '$const194.27': [<numba.core.ir.Assign object at 0x7f71ba1df6d0>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7f71ba780fa0>],
             '$const226.12': [<numba.core.ir.Assign object at 0x7f71ba1eef10>],
             '$const232.15': [<numba.core.ir.Assign object at 0x7f71ba1eb370>],
             '$const250.7': [<numba.core.ir.Assign object at 0x7f71ba201370>],
             '$const262.14': [<numba.core.ir.Assign object at 0x7f71ba201c70>],
             '$const278.22': [<numba.core.ir.Assign object at 0x7f71ba1e6730>],
             '$const306.2': [<numba.core.ir.Assign object at 0x7f71ba1e3ac0>],
             '$const308.3': [<numba.core.ir.Assign object at 0x7f71ba1e3a60>],
             '$const38.15': [<numba.core.ir.Assign object at 0x7f71ba721910>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7f71ba7453a0>],
             '$const48.19': [<numba.core.ir.Assign object at 0x7f71ba7456d0>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7f71ba1e8070>],
             '$const66.3': [<numba.core.ir.Assign object at 0x7f71ba2b5370>],
             '$const80.2': [<numba.core.ir.Assign object at 0x7f71ba294910>],
             '$const84.4': [<numba.core.ir.Assign object at 0x7f71ba1f1070>],
             '$const_0': [<numba.core.ir.Assign object at 0x7f71ba745610>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7f71ba7454f0>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x7f71ba7d61c0>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x7f71ba1df2b0>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x7f71ba1ee2e0>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x7f71ba1eb850>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7f71ba7cf370>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7f71ba73f3d0>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f71ba73fb50>],
             'D_S': [<numba.core.ir.Assign object at 0x7f71ba73fd60>,
                     <numba.core.ir.Assign object at 0x7f71ba21cf70>],
             'E': [<numba.core.ir.Assign object at 0x7f71ba73f9d0>],
             'E_k': [<numba.core.ir.Assign object at 0x7f71ba7cf070>,
                     <numba.core.ir.Assign object at 0x7f71ba21c7f0>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f71ba73fbe0>],
             'bool70': [<numba.core.ir.Assign object at 0x7f71ba2947c0>],
             'bool88': [<numba.core.ir.Assign object at 0x7f71ba1f1670>],
             'comb': [<numba.core.ir.Assign object at 0x7f71ba832f10>],
             'count': [<numba.core.ir.Assign object at 0x7f71ba7cf490>,
                       <numba.core.ir.Assign object at 0x7f71ba7d6640>],
             'factor': [<numba.core.ir.Assign object at 0x7f71ba294cd0>,
                        <numba.core.ir.Assign object at 0x7f71ba36c580>,
                        <numba.core.ir.Assign object at 0x7f71ba21ca30>],
             'i': [<numba.core.ir.Assign object at 0x7f71ba2b5520>],
             'j': [<numba.core.ir.Assign object at 0x7f71ba1ee130>],
             'k': [<numba.core.ir.Assign object at 0x7f71ba1ebe50>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba73f7f0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f71ba73f490>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71ba73f610>],
             'powfactor': [<numba.core.ir.Assign object at 0x7f71ba21cd90>,
                           <numba.core.ir.Assign object at 0x7f71ba1ee880>]})
DEBUG 2022-02-14 16:45:27,599 SSA violators {'E_k', 'count', 'factor', 'powfactor', 'D_S'}
DEBUG 2022-02-14 16:45:27,600 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:45:27,600 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,600 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,600 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,600 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,600 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,600 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,600 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,600 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,600 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,600 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,600 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,600 first assign: E_k
DEBUG 2022-02-14 16:45:27,600 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,600 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,600 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,600 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,600 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,600 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,600 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,600 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,600 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,600 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,600 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,600 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,601 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,601 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,601 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,601 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,601 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,601 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,601 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,601 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,601 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,601 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,601 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,601 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,601 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,601 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,601 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,601 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,601 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,601 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,601 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,601 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,601 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,601 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,602 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,602 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,602 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,602 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,602 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,602 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,602 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,602 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,602 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,602 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,602 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,602 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,602 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,602 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,602 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,602 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:27,602 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,602 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,602 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,602 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,602 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,602 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,602 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,602 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,602 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,602 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,602 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,603 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,603 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,603 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,603 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,603 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,603 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,603 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,603 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,603 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,603 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,603 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,603 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,603 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,603 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,603 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,603 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,603 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,603 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,603 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,603 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,603 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,603 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,603 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,604 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,604 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,604 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,604 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,604 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,604 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,604 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,604 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,604 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,604 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,604 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,604 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,604 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,604 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,604 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,604 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,604 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,604 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,604 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,604 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,604 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,604 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,604 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,605 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,605 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,605 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,605 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,605 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,605 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,605 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,605 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,605 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,605 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,605 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,605 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,605 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,605 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,605 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,605 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,605 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,605 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,605 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,605 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,605 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,605 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,606 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,606 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,606 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,606 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,606 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,606 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,606 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,606 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,606 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,606 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,606 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,606 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,606 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,606 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,606 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,606 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,606 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,606 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,606 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,606 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,606 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,606 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,606 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,606 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,606 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,606 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,607 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba1e3b50>],
             90: [<numba.core.ir.Assign object at 0x7f71ba7ff0a0>]})
DEBUG 2022-02-14 16:45:27,607 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,607 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,607 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,607 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,607 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,607 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,607 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,607 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,607 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,607 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,607 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,607 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,607 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,607 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,607 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,607 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,607 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,607 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,607 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,607 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,607 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,607 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,608 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,608 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,608 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,608 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,608 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,608 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,608 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,608 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,608 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,608 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,608 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,608 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,608 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,608 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,608 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,608 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,608 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,608 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,608 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,609 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,609 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,609 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,609 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,609 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,609 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,609 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,609 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,609 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,609 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,609 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,609 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,609 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,609 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,609 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,609 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,609 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,609 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,609 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:27,609 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:45:27,609 find_def_from_top label 90
DEBUG 2022-02-14 16:45:27,609 idom 78 from label 90
DEBUG 2022-02-14 16:45:27,609 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,609 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,609 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,609 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,610 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 60
DEBUG 2022-02-14 16:45:27,610 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:27,610 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 300
DEBUG 2022-02-14 16:45:27,610 idom 202 from label 300
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,610 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 140
DEBUG 2022-02-14 16:45:27,610 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 72
DEBUG 2022-02-14 16:45:27,610 idom 62 from label 72
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,610 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,610 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:27,610 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,610 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:27,610 find_def_from_top label 124
DEBUG 2022-02-14 16:45:27,610 idom 78 from label 124
DEBUG 2022-02-14 16:45:27,611 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,611 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,611 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,611 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,611 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,611 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,611 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,611 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:27,611 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,611 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,611 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,611 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,611 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,611 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,611 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,611 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,611 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,611 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,611 find_def_from_top label 90
DEBUG 2022-02-14 16:45:27,611 idom 78 from label 90
DEBUG 2022-02-14 16:45:27,611 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,611 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,611 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,611 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,611 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,612 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,612 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,612 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,612 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,612 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,612 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,612 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,612 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,612 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,612 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,612 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,612 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,612 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,612 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,612 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,612 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,612 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,612 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,612 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,612 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,612 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,612 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,612 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,612 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,612 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,613 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,613 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,613 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,613 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,613 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,613 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,613 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,613 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,613 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,613 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,613 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,613 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,613 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,613 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,613 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,613 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,613 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,613 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,613 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,613 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,613 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,613 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,613 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,613 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,614 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,614 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,614 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,614 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,614 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,614 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,614 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,614 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,614 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,614 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,614 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,614 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,614 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,614 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,614 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,614 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,614 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,614 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,614 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,614 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,614 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,614 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,614 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,614 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,615 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,615 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,615 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,615 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,615 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,615 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,615 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,615 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,615 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,615 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,615 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,615 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,615 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,615 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,615 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,615 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,615 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,615 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,615 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,615 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,615 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,615 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,615 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,615 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,616 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,616 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,616 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,616 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,616 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,616 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,616 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,616 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,616 Fix SSA violator on var count
DEBUG 2022-02-14 16:45:27,616 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,616 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,616 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,616 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,616 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,616 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,616 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,616 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,616 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,616 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,616 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,616 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,616 first assign: count
DEBUG 2022-02-14 16:45:27,616 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,616 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,616 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,616 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,617 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,617 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,617 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,617 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,617 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,617 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,617 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,617 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,617 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,617 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,617 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,617 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,617 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,617 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,617 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,617 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,617 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,617 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,617 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,618 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,618 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,618 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,618 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,618 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,618 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,618 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,618 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,618 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,618 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,618 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,618 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,618 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,618 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,618 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,618 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,618 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,618 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,618 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,618 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,618 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,618 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,618 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,618 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,618 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,618 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,618 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,619 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,619 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,619 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,619 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,619 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,619 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,619 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,619 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,619 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,619 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,619 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,619 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,619 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,619 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,619 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,619 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,619 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,619 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,619 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,619 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,619 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,619 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,619 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,619 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,619 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,619 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,619 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,620 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,620 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,620 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,620 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,620 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,620 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,620 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,620 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,620 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,620 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,620 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,620 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,620 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,620 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,620 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,620 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,620 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,620 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,620 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,620 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,620 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,620 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,620 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,620 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,620 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,621 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,621 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,621 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,621 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,621 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,621 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,621 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,621 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,621 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,621 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,621 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,621 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,621 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,621 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,621 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,621 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,621 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,621 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,621 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,621 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,621 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,621 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,621 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,621 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,621 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,621 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,621 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,621 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,622 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,622 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,622 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,622 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,622 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,622 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,622 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,622 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,622 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,622 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,622 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,622 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,622 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,622 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,622 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,622 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,622 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,622 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,622 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,622 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,622 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,622 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,622 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,622 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,622 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,622 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,623 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,623 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,623 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,623 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,623 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba805c10>],
             140: [<numba.core.ir.Assign object at 0x7f71ba1e3be0>]})
DEBUG 2022-02-14 16:45:27,623 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,623 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,623 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,623 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,623 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,623 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,623 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,623 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,623 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,623 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,623 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,623 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,623 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,623 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,623 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,623 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,623 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,623 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,623 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,623 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,624 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,624 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,624 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,624 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,624 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,624 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,624 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,624 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,624 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,624 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,624 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,624 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,624 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,624 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,624 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,624 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,624 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,624 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,624 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,625 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,625 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,625 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,625 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,625 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,625 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,625 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,625 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,625 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,625 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,625 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,625 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,625 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,625 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,625 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,625 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,625 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,625 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,625 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,625 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,625 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,625 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,625 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,625 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,625 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,625 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,626 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,626 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,626 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,626 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,626 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,626 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,626 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,626 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,626 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,626 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,626 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,626 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,626 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,626 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,626 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,626 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,626 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,626 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:45:27,626 find_def_from_top label 140
DEBUG 2022-02-14 16:45:27,626 idom 62 from label 140
DEBUG 2022-02-14 16:45:27,626 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,626 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,626 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,626 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,626 find_def_from_top label 60
DEBUG 2022-02-14 16:45:27,627 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:27,627 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:27,627 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:45:27,627 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:27,627 find_def_from_top label 300
DEBUG 2022-02-14 16:45:27,627 idom 202 from label 300
DEBUG 2022-02-14 16:45:27,627 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,627 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,627 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,627 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,627 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,627 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,627 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,627 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,627 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,627 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:45:27,627 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,627 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,627 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,627 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,627 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,627 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,627 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,627 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,627 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,627 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,627 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,628 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,628 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,628 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,628 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,628 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,628 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,628 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,628 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,628 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,628 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,628 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,628 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,628 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,628 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,628 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,628 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,628 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,628 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,628 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,628 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,628 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,628 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,628 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,628 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,628 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,628 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,629 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,629 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,629 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,629 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,629 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,629 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,629 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,629 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,629 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,629 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,629 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,629 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,629 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,629 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,629 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,629 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,629 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,629 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,629 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,629 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,629 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,629 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,629 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,629 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,629 find_def_from_top label 242
DEBUG 2022-02-14 16:45:27,629 idom 240 from label 242
DEBUG 2022-02-14 16:45:27,629 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:27,629 find_def_from_top label 240
DEBUG 2022-02-14 16:45:27,630 idom 204 from label 240
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 204
DEBUG 2022-02-14 16:45:27,630 idom 202 from label 204
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,630 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,630 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,630 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,630 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,630 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,630 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 242
DEBUG 2022-02-14 16:45:27,630 idom 240 from label 242
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 240
DEBUG 2022-02-14 16:45:27,630 idom 204 from label 240
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 204
DEBUG 2022-02-14 16:45:27,630 idom 202 from label 204
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,630 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,630 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,630 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,630 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,630 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,630 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,630 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,631 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,631 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,631 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,631 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,631 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,631 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,631 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,631 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,631 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,631 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,631 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,631 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,631 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,631 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,631 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba1e34f0>
DEBUG 2022-02-14 16:45:27,631 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,631 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,631 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,631 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,631 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,631 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,631 find_def_from_top label 302
DEBUG 2022-02-14 16:45:27,631 idom 60 from label 302
DEBUG 2022-02-14 16:45:27,631 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,631 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,631 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,632 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,632 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,632 Fix SSA violator on var factor
DEBUG 2022-02-14 16:45:27,632 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,632 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,632 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,632 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,632 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,632 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,632 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,632 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,632 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,632 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,632 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,632 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,632 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,632 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,632 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,632 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,632 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,632 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,632 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,632 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,632 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,632 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,632 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,632 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,633 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,633 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,633 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,633 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,633 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,633 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,633 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,633 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,633 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,633 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,633 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,633 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,633 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,633 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,633 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,633 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,633 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,633 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,633 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,633 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,633 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,633 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,633 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,633 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,633 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,633 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,633 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,633 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,634 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,634 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,634 first assign: factor
DEBUG 2022-02-14 16:45:27,634 replaced with: factor = oddloop
DEBUG 2022-02-14 16:45:27,634 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,634 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,634 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,634 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,634 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,634 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,634 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,634 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,634 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,634 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,634 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,634 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,634 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,634 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,634 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,634 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,634 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,634 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,634 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,634 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,634 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,634 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,635 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,635 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,635 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,635 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,635 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,635 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,635 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,635 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,635 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,635 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,635 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,635 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,635 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,635 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,635 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,635 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,635 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,635 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,635 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,635 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,635 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,635 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,635 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,635 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,635 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,635 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,636 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,636 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,636 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,636 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,636 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,636 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,636 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,636 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,636 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,636 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,636 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,636 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,636 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,636 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,636 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,636 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,636 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,636 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,636 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,636 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,636 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,636 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,636 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,636 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,636 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,636 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,637 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,637 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,637 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,637 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,637 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,637 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,637 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,637 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,637 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,637 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,637 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,637 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,637 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,637 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,637 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,637 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,637 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,637 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,637 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,637 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,637 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,637 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,637 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,637 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,637 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,637 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,638 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,638 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,638 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,638 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,638 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,638 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,638 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,638 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,638 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,638 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,638 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,638 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,638 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,638 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,638 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,638 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,638 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba787a90>
DEBUG 2022-02-14 16:45:27,638 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,638 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,638 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,638 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,638 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,638 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,638 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,638 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,639 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f71ba8017c0>],
             90: [<numba.core.ir.Assign object at 0x7f71ba803fa0>],
             124: [<numba.core.ir.Assign object at 0x7f71ba1e3670>]})
DEBUG 2022-02-14 16:45:27,639 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,639 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,639 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,639 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,639 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,639 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,639 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,639 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,639 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,639 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,639 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,639 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,639 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,639 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,639 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,639 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,639 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,639 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,639 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,639 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,639 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,639 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,639 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,639 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,640 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,640 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,640 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,640 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,640 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,640 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,640 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,640 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,640 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,640 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,640 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,640 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,640 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,640 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,640 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,640 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,640 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,640 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,640 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,640 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,640 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,640 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,640 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,640 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,641 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,641 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,641 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,641 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,641 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,641 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,641 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,641 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,641 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,641 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,641 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,641 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,641 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,641 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,641 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,641 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,641 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,641 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,641 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,641 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,641 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,641 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,641 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,641 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,641 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,641 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,642 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,642 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,642 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,642 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,642 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,642 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,642 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,642 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,642 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,642 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,642 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,642 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,642 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,642 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,642 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,642 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,642 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,642 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,642 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,642 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,642 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,642 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,642 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,642 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,642 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,642 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,643 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,643 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,643 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,643 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,643 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,643 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,643 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,643 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,643 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,643 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,643 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,643 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,643 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,643 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,643 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,643 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,643 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,643 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,643 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,643 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,643 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,643 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,643 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,643 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:45:27,643 find_def_from_top label 204
DEBUG 2022-02-14 16:45:27,644 idom 202 from label 204
DEBUG 2022-02-14 16:45:27,644 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,644 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,644 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,644 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,644 find_def_from_top label 140
DEBUG 2022-02-14 16:45:27,644 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:27,644 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:27,644 incoming_def factor = oddloop
DEBUG 2022-02-14 16:45:27,644 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:27,644 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,644 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:27,644 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,644 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:27,644 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,644 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,644 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,644 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,644 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,644 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,644 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,644 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,644 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,644 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,644 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,644 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,645 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,645 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,645 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,645 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,645 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,645 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,645 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,645 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,645 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,645 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,645 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,645 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,645 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,645 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,645 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,645 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,645 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,645 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,645 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,645 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,645 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,645 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,645 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,645 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,646 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,646 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,646 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,646 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,646 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,646 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,646 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,646 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,646 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,646 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,646 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,646 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,646 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,646 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,646 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,646 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,646 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,646 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,646 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:45:27,646 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,646 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,646 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,646 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,646 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,646 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,646 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,646 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,647 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,647 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,647 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,647 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,647 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,647 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,647 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,647 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,647 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,647 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,647 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,647 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,647 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,647 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,647 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,647 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,647 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,647 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,647 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,648 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,648 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,648 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,648 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,648 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,648 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,648 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,648 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,648 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,648 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,648 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,648 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,648 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,648 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,648 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,648 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,648 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,648 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,648 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,648 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,648 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,648 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,648 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,648 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,648 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,648 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,648 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,648 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,648 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,648 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,649 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,649 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,649 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,649 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,649 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,649 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,649 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,649 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,649 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,649 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,649 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,649 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,649 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,649 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,649 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,649 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,649 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,649 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,649 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,649 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,649 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,649 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,649 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,649 first assign: powfactor
DEBUG 2022-02-14 16:45:27,649 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,649 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,649 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,650 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,650 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,650 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,650 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,650 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,650 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,650 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,650 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,650 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,650 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,650 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,650 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,650 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,650 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,650 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,650 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,650 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,650 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,650 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,650 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,650 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,651 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,651 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,651 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,651 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,651 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,651 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,651 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,651 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:27,651 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,651 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,651 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,651 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,651 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,651 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,651 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,651 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,651 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,651 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,651 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,651 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,651 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,651 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,651 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,651 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,651 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,651 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,651 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,652 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,652 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,652 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,652 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,652 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,652 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,652 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,652 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,652 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,652 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,652 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,652 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,652 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,652 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,652 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,652 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,652 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,652 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,652 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,652 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,652 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,652 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,652 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,652 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,652 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,652 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,652 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,652 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,652 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,653 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,653 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,653 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,653 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,653 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,653 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,653 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,653 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x7f71ba8016a0>],
             204: [<numba.core.ir.Assign object at 0x7f71ba1fb3a0>]})
DEBUG 2022-02-14 16:45:27,653 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,653 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,653 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,653 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,653 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,653 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,653 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,653 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,653 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,653 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,653 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,653 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,653 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,653 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,653 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,653 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,653 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,653 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,653 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,654 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,654 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,654 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,654 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,654 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,654 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,654 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,654 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,654 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,654 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,654 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,654 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,654 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,654 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,654 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,654 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,654 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,654 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,654 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,655 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,655 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,655 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,655 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,655 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,655 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,655 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,655 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,655 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,655 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,655 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,655 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,655 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,655 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,655 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,655 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,655 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,655 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,655 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,655 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,655 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,655 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,655 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,655 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,655 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,655 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,656 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,656 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,656 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,656 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,656 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,656 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,656 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,656 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,656 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,656 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,656 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,656 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,656 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,656 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,656 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,656 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,656 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,656 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,656 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,656 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,656 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,656 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,656 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,656 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,656 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,656 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,656 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,656 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,657 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,657 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,657 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,657 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,657 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,657 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,657 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,657 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,657 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,657 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,657 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,657 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,657 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,657 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,657 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,657 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,657 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,657 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,657 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,657 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,657 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,657 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,657 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,657 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,657 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,657 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,657 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:27,658 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,658 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,658 find_def_from_top label 204
DEBUG 2022-02-14 16:45:27,658 idom 202 from label 204
DEBUG 2022-02-14 16:45:27,658 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,658 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,658 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-14 16:45:27,658 find_def_from_bottom label 298
DEBUG 2022-02-14 16:45:27,658 find_def_from_top label 298
DEBUG 2022-02-14 16:45:27,658 idom 240 from label 298
DEBUG 2022-02-14 16:45:27,658 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:27,658 find_def_from_top label 240
DEBUG 2022-02-14 16:45:27,658 idom 204 from label 240
DEBUG 2022-02-14 16:45:27,658 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:27,658 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,658 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,658 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,658 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,658 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,658 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,658 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,658 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,658 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,658 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,658 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,658 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,659 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,659 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,659 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,659 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,659 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,659 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,659 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,659 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,659 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,659 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,659 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,659 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,659 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,659 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,659 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,659 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,659 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,659 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,659 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,659 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,659 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,659 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,659 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,659 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,659 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,660 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,660 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:45:27,660 find_def_from_top label 242
DEBUG 2022-02-14 16:45:27,660 idom 240 from label 242
DEBUG 2022-02-14 16:45:27,660 find_def_from_bottom label 240
DEBUG 2022-02-14 16:45:27,660 find_def_from_top label 240
DEBUG 2022-02-14 16:45:27,660 idom 204 from label 240
DEBUG 2022-02-14 16:45:27,660 find_def_from_bottom label 204
DEBUG 2022-02-14 16:45:27,660 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:27,660 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,660 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,660 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,660 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,660 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,660 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,660 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,660 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,660 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,660 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,660 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba8019a0>
DEBUG 2022-02-14 16:45:27,660 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,660 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,660 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,660 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,660 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,660 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,660 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,661 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,661 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:45:27,661 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,661 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,661 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,661 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,661 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,661 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,661 first assign: D_S
DEBUG 2022-02-14 16:45:27,661 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,661 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,661 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,661 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,661 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,661 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,661 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,661 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,661 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,661 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,661 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,661 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,661 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,661 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,661 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,661 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,661 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,661 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,662 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,662 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,662 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,662 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,662 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,662 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,662 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,662 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,662 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,662 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,662 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,662 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,662 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,662 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,662 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,662 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,662 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,662 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,662 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,662 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,662 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,662 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,662 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,662 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,662 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,662 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,662 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,663 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,663 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,663 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,663 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,663 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,663 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,663 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,663 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,663 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,663 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,663 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,663 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,663 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,663 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,663 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,663 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,663 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,663 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,663 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,663 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,663 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,663 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,663 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,663 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,663 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,663 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,663 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,663 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,664 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,664 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,664 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,664 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,664 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,664 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,664 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,664 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,664 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,664 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,664 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,664 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,664 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,664 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,664 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,664 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,664 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,664 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,664 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,664 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,664 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,664 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,664 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,665 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,665 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,665 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,665 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,665 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,665 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,665 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,665 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,665 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,665 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,665 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:45:27,665 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,665 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,665 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,665 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,665 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,665 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,665 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,665 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,665 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:27,665 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,665 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,665 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,665 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,665 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,666 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,666 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,666 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,666 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,666 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,666 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,666 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,666 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,666 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,666 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,666 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,666 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,666 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,666 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,666 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,666 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,666 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,666 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,666 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,666 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,666 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,666 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,666 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,666 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,666 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,666 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,666 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,667 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,667 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,667 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:27,667 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,667 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,667 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,667 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,667 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,667 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,667 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,667 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,667 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,667 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,667 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba801730>
DEBUG 2022-02-14 16:45:27,667 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,667 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,667 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,667 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,667 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,667 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,667 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,667 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:27,667 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba801a60>],
             124: [<numba.core.ir.Assign object at 0x7f71ba787a60>]})
DEBUG 2022-02-14 16:45:27,667 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:27,667 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,668 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:45:27,668 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:45:27,668 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:45:27,668 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,668 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:45:27,668 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:45:27,668 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:45:27,668 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:45:27,668 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,668 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:45:27,668 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,668 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:45:27,668 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:45:27,668 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:45:27,668 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:27,668 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:45:27,668 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:45:27,668 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:45:27,668 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:45:27,668 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,669 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:45:27,669 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:45:27,669 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:45:27,669 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,669 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:45:27,669 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:45:27,669 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,669 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:27,669 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,669 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,669 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:45:27,669 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:45:27,669 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,669 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:45:27,669 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:45:27,669 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:45:27,669 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:45:27,669 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,669 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:45:27,669 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:45:27,669 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:45:27,669 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,669 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,669 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:45:27,669 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:45:27,670 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,670 on stmt: factor = oddloop
DEBUG 2022-02-14 16:45:27,670 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,670 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:45:27,670 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,670 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:45:27,670 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:45:27,670 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:45:27,670 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:45:27,670 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:27,670 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,670 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:45:27,670 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:45:27,670 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,670 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:45:27,670 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,670 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:45:27,670 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,670 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,670 find_def_from_top label 90
DEBUG 2022-02-14 16:45:27,670 idom 78 from label 90
DEBUG 2022-02-14 16:45:27,670 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,670 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,670 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,670 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,670 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,670 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 60
DEBUG 2022-02-14 16:45:27,671 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:27,671 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 300
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 300
DEBUG 2022-02-14 16:45:27,671 idom 202 from label 300
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 202
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 202
DEBUG 2022-02-14 16:45:27,671 idom 140 from label 202
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 140
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 140
DEBUG 2022-02-14 16:45:27,671 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 72
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 72
DEBUG 2022-02-14 16:45:27,671 idom 62 from label 72
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,671 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,671 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 90
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 90
DEBUG 2022-02-14 16:45:27,671 idom 78 from label 90
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,671 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,671 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,671 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,671 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,672 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,672 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:45:27,672 find_def_from_bottom label 124
DEBUG 2022-02-14 16:45:27,672 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,672 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,672 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:27,672 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:45:27,672 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:45:27,672 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:45:27,672 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,672 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:45:27,672 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,672 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:45:27,672 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,672 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,672 find_def var='D_S' stmt=factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,672 find_def_from_top label 124
DEBUG 2022-02-14 16:45:27,672 idom 78 from label 124
DEBUG 2022-02-14 16:45:27,672 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,672 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,672 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,672 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,672 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,672 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,672 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,672 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:27,673 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,673 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:45:27,673 find_def_from_top label 124
DEBUG 2022-02-14 16:45:27,673 idom 78 from label 124
DEBUG 2022-02-14 16:45:27,673 find_def_from_bottom label 78
DEBUG 2022-02-14 16:45:27,673 find_def_from_top label 78
DEBUG 2022-02-14 16:45:27,673 idom 62 from label 78
DEBUG 2022-02-14 16:45:27,673 find_def_from_bottom label 62
DEBUG 2022-02-14 16:45:27,673 find_def_from_top label 62
DEBUG 2022-02-14 16:45:27,673 idom 60 from label 62
DEBUG 2022-02-14 16:45:27,673 find_def_from_bottom label 60
DEBUG 2022-02-14 16:45:27,673 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:45:27,673 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:45:27,673 on stmt: jump 140
DEBUG 2022-02-14 16:45:27,673 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:45:27,673 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,673 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,673 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:45:27,673 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:45:27,673 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:45:27,673 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:45:27,673 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:45:27,673 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:45:27,673 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:45:27,673 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,673 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,673 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,674 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,674 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,674 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,674 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,674 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,674 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,674 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,674 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:45:27,674 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:45:27,674 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,674 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:45:27,674 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:45:27,674 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:45:27,674 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:45:27,674 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,674 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:45:27,674 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:45:27,674 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,674 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:45:27,674 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,674 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:45:27,674 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:45:27,674 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,675 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:45:27,675 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:45:27,675 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:45:27,675 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:45:27,675 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,675 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:45:27,675 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:45:27,675 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,675 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:45:27,675 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:27,675 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:45:27,675 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:45:27,675 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:45:27,675 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:45:27,675 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:45:27,675 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,675 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:45:27,675 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:45:27,675 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,675 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:45:27,675 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,675 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:45:27,675 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,675 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:45:27,675 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:45:27,675 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:45:27,675 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:45:27,676 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,676 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:45:27,676 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:45:27,676 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:45:27,676 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,676 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,676 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:45:27,676 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:45:27,676 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:45:27,676 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:45:27,676 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:45:27,676 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:45:27,676 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:45:27,676 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,676 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:45:27,676 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:27,676 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:45:27,676 on stmt: jump 240
DEBUG 2022-02-14 16:45:27,676 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:45:27,676 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,676 on stmt: jump 202
DEBUG 2022-02-14 16:45:27,676 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:45:27,676 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,676 on stmt: jump 60
DEBUG 2022-02-14 16:45:27,676 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:27,677 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba805c40>
DEBUG 2022-02-14 16:45:27,677 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,677 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:45:27,677 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:27,677 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:27,677 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:45:27,677 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:27,677 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:45:27,677 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:45:28,158 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:28,158 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,158 stack: []
DEBUG 2022-02-14 16:45:28,158 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:28,158 stack []
DEBUG 2022-02-14 16:45:28,158 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:28,158 stack []
DEBUG 2022-02-14 16:45:28,158 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:45:28,158 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,158 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:45:28,158 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:28,158 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:45:28,158 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:28,159 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:28,159 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:45:28,159 stack []
DEBUG 2022-02-14 16:45:28,159 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:45:28,159 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack []
DEBUG 2022-02-14 16:45:28,159 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:28,159 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:45:28,159 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:28,159 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,160 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,160 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:28,160 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,160 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,160 stack: []
DEBUG 2022-02-14 16:45:28,160 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:45:28,160 stack []
DEBUG 2022-02-14 16:45:28,160 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:28,160 stack ['$val54.0']
DEBUG 2022-02-14 16:45:28,160 end state. edges=[]
DEBUG 2022-02-14 16:45:28,160 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,160 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:28,160 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:28,160 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:28,161 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:28,161 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:28,161 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:45:28,161 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:45:28,161 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,161 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,161 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,161 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,161 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,161 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:28,161 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,161 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,161 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,162 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,162 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:28,162 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:28,162 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,162 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:28,162 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:28,162 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:28,162 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,163 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:28,167 bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_CONST(arg=0, lineno=116)
           4	RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:45:28,167 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,167 stack: []
DEBUG 2022-02-14 16:45:28,167 dispatch pc=0, inst=NOP(arg=None, lineno=116)
DEBUG 2022-02-14 16:45:28,167 stack []
DEBUG 2022-02-14 16:45:28,167 dispatch pc=2, inst=LOAD_CONST(arg=0, lineno=116)
DEBUG 2022-02-14 16:45:28,167 stack []
DEBUG 2022-02-14 16:45:28,167 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:45:28,167 stack ['$const2.0']
DEBUG 2022-02-14 16:45:28,167 end state. edges=[]
DEBUG 2022-02-14 16:45:28,167 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,167 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,167 defmap: {}
DEBUG 2022-02-14 16:45:28,167 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,167 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,168 keep phismap: {}
DEBUG 2022-02-14 16:45:28,168 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,168 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,168 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,168 label 0:
    $const2.0 = const(NoneType, None)        ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-02-14 16:45:28,169 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,169 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9e3bdc0>
DEBUG 2022-02-14 16:45:28,169 on stmt: $const2.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:28,169 on stmt: $4return_value.1 = cast(value=$const2.0)
DEBUG 2022-02-14 16:45:28,169 on stmt: return $4return_value.1
DEBUG 2022-02-14 16:45:28,169 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f71b9e3baf0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f71b9e3b190>]})
DEBUG 2022-02-14 16:45:28,169 SSA violators set()
DEBUG 2022-02-14 16:45:28,185 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:28,185 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,185 stack: []
DEBUG 2022-02-14 16:45:28,185 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack []
DEBUG 2022-02-14 16:45:28,186 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack []
DEBUG 2022-02-14 16:45:28,186 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:28,186 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:45:28,186 stack []
DEBUG 2022-02-14 16:45:28,186 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:45:28,186 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:28,186 stack []
DEBUG 2022-02-14 16:45:28,186 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,186 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:28,186 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:28,186 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:45:28,186 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:28,187 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,187 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,187 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:28,187 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:45:28,187 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:28,187 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,187 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,187 stack: []
DEBUG 2022-02-14 16:45:28,187 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:45:28,187 stack []
DEBUG 2022-02-14 16:45:28,187 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:28,187 stack ['$val54.0']
DEBUG 2022-02-14 16:45:28,187 end state. edges=[]
DEBUG 2022-02-14 16:45:28,188 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,188 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:45:28,188 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:45:28,188 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,188 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,188 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,188 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,188 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,189 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:28,189 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,189 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,189 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,189 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,189 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:28,189 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:28,190 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,190 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:28,190 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:28,190 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:28,190 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,191 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:28,197 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:45:28,197 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,197 stack: []
DEBUG 2022-02-14 16:45:28,197 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:45:28,197 stack []
DEBUG 2022-02-14 16:45:28,197 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-02-14 16:45:28,197 stack []
DEBUG 2022-02-14 16:45:28,197 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-02-14 16:45:28,197 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,197 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-02-14 16:45:28,197 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-02-14 16:45:28,198 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-02-14 16:45:28,198 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:45:28,198 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-02-14 16:45:28,198 stack []
DEBUG 2022-02-14 16:45:28,198 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-02-14 16:45:28,198 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack []
DEBUG 2022-02-14 16:45:28,198 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:28,198 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:28,198 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:28,199 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:28,199 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:28,199 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-02-14 16:45:28,199 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:28,199 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,199 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,199 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:28,199 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-02-14 16:45:28,199 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:28,199 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,199 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,199 stack: []
DEBUG 2022-02-14 16:45:28,199 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-02-14 16:45:28,199 stack []
DEBUG 2022-02-14 16:45:28,199 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:45:28,199 stack ['$val54.0']
DEBUG 2022-02-14 16:45:28,199 end state. edges=[]
DEBUG 2022-02-14 16:45:28,199 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,199 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,199 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-02-14 16:45:28,199 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:28,199 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:45:28,199 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-02-14 16:45:28,200 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-02-14 16:45:28,200 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:28,200 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,200 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,200 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,200 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,200 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:28,200 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,201 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,201 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,201 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,201 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:28,201 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:28,201 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,201 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:28,202 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:28,202 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:28,202 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,203 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:28,209 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:28,209 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,209 stack: []
DEBUG 2022-02-14 16:45:28,209 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack []
DEBUG 2022-02-14 16:45:28,209 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack []
DEBUG 2022-02-14 16:45:28,209 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,209 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:28,209 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:28,209 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:28,209 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:45:28,209 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:28,209 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack []
DEBUG 2022-02-14 16:45:28,210 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack ['$14load_global.5']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-02-14 16:45:28,210 stack ['$22call_function.9']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack []
DEBUG 2022-02-14 16:45:28,210 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack ['$26load_global.10']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack ['$28load_attr.11']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack ['$30load_attr.12']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack ['$32load_method.13']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-02-14 16:45:28,210 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-02-14 16:45:28,210 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-02-14 16:45:28,211 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-02-14 16:45:28,211 stack ['$38call_method.16']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack []
DEBUG 2022-02-14 16:45:28,211 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$42load_global.17']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$44load_attr.18']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$46load_attr.19']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$48load_method.20']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$56call_method.24']
DEBUG 2022-02-14 16:45:28,211 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,211 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,211 stack: ['$phi60.0']
DEBUG 2022-02-14 16:45:28,211 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-02-14 16:45:28,211 stack ['$phi60.0']
DEBUG 2022-02-14 16:45:28,212 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,212 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,212 stack: []
DEBUG 2022-02-14 16:45:28,212 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-02-14 16:45:28,212 stack []
DEBUG 2022-02-14 16:45:28,212 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:28,212 stack ['$val80.0']
DEBUG 2022-02-14 16:45:28,212 end state. edges=[]
DEBUG 2022-02-14 16:45:28,212 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:28,212 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-02-14 16:45:28,212 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-02-14 16:45:28,212 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-02-14 16:45:28,213 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-02-14 16:45:28,213 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:45:28,213 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-02-14 16:45:28,213 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-02-14 16:45:28,213 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:28,213 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,213 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:28,213 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,213 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,213 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:45:28,213 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,213 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,214 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,214 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:28,214 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:28,214 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-02-14 16:45:28,214 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,214 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-02-14 16:45:28,215 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:45:28,215 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-02-14 16:45:28,215 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,217 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x7f71c176eee0>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-02-14 16:45:28,305 bytecode dump:
>          0	NOP(arg=None, lineno=457)
           2	LOAD_FAST(arg=0, lineno=457)
           4	LOAD_CONST(arg=1, lineno=457)
           6	COMPARE_OP(arg=2, lineno=457)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=457)
          10	LOAD_GLOBAL(arg=0, lineno=458)
          12	LOAD_CONST(arg=2, lineno=458)
          14	CALL_FUNCTION(arg=1, lineno=458)
          16	RAISE_VARARGS(arg=1, lineno=458)
>         18	LOAD_CONST(arg=0, lineno=458)
          20	RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:45:28,305 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,305 stack: []
DEBUG 2022-02-14 16:45:28,305 dispatch pc=0, inst=NOP(arg=None, lineno=457)
DEBUG 2022-02-14 16:45:28,305 stack []
DEBUG 2022-02-14 16:45:28,305 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=457)
DEBUG 2022-02-14 16:45:28,305 stack []
DEBUG 2022-02-14 16:45:28,305 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=457)
DEBUG 2022-02-14 16:45:28,305 stack ['$arr_size2.0']
DEBUG 2022-02-14 16:45:28,305 dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=457)
DEBUG 2022-02-14 16:45:28,305 stack ['$arr_size2.0', '$const4.1']
DEBUG 2022-02-14 16:45:28,305 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=457)
DEBUG 2022-02-14 16:45:28,305 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:28,306 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:28,306 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,306 stack: []
DEBUG 2022-02-14 16:45:28,306 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=458)
DEBUG 2022-02-14 16:45:28,306 stack []
DEBUG 2022-02-14 16:45:28,306 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=458)
DEBUG 2022-02-14 16:45:28,306 stack ['$10load_global.0']
DEBUG 2022-02-14 16:45:28,306 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=458)
DEBUG 2022-02-14 16:45:28,306 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:45:28,306 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=458)
DEBUG 2022-02-14 16:45:28,306 stack ['$14call_function.2']
DEBUG 2022-02-14 16:45:28,306 end state. edges=[]
DEBUG 2022-02-14 16:45:28,306 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,306 stack: []
DEBUG 2022-02-14 16:45:28,306 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=458)
DEBUG 2022-02-14 16:45:28,306 stack []
DEBUG 2022-02-14 16:45:28,307 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:45:28,307 stack ['$const18.0']
DEBUG 2022-02-14 16:45:28,307 end state. edges=[]
DEBUG 2022-02-14 16:45:28,307 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,307 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,307 defmap: {}
DEBUG 2022-02-14 16:45:28,307 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,307 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,307 keep phismap: {}
DEBUG 2022-02-14 16:45:28,307 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,307 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,308 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr_size2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$arr_size2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:45:28,308 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,308 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,308 label 0:
    arr_size = arg(0, name=arr_size)         ['arr_size']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = arr_size == $const4.1   ['$6compare_op.2', '$const4.1', 'arr_size']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:45:28,312 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,312 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9e3bdf0>
DEBUG 2022-02-14 16:45:28,312 on stmt: arr_size = arg(0, name=arr_size)
DEBUG 2022-02-14 16:45:28,312 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:28,312 on stmt: $6compare_op.2 = arr_size == $const4.1
DEBUG 2022-02-14 16:45:28,312 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:28,312 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,312 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:45:28,312 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:45:28,312 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9e3bdf0>
DEBUG 2022-02-14 16:45:28,312 on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:45:28,313 on stmt: $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-14 16:45:28,313 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,313 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-14 16:45:28,313 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:45:28,313 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9e3bdf0>
DEBUG 2022-02-14 16:45:28,313 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:45:28,313 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:45:28,313 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:45:28,313 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7f71ba0c63a0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7f71ba0c6700>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7f71ba0c6b80>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b9de9e20>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f71ba0c6160>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f71ba0c6520>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7f71ba0c69a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b9de9610>],
             'arr_size': [<numba.core.ir.Assign object at 0x7f71ba801ee0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f71ba0c6e50>]})
DEBUG 2022-02-14 16:45:28,313 SSA violators set()
DEBUG 2022-02-14 16:45:28,345 bytecode dump:
>          0	NOP(arg=None, lineno=610)
           2	LOAD_GLOBAL(arg=0, lineno=610)
           4	LOAD_FAST(arg=0, lineno=610)
           6	CALL_FUNCTION(arg=1, lineno=610)
           8	RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:45:28,346 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,346 stack: []
DEBUG 2022-02-14 16:45:28,346 dispatch pc=0, inst=NOP(arg=None, lineno=610)
DEBUG 2022-02-14 16:45:28,346 stack []
DEBUG 2022-02-14 16:45:28,346 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=610)
DEBUG 2022-02-14 16:45:28,346 stack []
DEBUG 2022-02-14 16:45:28,346 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=610)
DEBUG 2022-02-14 16:45:28,346 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,346 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=610)
DEBUG 2022-02-14 16:45:28,346 stack ['$2load_global.0', '$desc4.1']
DEBUG 2022-02-14 16:45:28,346 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:45:28,346 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:28,346 end state. edges=[]
DEBUG 2022-02-14 16:45:28,346 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,346 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,346 defmap: {}
DEBUG 2022-02-14 16:45:28,346 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,346 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,346 keep phismap: {}
DEBUG 2022-02-14 16:45:28,347 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,347 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,347 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$desc4.1'}), (6, {'func': '$2load_global.0', 'args': ['$desc4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,347 label 0:
    desc = arg(0, name=desc)                 ['desc']
    $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'desc']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:28,348 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,348 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba1b5b80>
DEBUG 2022-02-14 16:45:28,348 on stmt: desc = arg(0, name=desc)
DEBUG 2022-02-14 16:45:28,348 on stmt: $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>)
DEBUG 2022-02-14 16:45:28,349 on stmt: $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,349 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:28,349 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:28,349 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9e3fdf0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71b9e40340>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b9e40730>],
             'desc': [<numba.core.ir.Assign object at 0x7f71b9e3fdc0>]})
DEBUG 2022-02-14 16:45:28,349 SSA violators set()
DEBUG 2022-02-14 16:45:28,378 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,378 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,378 stack: []
DEBUG 2022-02-14 16:45:28,378 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,378 stack []
DEBUG 2022-02-14 16:45:28,378 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,378 stack []
DEBUG 2022-02-14 16:45:28,378 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,378 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,378 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:28,378 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:28,378 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:28,378 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:28,379 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,379 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:28,379 end state. edges=[]
DEBUG 2022-02-14 16:45:28,379 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,379 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,379 defmap: {}
DEBUG 2022-02-14 16:45:28,379 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,379 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,379 keep phismap: {}
DEBUG 2022-02-14 16:45:28,379 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,379 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,379 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,380 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:28,381 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,381 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0e9670>
DEBUG 2022-02-14 16:45:28,381 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:28,381 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:28,381 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:28,381 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,382 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:28,382 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:28,382 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba1f6340>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba175f10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba1f6bb0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71ba175fd0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba175ca0>]})
DEBUG 2022-02-14 16:45:28,382 SSA violators set()
DEBUG 2022-02-14 16:45:28,469 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,469 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,469 stack: []
DEBUG 2022-02-14 16:45:28,469 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,469 stack []
DEBUG 2022-02-14 16:45:28,469 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,469 stack []
DEBUG 2022-02-14 16:45:28,469 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,469 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,469 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:28,470 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:28,470 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:28,470 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:28,470 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,470 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:28,470 end state. edges=[]
DEBUG 2022-02-14 16:45:28,470 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,470 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,470 defmap: {}
DEBUG 2022-02-14 16:45:28,470 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,470 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,470 keep phismap: {}
DEBUG 2022-02-14 16:45:28,470 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,470 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,470 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,470 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:28,472 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,472 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba59bb20>
DEBUG 2022-02-14 16:45:28,472 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:28,472 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:28,472 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:28,472 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,472 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:28,472 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:28,472 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba59b190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba59b580>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba59b1c0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba59bca0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba59b640>]})
DEBUG 2022-02-14 16:45:28,472 SSA violators set()
DEBUG 2022-02-14 16:45:28,499 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,499 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,500 stack: []
DEBUG 2022-02-14 16:45:28,500 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack []
DEBUG 2022-02-14 16:45:28,500 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack []
DEBUG 2022-02-14 16:45:28,500 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,500 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:28,500 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:28,500 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,500 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:28,500 end state. edges=[]
DEBUG 2022-02-14 16:45:28,500 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,500 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,500 defmap: {}
DEBUG 2022-02-14 16:45:28,500 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,500 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,500 keep phismap: {}
DEBUG 2022-02-14 16:45:28,500 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,500 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,500 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,501 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:28,502 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,502 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba3bef70>
DEBUG 2022-02-14 16:45:28,502 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:28,502 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:28,502 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:28,502 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,502 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:28,502 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:28,502 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba38c970>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba38c640>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba38c2e0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba3bebe0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba3bed30>]})
DEBUG 2022-02-14 16:45:28,502 SSA violators set()
DEBUG 2022-02-14 16:45:28,984 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,984 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:28,984 stack: []
DEBUG 2022-02-14 16:45:28,984 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,984 stack []
DEBUG 2022-02-14 16:45:28,984 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,984 stack []
DEBUG 2022-02-14 16:45:28,985 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:28,985 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:28,985 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:28,985 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:28,985 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:28,985 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:28,985 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:28,985 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:28,985 end state. edges=[]
DEBUG 2022-02-14 16:45:28,985 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:28,985 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:28,985 defmap: {}
DEBUG 2022-02-14 16:45:28,985 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,985 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:28,985 keep phismap: {}
DEBUG 2022-02-14 16:45:28,985 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:28,985 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:28,985 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:28,986 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:28,987 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:28,987 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba278a90>
DEBUG 2022-02-14 16:45:28,987 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:28,987 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:28,987 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:28,987 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:28,987 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:28,987 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:28,987 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba273910>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba2733d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba2737f0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71ba278370>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba278190>]})
DEBUG 2022-02-14 16:45:28,987 SSA violators set()
DEBUG 2022-02-14 16:45:29,047 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:29,047 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,047 stack: []
DEBUG 2022-02-14 16:45:29,047 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,047 stack []
DEBUG 2022-02-14 16:45:29,047 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,047 stack []
DEBUG 2022-02-14 16:45:29,047 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:29,047 stack ['$val_40__arr2.0']
DEBUG 2022-02-14 16:45:29,047 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,047 stack ['$val_40__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:45:29,047 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-02-14 16:45:29,047 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:45:29,047 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,047 stack []
DEBUG 2022-02-14 16:45:29,048 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-02-14 16:45:29,048 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,048 stack ['$34call_function.15']
DEBUG 2022-02-14 16:45:29,048 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,048 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,049 stack: ['$phi38.0']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:45:29,049 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:29,049 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,049 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,049 stack: []
DEBUG 2022-02-14 16:45:29,049 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-02-14 16:45:29,049 stack []
DEBUG 2022-02-14 16:45:29,049 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:29,049 stack ['$val_4048.0']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:45:29,049 stack ['$val_4048.0', '$val_40__arr50.1']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:29,049 stack ['$val_4048.0', '$val_40__arr50.1', '$const52.2']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:45:29,049 stack []
DEBUG 2022-02-14 16:45:29,049 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:29,049 stack ['$const56.3']
DEBUG 2022-02-14 16:45:29,049 end state. edges=[]
DEBUG 2022-02-14 16:45:29,049 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,049 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-02-14 16:45:29,049 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:45:29,049 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:29,049 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:29,050 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-02-14 16:45:29,050 stack ['$phi40.0', '$const42.2']
DEBUG 2022-02-14 16:45:29,050 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-02-14 16:45:29,050 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:29,050 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,050 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,050 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,050 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,050 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:45:29,050 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,050 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,050 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,051 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,051 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:29,051 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:45:29,051 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,051 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_40__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_40__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-02-14 16:45:29,051 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:45:29,051 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:45:29,051 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_4048.0'}), (50, {'res': '$val_40__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_40__arr50.1', 'index': '$const52.2', 'value': '$val_4048.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,052 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_40__arr = arg(2, name=val_40__arr)   ['val_40__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_40 = getitem(value=val_40__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_40', 'val_40__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_236 = $phi40.1             ['$phi40.1', 'parfor__index_236']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_40__arr[$const52.2] = val_40         ['$const52.2', 'val_40', 'val_40__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-02-14 16:45:29,057 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,057 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,057 on stmt: sched.732 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,057 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:29,057 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:45:29,057 on stmt: $const4.1.733 = const(int, 0)
DEBUG 2022-02-14 16:45:29,057 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.733, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,057 on stmt: $10load_global.3.734 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,057 on stmt: $const14.5.735 = const(int, 0)
DEBUG 2022-02-14 16:45:29,057 on stmt: $16binary_subscr.6.736 = getitem(value=sched.732, index=$const14.5.735, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,057 on stmt: $const20.8.737 = const(int, 1)
DEBUG 2022-02-14 16:45:29,057 on stmt: $22binary_subscr.9.738 = getitem(value=sched.732, index=$const20.8.737, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,057 on stmt: $24load_global.10.739 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,057 on stmt: $26load_method.11.740 = getattr(value=$24load_global.10.739, attr=uint8)
DEBUG 2022-02-14 16:45:29,058 on stmt: $const28.12.741 = const(int, 1)
DEBUG 2022-02-14 16:45:29,058 on stmt: $30call_method.13.742 = call $26load_method.11.740($const28.12.741, func=$26load_method.11.740, args=[Var($const28.12.741, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,058 on stmt: $32binary_add.14.743 = $22binary_subscr.9.738 + $30call_method.13.742
DEBUG 2022-02-14 16:45:29,058 on stmt: $34call_function.15.744 = call $10load_global.3.734($16binary_subscr.6.736, $32binary_add.14.743, func=$10load_global.3.734, args=[Var($16binary_subscr.6.736, <string>:3), Var($32binary_add.14.743, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,058 on stmt: $36get_iter.16.745 = getiter(value=$34call_function.15.744)
DEBUG 2022-02-14 16:45:29,058 on stmt: $phi38.0.746 = $36get_iter.16.745
DEBUG 2022-02-14 16:45:29,058 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,058 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:45:29,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,058 on stmt: $38for_iter.1.747 = iternext(value=$phi38.0.746)
DEBUG 2022-02-14 16:45:29,058 on stmt: $38for_iter.2.748 = pair_first(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,058 on stmt: $38for_iter.3.749 = pair_second(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,058 on stmt: $phi40.1.750 = $38for_iter.2.748
DEBUG 2022-02-14 16:45:29,058 on stmt: branch $38for_iter.3.749, 40, 246
DEBUG 2022-02-14 16:45:29,058 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:29,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,058 on stmt: parfor__index_236 = $phi40.1.750
DEBUG 2022-02-14 16:45:29,058 on stmt: jump 48
DEBUG 2022-02-14 16:45:29,058 ==== SSA block analysis pass on 246
DEBUG 2022-02-14 16:45:29,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,058 on stmt: $const52.2.751 = const(int, 0)
DEBUG 2022-02-14 16:45:29,058 on stmt: val_40__arr[$const52.2.751] = val_40
DEBUG 2022-02-14 16:45:29,058 on stmt: $const56.3.752 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,058 on stmt: $58return_value.4.753 = cast(value=$const56.3.752)
DEBUG 2022-02-14 16:45:29,058 on stmt: return $58return_value.4.753
DEBUG 2022-02-14 16:45:29,058 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:29,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,059 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,059 on stmt: $val.40.685 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,059 on stmt: val_40 = $val.40.685
DEBUG 2022-02-14 16:45:29,059 on stmt: jump 245
DEBUG 2022-02-14 16:45:29,059 ==== SSA block analysis pass on 245
DEBUG 2022-02-14 16:45:29,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba379fd0>
DEBUG 2022-02-14 16:45:29,059 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,059 defs defaultdict(<class 'list'>,
            {'$10load_global.3.734': [<numba.core.ir.Assign object at 0x7f71ba00a820>],
             '$16binary_subscr.6.736': [<numba.core.ir.Assign object at 0x7f71ba00ac70>],
             '$22binary_subscr.9.738': [<numba.core.ir.Assign object at 0x7f71ba0090d0>],
             '$24load_global.10.739': [<numba.core.ir.Assign object at 0x7f71ba009220>],
             '$26load_method.11.740': [<numba.core.ir.Assign object at 0x7f71ba0093a0>],
             '$30call_method.13.742': [<numba.core.ir.Assign object at 0x7f71ba009730>],
             '$32binary_add.14.743': [<numba.core.ir.Assign object at 0x7f71ba009850>],
             '$34call_function.15.744': [<numba.core.ir.Assign object at 0x7f71ba009a00>],
             '$36get_iter.16.745': [<numba.core.ir.Assign object at 0x7f71ba009b20>],
             '$38for_iter.1.747': [<numba.core.ir.Assign object at 0x7f71ba009d30>],
             '$38for_iter.2.748': [<numba.core.ir.Assign object at 0x7f71ba009e50>],
             '$38for_iter.3.749': [<numba.core.ir.Assign object at 0x7f71ba009f70>],
             '$46binary_subscr.5.59': [<numba.core.ir.Assign object at 0x7f71b9ddb6d0>],
             '$58return_value.4.753': [<numba.core.ir.Assign object at 0x7f71ba001dc0>],
             '$const14.5.735': [<numba.core.ir.Assign object at 0x7f71ba00aac0>],
             '$const20.8.737': [<numba.core.ir.Assign object at 0x7f71ba00aee0>],
             '$const28.12.741': [<numba.core.ir.Assign object at 0x7f71ba009520>],
             '$const4.1.733': [<numba.core.ir.Assign object at 0x7f71ba00a400>],
             '$const52.2.751': [<numba.core.ir.Assign object at 0x7f71ba001a00>],
             '$const56.3.752': [<numba.core.ir.Assign object at 0x7f71ba001c40>],
             '$phi38.0.746': [<numba.core.ir.Assign object at 0x7f71ba00a310>],
             '$phi40.1.750': [<numba.core.ir.Assign object at 0x7f71ba009c70>],
             '$val.40.685': [<numba.core.ir.Assign object at 0x7f71b9ddb850>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x7f71ba00a040>],
             'parfor__index_236': [<numba.core.ir.Assign object at 0x7f71ba001280>],
             'sched.732': [<numba.core.ir.Assign object at 0x7f71ba392820>],
             'val_40': [<numba.core.ir.Assign object at 0x7f71ba00a5b0>,
                        <numba.core.ir.Assign object at 0x7f71b9ddb910>],
             'val_40__arr': [<numba.core.ir.Assign object at 0x7f71ba00a160>]})
DEBUG 2022-02-14 16:45:29,059 SSA violators {'val_40'}
DEBUG 2022-02-14 16:45:29,059 Fix SSA violator on var val_40
DEBUG 2022-02-14 16:45:29,059 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,059 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,059 on stmt: sched.732 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,059 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:29,059 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:45:29,059 on stmt: $const4.1.733 = const(int, 0)
DEBUG 2022-02-14 16:45:29,059 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.733, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,059 first assign: val_40
DEBUG 2022-02-14 16:45:29,059 replaced with: val_40 = getitem(value=val_40__arr, index=$const4.1.733, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,059 on stmt: $10load_global.3.734 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,060 on stmt: $const14.5.735 = const(int, 0)
DEBUG 2022-02-14 16:45:29,060 on stmt: $16binary_subscr.6.736 = getitem(value=sched.732, index=$const14.5.735, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,060 on stmt: $const20.8.737 = const(int, 1)
DEBUG 2022-02-14 16:45:29,060 on stmt: $22binary_subscr.9.738 = getitem(value=sched.732, index=$const20.8.737, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,060 on stmt: $24load_global.10.739 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,060 on stmt: $26load_method.11.740 = getattr(value=$24load_global.10.739, attr=uint8)
DEBUG 2022-02-14 16:45:29,060 on stmt: $const28.12.741 = const(int, 1)
DEBUG 2022-02-14 16:45:29,060 on stmt: $30call_method.13.742 = call $26load_method.11.740($const28.12.741, func=$26load_method.11.740, args=[Var($const28.12.741, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,060 on stmt: $32binary_add.14.743 = $22binary_subscr.9.738 + $30call_method.13.742
DEBUG 2022-02-14 16:45:29,060 on stmt: $34call_function.15.744 = call $10load_global.3.734($16binary_subscr.6.736, $32binary_add.14.743, func=$10load_global.3.734, args=[Var($16binary_subscr.6.736, <string>:3), Var($32binary_add.14.743, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,060 on stmt: $36get_iter.16.745 = getiter(value=$34call_function.15.744)
DEBUG 2022-02-14 16:45:29,060 on stmt: $phi38.0.746 = $36get_iter.16.745
DEBUG 2022-02-14 16:45:29,060 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,060 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:45:29,060 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,060 on stmt: $38for_iter.1.747 = iternext(value=$phi38.0.746)
DEBUG 2022-02-14 16:45:29,060 on stmt: $38for_iter.2.748 = pair_first(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,060 on stmt: $38for_iter.3.749 = pair_second(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,060 on stmt: $phi40.1.750 = $38for_iter.2.748
DEBUG 2022-02-14 16:45:29,060 on stmt: branch $38for_iter.3.749, 40, 246
DEBUG 2022-02-14 16:45:29,060 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:29,060 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,060 on stmt: parfor__index_236 = $phi40.1.750
DEBUG 2022-02-14 16:45:29,060 on stmt: jump 48
DEBUG 2022-02-14 16:45:29,060 ==== SSA block rewrite pass on 246
DEBUG 2022-02-14 16:45:29,061 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,061 on stmt: $const52.2.751 = const(int, 0)
DEBUG 2022-02-14 16:45:29,061 on stmt: val_40__arr[$const52.2.751] = val_40
DEBUG 2022-02-14 16:45:29,061 on stmt: $const56.3.752 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,061 on stmt: $58return_value.4.753 = cast(value=$const56.3.752)
DEBUG 2022-02-14 16:45:29,061 on stmt: return $58return_value.4.753
DEBUG 2022-02-14 16:45:29,061 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,061 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,061 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,061 on stmt: $val.40.685 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,061 on stmt: val_40 = $val.40.685
DEBUG 2022-02-14 16:45:29,061 replaced with: val_40.1 = $val.40.685
DEBUG 2022-02-14 16:45:29,061 on stmt: jump 245
DEBUG 2022-02-14 16:45:29,061 ==== SSA block rewrite pass on 245
DEBUG 2022-02-14 16:45:29,061 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,061 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,061 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba3acdc0>],
             48: [<numba.core.ir.Assign object at 0x7f71ba379b50>]})
DEBUG 2022-02-14 16:45:29,061 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,061 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,061 on stmt: sched.732 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,061 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:29,061 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:45:29,061 on stmt: $const4.1.733 = const(int, 0)
DEBUG 2022-02-14 16:45:29,062 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.733, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,062 on stmt: $10load_global.3.734 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,062 on stmt: $const14.5.735 = const(int, 0)
DEBUG 2022-02-14 16:45:29,062 on stmt: $16binary_subscr.6.736 = getitem(value=sched.732, index=$const14.5.735, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,062 on stmt: $const20.8.737 = const(int, 1)
DEBUG 2022-02-14 16:45:29,062 on stmt: $22binary_subscr.9.738 = getitem(value=sched.732, index=$const20.8.737, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,062 on stmt: $24load_global.10.739 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,062 on stmt: $26load_method.11.740 = getattr(value=$24load_global.10.739, attr=uint8)
DEBUG 2022-02-14 16:45:29,062 on stmt: $const28.12.741 = const(int, 1)
DEBUG 2022-02-14 16:45:29,062 on stmt: $30call_method.13.742 = call $26load_method.11.740($const28.12.741, func=$26load_method.11.740, args=[Var($const28.12.741, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,062 on stmt: $32binary_add.14.743 = $22binary_subscr.9.738 + $30call_method.13.742
DEBUG 2022-02-14 16:45:29,062 on stmt: $34call_function.15.744 = call $10load_global.3.734($16binary_subscr.6.736, $32binary_add.14.743, func=$10load_global.3.734, args=[Var($16binary_subscr.6.736, <string>:3), Var($32binary_add.14.743, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,062 on stmt: $36get_iter.16.745 = getiter(value=$34call_function.15.744)
DEBUG 2022-02-14 16:45:29,062 on stmt: $phi38.0.746 = $36get_iter.16.745
DEBUG 2022-02-14 16:45:29,062 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,062 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:45:29,062 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,062 on stmt: $38for_iter.1.747 = iternext(value=$phi38.0.746)
DEBUG 2022-02-14 16:45:29,062 on stmt: $38for_iter.2.748 = pair_first(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,062 on stmt: $38for_iter.3.749 = pair_second(value=$38for_iter.1.747)
DEBUG 2022-02-14 16:45:29,062 on stmt: $phi40.1.750 = $38for_iter.2.748
DEBUG 2022-02-14 16:45:29,062 on stmt: branch $38for_iter.3.749, 40, 246
DEBUG 2022-02-14 16:45:29,062 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:29,062 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,063 on stmt: parfor__index_236 = $phi40.1.750
DEBUG 2022-02-14 16:45:29,063 on stmt: jump 48
DEBUG 2022-02-14 16:45:29,063 ==== SSA block rewrite pass on 246
DEBUG 2022-02-14 16:45:29,063 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,063 on stmt: $const52.2.751 = const(int, 0)
DEBUG 2022-02-14 16:45:29,063 on stmt: val_40__arr[$const52.2.751] = val_40
DEBUG 2022-02-14 16:45:29,063 find_def var='val_40' stmt=val_40__arr[$const52.2.751] = val_40
DEBUG 2022-02-14 16:45:29,063 find_def_from_top label 246
DEBUG 2022-02-14 16:45:29,063 idom 38 from label 246
DEBUG 2022-02-14 16:45:29,063 find_def_from_bottom label 38
DEBUG 2022-02-14 16:45:29,063 find_def_from_top label 38
DEBUG 2022-02-14 16:45:29,063 insert phi node val_40.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:45:29,063 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:29,063 incoming_def val_40 = getitem(value=val_40__arr, index=$const4.1.733, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,063 find_def_from_bottom label 245
DEBUG 2022-02-14 16:45:29,063 find_def_from_top label 245
DEBUG 2022-02-14 16:45:29,063 idom 48 from label 245
DEBUG 2022-02-14 16:45:29,063 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:29,063 incoming_def val_40.1 = $val.40.685
DEBUG 2022-02-14 16:45:29,063 replaced with: val_40__arr[$const52.2.751] = val_40.2
DEBUG 2022-02-14 16:45:29,063 on stmt: $const56.3.752 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,063 on stmt: $58return_value.4.753 = cast(value=$const56.3.752)
DEBUG 2022-02-14 16:45:29,063 on stmt: return $58return_value.4.753
DEBUG 2022-02-14 16:45:29,063 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,063 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,063 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,063 on stmt: $val.40.685 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,064 find_def var='val_40' stmt=$val.40.685 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,064 find_def_from_top label 48
DEBUG 2022-02-14 16:45:29,064 idom 40 from label 48
DEBUG 2022-02-14 16:45:29,064 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:29,064 find_def_from_top label 40
DEBUG 2022-02-14 16:45:29,064 idom 38 from label 40
DEBUG 2022-02-14 16:45:29,064 find_def_from_bottom label 38
DEBUG 2022-02-14 16:45:29,064 replaced with: $val.40.685 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40.2, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,064 on stmt: val_40.1 = $val.40.685
DEBUG 2022-02-14 16:45:29,064 on stmt: jump 245
DEBUG 2022-02-14 16:45:29,064 ==== SSA block rewrite pass on 245
DEBUG 2022-02-14 16:45:29,064 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba3ace20>
DEBUG 2022-02-14 16:45:29,064 on stmt: jump 38
DEBUG 2022-02-14 16:45:29,471 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:45:29,471 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,471 stack: []
DEBUG 2022-02-14 16:45:29,471 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,471 stack []
DEBUG 2022-02-14 16:45:29,471 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,471 stack []
DEBUG 2022-02-14 16:45:29,471 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:29,471 stack ['$val_111__arr2.0']
DEBUG 2022-02-14 16:45:29,471 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,471 stack ['$val_111__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:45:29,471 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-02-14 16:45:29,471 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:45:29,471 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:29,471 stack []
DEBUG 2022-02-14 16:45:29,472 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,472 stack ['$val_70__arr10.3']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,472 stack ['$val_70__arr10.3', '$const12.4']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-02-14 16:45:29,472 stack ['$14binary_subscr.5']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack []
DEBUG 2022-02-14 16:45:29,472 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:29,472 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-02-14 16:45:29,472 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,473 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:29,473 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,473 stack ['$42call_function.18']
DEBUG 2022-02-14 16:45:29,473 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,473 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,473 stack: ['$phi46.0']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-02-14 16:45:29,473 stack ['$phi46.0']
DEBUG 2022-02-14 16:45:29,473 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,473 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,473 stack: []
DEBUG 2022-02-14 16:45:29,473 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-02-14 16:45:29,473 stack []
DEBUG 2022-02-14 16:45:29,473 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-02-14 16:45:29,473 stack ['$val_11156.0']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-02-14 16:45:29,473 stack ['$val_11156.0', '$val_111__arr58.1']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:29,473 stack ['$val_11156.0', '$val_111__arr58.1', '$const60.2']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-02-14 16:45:29,473 stack []
DEBUG 2022-02-14 16:45:29,473 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-02-14 16:45:29,473 stack ['$val_7064.3']
DEBUG 2022-02-14 16:45:29,473 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-02-14 16:45:29,473 stack ['$val_7064.3', '$val_70__arr66.4']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-02-14 16:45:29,474 stack ['$val_7064.3', '$val_70__arr66.4', '$const68.5']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-02-14 16:45:29,474 stack []
DEBUG 2022-02-14 16:45:29,474 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:45:29,474 stack ['$const72.6']
DEBUG 2022-02-14 16:45:29,474 end state. edges=[]
DEBUG 2022-02-14 16:45:29,474 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,474 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-02-14 16:45:29,474 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:45:29,474 stack ['$phi48.0']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-02-14 16:45:29,474 stack ['$phi48.0', '$const50.2']
DEBUG 2022-02-14 16:45:29,474 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-02-14 16:45:29,474 stack ['$phi48.0']
DEBUG 2022-02-14 16:45:29,474 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,474 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,474 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,474 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,474 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-02-14 16:45:29,474 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,475 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,475 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,475 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,475 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:29,475 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-02-14 16:45:29,475 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,475 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_111__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_111__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_70__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_70__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-02-14 16:45:29,476 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-02-14 16:45:29,476 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-02-14 16:45:29,476 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_11156.0'}), (58, {'res': '$val_111__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_111__arr58.1', 'index': '$const60.2', 'value': '$val_11156.0'}), (64, {'res': '$val_7064.3'}), (66, {'res': '$val_70__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_70__arr66.4', 'index': '$const68.5', 'value': '$val_7064.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,476 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_111__arr = arg(2, name=val_111__arr) ['val_111__arr']
    val_70__arr = arg(3, name=val_70__arr)   ['val_70__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_111 = getitem(value=val_111__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_111', 'val_111__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_70 = getitem(value=val_70__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_70', 'val_70__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_210 = $phi48.1             ['$phi48.1', 'parfor__index_210']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_111__arr[$const60.2] = val_111       ['$const60.2', 'val_111', 'val_111__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_70__arr[$const68.5] = val_70         ['$const68.5', 'val_70', 'val_70__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-02-14 16:45:29,482 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,482 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,482 on stmt: sched.808 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,482 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:29,482 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:45:29,482 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:45:29,482 on stmt: $const4.1.809 = const(int, 0)
DEBUG 2022-02-14 16:45:29,482 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,482 on stmt: $const12.4.810 = const(int, 0)
DEBUG 2022-02-14 16:45:29,482 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,483 on stmt: $18load_global.6.811 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,483 on stmt: $const22.8.812 = const(int, 0)
DEBUG 2022-02-14 16:45:29,483 on stmt: $24binary_subscr.9.813 = getitem(value=sched.808, index=$const22.8.812, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,483 on stmt: $const28.11.814 = const(int, 1)
DEBUG 2022-02-14 16:45:29,483 on stmt: $30binary_subscr.12.815 = getitem(value=sched.808, index=$const28.11.814, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,483 on stmt: $32load_global.13.816 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,483 on stmt: $34load_method.14.817 = getattr(value=$32load_global.13.816, attr=uint8)
DEBUG 2022-02-14 16:45:29,483 on stmt: $const36.15.818 = const(int, 1)
DEBUG 2022-02-14 16:45:29,483 on stmt: $38call_method.16.819 = call $34load_method.14.817($const36.15.818, func=$34load_method.14.817, args=[Var($const36.15.818, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,483 on stmt: $40binary_add.17.820 = $30binary_subscr.12.815 + $38call_method.16.819
DEBUG 2022-02-14 16:45:29,483 on stmt: $42call_function.18.821 = call $18load_global.6.811($24binary_subscr.9.813, $40binary_add.17.820, func=$18load_global.6.811, args=[Var($24binary_subscr.9.813, <string>:4), Var($40binary_add.17.820, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,483 on stmt: $44get_iter.19.822 = getiter(value=$42call_function.18.821)
DEBUG 2022-02-14 16:45:29,483 on stmt: $phi46.0.823 = $44get_iter.19.822
DEBUG 2022-02-14 16:45:29,483 on stmt: $arg_out_var.216 = const(int, 1)
DEBUG 2022-02-14 16:45:29,483 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:29,483 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,483 ==== SSA block analysis pass on 46
DEBUG 2022-02-14 16:45:29,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,483 on stmt: $46for_iter.1.824 = iternext(value=$phi46.0.823)
DEBUG 2022-02-14 16:45:29,483 on stmt: $46for_iter.2.825 = pair_first(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,483 on stmt: $46for_iter.3.826 = pair_second(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,483 on stmt: $phi48.1.827 = $46for_iter.2.825
DEBUG 2022-02-14 16:45:29,483 on stmt: branch $46for_iter.3.826, 48, 1038
DEBUG 2022-02-14 16:45:29,483 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:29,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,483 on stmt: parfor__index_210 = $phi48.1.827
DEBUG 2022-02-14 16:45:29,483 on stmt: jump 56
DEBUG 2022-02-14 16:45:29,483 ==== SSA block analysis pass on 1038
DEBUG 2022-02-14 16:45:29,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,484 on stmt: $const60.2.828 = const(int, 0)
DEBUG 2022-02-14 16:45:29,484 on stmt: val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,484 on stmt: $const68.5.829 = const(int, 0)
DEBUG 2022-02-14 16:45:29,484 on stmt: val_70__arr[$const68.5.829] = val_70
DEBUG 2022-02-14 16:45:29,484 on stmt: $const72.6.830 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,484 on stmt: $74return_value.7.831 = cast(value=$const72.6.830)
DEBUG 2022-02-14 16:45:29,484 on stmt: return $74return_value.7.831
DEBUG 2022-02-14 16:45:29,484 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:45:29,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,484 on stmt: $arg_out_var.215 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,484 on stmt: $expr_out_var.214 = $arg_out_var.215 + $arg_out_var.216
DEBUG 2022-02-14 16:45:29,484 on stmt: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,484 on stmt: val_70 = $val.70.686
DEBUG 2022-02-14 16:45:29,484 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,484 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,484 on stmt: jump 1037
DEBUG 2022-02-14 16:45:29,484 ==== SSA block analysis pass on 1037
DEBUG 2022-02-14 16:45:29,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9ec1ee0>
DEBUG 2022-02-14 16:45:29,484 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,485 defs defaultdict(<class 'list'>,
            {'$18load_global.6.811': [<numba.core.ir.Assign object at 0x7f71b9fa2610>],
             '$24binary_subscr.9.813': [<numba.core.ir.Assign object at 0x7f71b9f0e2b0>],
             '$30binary_subscr.12.815': [<numba.core.ir.Assign object at 0x7f71b9f0e6d0>],
             '$32load_global.13.816': [<numba.core.ir.Assign object at 0x7f71b9f0e820>],
             '$34load_method.14.817': [<numba.core.ir.Assign object at 0x7f71b9f0e9a0>],
             '$38call_method.16.819': [<numba.core.ir.Assign object at 0x7f71b9f0ed30>],
             '$40binary_add.17.820': [<numba.core.ir.Assign object at 0x7f71b9f0ee50>],
             '$42call_function.18.821': [<numba.core.ir.Assign object at 0x7f71b9f08040>],
             '$44get_iter.19.822': [<numba.core.ir.Assign object at 0x7f71b9f08160>],
             '$46for_iter.1.824': [<numba.core.ir.Assign object at 0x7f71b9f082b0>],
             '$46for_iter.2.825': [<numba.core.ir.Assign object at 0x7f71b9f083d0>],
             '$46for_iter.3.826': [<numba.core.ir.Assign object at 0x7f71b9f084f0>],
             '$64load_global.2.127': [<numba.core.ir.Assign object at 0x7f71b9ddd7f0>],
             '$72binary_subscr.6.131': [<numba.core.ir.Assign object at 0x7f71b9ddbb80>],
             '$74return_value.7.831': [<numba.core.ir.Assign object at 0x7f71b9ef87c0>],
             '$arg_out_var.215': [<numba.core.ir.Assign object at 0x7f71ba590af0>],
             '$arg_out_var.216': [<numba.core.ir.Assign object at 0x7f71ba590610>],
             '$const12.4.810': [<numba.core.ir.Assign object at 0x7f71b9eb5c70>],
             '$const22.8.812': [<numba.core.ir.Assign object at 0x7f71b9f0e100>],
             '$const28.11.814': [<numba.core.ir.Assign object at 0x7f71b9f0e520>],
             '$const36.15.818': [<numba.core.ir.Assign object at 0x7f71b9f0eb20>],
             '$const4.1.809': [<numba.core.ir.Assign object at 0x7f71b9ed41f0>],
             '$const60.2.828': [<numba.core.ir.Assign object at 0x7f71b9f08f40>],
             '$const68.5.829': [<numba.core.ir.Assign object at 0x7f71b9ef8400>],
             '$const72.6.830': [<numba.core.ir.Assign object at 0x7f71b9ef8640>],
             '$expr_out_var.214': [<numba.core.ir.Assign object at 0x7f71ba590220>],
             '$phi46.0.823': [<numba.core.ir.Assign object at 0x7f71b9eb5fa0>],
             '$phi48.1.827': [<numba.core.ir.Assign object at 0x7f71b9f081c0>],
             '$val.70.686': [<numba.core.ir.Assign object at 0x7f71b9ddfd30>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7f71b9ed4820>],
             'parfor__index_210': [<numba.core.ir.Assign object at 0x7f71b9f087c0>],
             'sched.808': [<numba.core.ir.Assign object at 0x7f71b9ed4940>],
             'val_111': [<numba.core.ir.Assign object at 0x7f71b9ed4040>,
                         <numba.core.ir.Assign object at 0x7f71b9ddb550>],
             'val_111__arr': [<numba.core.ir.Assign object at 0x7f71b9ed4700>],
             'val_70': [<numba.core.ir.Assign object at 0x7f71ba056ee0>,
                        <numba.core.ir.Assign object at 0x7f71b9ddfbe0>],
             'val_70__arr': [<numba.core.ir.Assign object at 0x7f71b9ed4490>]})
DEBUG 2022-02-14 16:45:29,485 SSA violators {'val_70', 'val_111'}
DEBUG 2022-02-14 16:45:29,485 Fix SSA violator on var val_70
DEBUG 2022-02-14 16:45:29,485 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,485 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,485 on stmt: sched.808 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,485 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:29,485 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:45:29,485 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:45:29,485 on stmt: $const4.1.809 = const(int, 0)
DEBUG 2022-02-14 16:45:29,485 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $const12.4.810 = const(int, 0)
DEBUG 2022-02-14 16:45:29,485 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,485 first assign: val_70
DEBUG 2022-02-14 16:45:29,485 replaced with: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $18load_global.6.811 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $const22.8.812 = const(int, 0)
DEBUG 2022-02-14 16:45:29,485 on stmt: $24binary_subscr.9.813 = getitem(value=sched.808, index=$const22.8.812, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $const28.11.814 = const(int, 1)
DEBUG 2022-02-14 16:45:29,485 on stmt: $30binary_subscr.12.815 = getitem(value=sched.808, index=$const28.11.814, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $32load_global.13.816 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,485 on stmt: $34load_method.14.817 = getattr(value=$32load_global.13.816, attr=uint8)
DEBUG 2022-02-14 16:45:29,485 on stmt: $const36.15.818 = const(int, 1)
DEBUG 2022-02-14 16:45:29,485 on stmt: $38call_method.16.819 = call $34load_method.14.817($const36.15.818, func=$34load_method.14.817, args=[Var($const36.15.818, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,485 on stmt: $40binary_add.17.820 = $30binary_subscr.12.815 + $38call_method.16.819
DEBUG 2022-02-14 16:45:29,485 on stmt: $42call_function.18.821 = call $18load_global.6.811($24binary_subscr.9.813, $40binary_add.17.820, func=$18load_global.6.811, args=[Var($24binary_subscr.9.813, <string>:4), Var($40binary_add.17.820, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,486 on stmt: $44get_iter.19.822 = getiter(value=$42call_function.18.821)
DEBUG 2022-02-14 16:45:29,486 on stmt: $phi46.0.823 = $44get_iter.19.822
DEBUG 2022-02-14 16:45:29,486 on stmt: $arg_out_var.216 = const(int, 1)
DEBUG 2022-02-14 16:45:29,486 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:29,486 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,486 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:29,486 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,486 on stmt: $46for_iter.1.824 = iternext(value=$phi46.0.823)
DEBUG 2022-02-14 16:45:29,486 on stmt: $46for_iter.2.825 = pair_first(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,486 on stmt: $46for_iter.3.826 = pair_second(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,486 on stmt: $phi48.1.827 = $46for_iter.2.825
DEBUG 2022-02-14 16:45:29,486 on stmt: branch $46for_iter.3.826, 48, 1038
DEBUG 2022-02-14 16:45:29,486 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,486 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,486 on stmt: parfor__index_210 = $phi48.1.827
DEBUG 2022-02-14 16:45:29,486 on stmt: jump 56
DEBUG 2022-02-14 16:45:29,486 ==== SSA block rewrite pass on 1038
DEBUG 2022-02-14 16:45:29,486 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,486 on stmt: $const60.2.828 = const(int, 0)
DEBUG 2022-02-14 16:45:29,486 on stmt: val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,486 on stmt: $const68.5.829 = const(int, 0)
DEBUG 2022-02-14 16:45:29,486 on stmt: val_70__arr[$const68.5.829] = val_70
DEBUG 2022-02-14 16:45:29,486 on stmt: $const72.6.830 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,486 on stmt: $74return_value.7.831 = cast(value=$const72.6.830)
DEBUG 2022-02-14 16:45:29,486 on stmt: return $74return_value.7.831
DEBUG 2022-02-14 16:45:29,486 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:29,487 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,487 on stmt: $arg_out_var.215 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,487 on stmt: $expr_out_var.214 = $arg_out_var.215 + $arg_out_var.216
DEBUG 2022-02-14 16:45:29,487 on stmt: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_70 = $val.70.686
DEBUG 2022-02-14 16:45:29,487 replaced with: val_70.1 = $val.70.686
DEBUG 2022-02-14 16:45:29,487 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,487 on stmt: jump 1037
DEBUG 2022-02-14 16:45:29,487 ==== SSA block rewrite pass on 1037
DEBUG 2022-02-14 16:45:29,487 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,487 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,487 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9ec1220>],
             56: [<numba.core.ir.Assign object at 0x7f71b9ec13a0>]})
DEBUG 2022-02-14 16:45:29,487 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,487 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,487 on stmt: sched.808 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,487 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:45:29,487 on stmt: $const4.1.809 = const(int, 0)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,487 on stmt: $const12.4.810 = const(int, 0)
DEBUG 2022-02-14 16:45:29,487 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,487 on stmt: $18load_global.6.811 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,487 on stmt: $const22.8.812 = const(int, 0)
DEBUG 2022-02-14 16:45:29,488 on stmt: $24binary_subscr.9.813 = getitem(value=sched.808, index=$const22.8.812, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,488 on stmt: $const28.11.814 = const(int, 1)
DEBUG 2022-02-14 16:45:29,488 on stmt: $30binary_subscr.12.815 = getitem(value=sched.808, index=$const28.11.814, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,488 on stmt: $32load_global.13.816 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,488 on stmt: $34load_method.14.817 = getattr(value=$32load_global.13.816, attr=uint8)
DEBUG 2022-02-14 16:45:29,488 on stmt: $const36.15.818 = const(int, 1)
DEBUG 2022-02-14 16:45:29,488 on stmt: $38call_method.16.819 = call $34load_method.14.817($const36.15.818, func=$34load_method.14.817, args=[Var($const36.15.818, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,488 on stmt: $40binary_add.17.820 = $30binary_subscr.12.815 + $38call_method.16.819
DEBUG 2022-02-14 16:45:29,488 on stmt: $42call_function.18.821 = call $18load_global.6.811($24binary_subscr.9.813, $40binary_add.17.820, func=$18load_global.6.811, args=[Var($24binary_subscr.9.813, <string>:4), Var($40binary_add.17.820, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,488 on stmt: $44get_iter.19.822 = getiter(value=$42call_function.18.821)
DEBUG 2022-02-14 16:45:29,488 on stmt: $phi46.0.823 = $44get_iter.19.822
DEBUG 2022-02-14 16:45:29,488 on stmt: $arg_out_var.216 = const(int, 1)
DEBUG 2022-02-14 16:45:29,488 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:29,488 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,488 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:29,488 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,488 on stmt: $46for_iter.1.824 = iternext(value=$phi46.0.823)
DEBUG 2022-02-14 16:45:29,488 on stmt: $46for_iter.2.825 = pair_first(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,488 on stmt: $46for_iter.3.826 = pair_second(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,488 on stmt: $phi48.1.827 = $46for_iter.2.825
DEBUG 2022-02-14 16:45:29,488 on stmt: branch $46for_iter.3.826, 48, 1038
DEBUG 2022-02-14 16:45:29,488 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,488 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,488 on stmt: parfor__index_210 = $phi48.1.827
DEBUG 2022-02-14 16:45:29,489 on stmt: jump 56
DEBUG 2022-02-14 16:45:29,489 ==== SSA block rewrite pass on 1038
DEBUG 2022-02-14 16:45:29,489 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,489 on stmt: $const60.2.828 = const(int, 0)
DEBUG 2022-02-14 16:45:29,489 on stmt: val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,489 on stmt: $const68.5.829 = const(int, 0)
DEBUG 2022-02-14 16:45:29,489 on stmt: val_70__arr[$const68.5.829] = val_70
DEBUG 2022-02-14 16:45:29,489 find_def var='val_70' stmt=val_70__arr[$const68.5.829] = val_70
DEBUG 2022-02-14 16:45:29,489 find_def_from_top label 1038
DEBUG 2022-02-14 16:45:29,489 idom 46 from label 1038
DEBUG 2022-02-14 16:45:29,489 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:29,489 find_def_from_top label 46
DEBUG 2022-02-14 16:45:29,489 insert phi node val_70.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:45:29,489 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:29,489 incoming_def val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,489 find_def_from_bottom label 1037
DEBUG 2022-02-14 16:45:29,489 find_def_from_top label 1037
DEBUG 2022-02-14 16:45:29,489 idom 56 from label 1037
DEBUG 2022-02-14 16:45:29,489 find_def_from_bottom label 56
DEBUG 2022-02-14 16:45:29,489 incoming_def val_70.1 = $val.70.686
DEBUG 2022-02-14 16:45:29,489 replaced with: val_70__arr[$const68.5.829] = val_70.2
DEBUG 2022-02-14 16:45:29,489 on stmt: $const72.6.830 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,489 on stmt: $74return_value.7.831 = cast(value=$const72.6.830)
DEBUG 2022-02-14 16:45:29,489 on stmt: return $74return_value.7.831
DEBUG 2022-02-14 16:45:29,489 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:29,489 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,489 on stmt: $arg_out_var.215 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,490 on stmt: $expr_out_var.214 = $arg_out_var.215 + $arg_out_var.216
DEBUG 2022-02-14 16:45:29,490 on stmt: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,490 find_def var='val_70' stmt=$val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,490 find_def_from_top label 56
DEBUG 2022-02-14 16:45:29,490 idom 48 from label 56
DEBUG 2022-02-14 16:45:29,490 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:29,490 find_def_from_top label 48
DEBUG 2022-02-14 16:45:29,490 idom 46 from label 48
DEBUG 2022-02-14 16:45:29,490 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:29,490 replaced with: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,490 on stmt: val_70.1 = $val.70.686
DEBUG 2022-02-14 16:45:29,490 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,490 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,490 on stmt: jump 1037
DEBUG 2022-02-14 16:45:29,490 ==== SSA block rewrite pass on 1037
DEBUG 2022-02-14 16:45:29,490 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1340>
DEBUG 2022-02-14 16:45:29,490 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,490 Fix SSA violator on var val_111
DEBUG 2022-02-14 16:45:29,490 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,490 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,490 on stmt: sched.808 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,490 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:29,490 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:45:29,490 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:45:29,490 on stmt: $const4.1.809 = const(int, 0)
DEBUG 2022-02-14 16:45:29,491 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,491 first assign: val_111
DEBUG 2022-02-14 16:45:29,491 replaced with: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $const12.4.810 = const(int, 0)
DEBUG 2022-02-14 16:45:29,491 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $18load_global.6.811 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $const22.8.812 = const(int, 0)
DEBUG 2022-02-14 16:45:29,491 on stmt: $24binary_subscr.9.813 = getitem(value=sched.808, index=$const22.8.812, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $const28.11.814 = const(int, 1)
DEBUG 2022-02-14 16:45:29,491 on stmt: $30binary_subscr.12.815 = getitem(value=sched.808, index=$const28.11.814, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $32load_global.13.816 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,491 on stmt: $34load_method.14.817 = getattr(value=$32load_global.13.816, attr=uint8)
DEBUG 2022-02-14 16:45:29,491 on stmt: $const36.15.818 = const(int, 1)
DEBUG 2022-02-14 16:45:29,491 on stmt: $38call_method.16.819 = call $34load_method.14.817($const36.15.818, func=$34load_method.14.817, args=[Var($const36.15.818, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,491 on stmt: $40binary_add.17.820 = $30binary_subscr.12.815 + $38call_method.16.819
DEBUG 2022-02-14 16:45:29,491 on stmt: $42call_function.18.821 = call $18load_global.6.811($24binary_subscr.9.813, $40binary_add.17.820, func=$18load_global.6.811, args=[Var($24binary_subscr.9.813, <string>:4), Var($40binary_add.17.820, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,491 on stmt: $44get_iter.19.822 = getiter(value=$42call_function.18.821)
DEBUG 2022-02-14 16:45:29,491 on stmt: $phi46.0.823 = $44get_iter.19.822
DEBUG 2022-02-14 16:45:29,491 on stmt: $arg_out_var.216 = const(int, 1)
DEBUG 2022-02-14 16:45:29,491 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:29,491 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,491 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:29,491 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,491 on stmt: val_70.2 = phi(incoming_values=[Var(val_70, <string>:3), Var(val_70.1, parfor.py:279)], incoming_blocks=[0, 1037])
DEBUG 2022-02-14 16:45:29,491 on stmt: $46for_iter.1.824 = iternext(value=$phi46.0.823)
DEBUG 2022-02-14 16:45:29,491 on stmt: $46for_iter.2.825 = pair_first(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,492 on stmt: $46for_iter.3.826 = pair_second(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,492 on stmt: $phi48.1.827 = $46for_iter.2.825
DEBUG 2022-02-14 16:45:29,492 on stmt: branch $46for_iter.3.826, 48, 1038
DEBUG 2022-02-14 16:45:29,492 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,492 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,492 on stmt: parfor__index_210 = $phi48.1.827
DEBUG 2022-02-14 16:45:29,492 on stmt: jump 56
DEBUG 2022-02-14 16:45:29,492 ==== SSA block rewrite pass on 1038
DEBUG 2022-02-14 16:45:29,492 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,492 on stmt: $const60.2.828 = const(int, 0)
DEBUG 2022-02-14 16:45:29,492 on stmt: val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,492 on stmt: $const68.5.829 = const(int, 0)
DEBUG 2022-02-14 16:45:29,492 on stmt: val_70__arr[$const68.5.829] = val_70.2
DEBUG 2022-02-14 16:45:29,492 on stmt: $const72.6.830 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,492 on stmt: $74return_value.7.831 = cast(value=$const72.6.830)
DEBUG 2022-02-14 16:45:29,492 on stmt: return $74return_value.7.831
DEBUG 2022-02-14 16:45:29,492 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:29,492 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,492 on stmt: $arg_out_var.215 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,492 on stmt: $expr_out_var.214 = $arg_out_var.215 + $arg_out_var.216
DEBUG 2022-02-14 16:45:29,492 on stmt: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,492 on stmt: val_70.1 = $val.70.686
DEBUG 2022-02-14 16:45:29,492 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,492 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,492 replaced with: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,492 on stmt: jump 1037
DEBUG 2022-02-14 16:45:29,492 ==== SSA block rewrite pass on 1037
DEBUG 2022-02-14 16:45:29,493 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9ec1880>
DEBUG 2022-02-14 16:45:29,493 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,493 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9ec1d30>],
             56: [<numba.core.ir.Assign object at 0x7f71b9ec2280>]})
DEBUG 2022-02-14 16:45:29,493 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:29,493 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,493 on stmt: sched.808 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,493 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:29,493 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:45:29,493 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:45:29,493 on stmt: $const4.1.809 = const(int, 0)
DEBUG 2022-02-14 16:45:29,493 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $const12.4.810 = const(int, 0)
DEBUG 2022-02-14 16:45:29,493 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.810, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $18load_global.6.811 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $const22.8.812 = const(int, 0)
DEBUG 2022-02-14 16:45:29,493 on stmt: $24binary_subscr.9.813 = getitem(value=sched.808, index=$const22.8.812, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $const28.11.814 = const(int, 1)
DEBUG 2022-02-14 16:45:29,493 on stmt: $30binary_subscr.12.815 = getitem(value=sched.808, index=$const28.11.814, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $32load_global.13.816 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,493 on stmt: $34load_method.14.817 = getattr(value=$32load_global.13.816, attr=uint8)
DEBUG 2022-02-14 16:45:29,493 on stmt: $const36.15.818 = const(int, 1)
DEBUG 2022-02-14 16:45:29,493 on stmt: $38call_method.16.819 = call $34load_method.14.817($const36.15.818, func=$34load_method.14.817, args=[Var($const36.15.818, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,493 on stmt: $40binary_add.17.820 = $30binary_subscr.12.815 + $38call_method.16.819
DEBUG 2022-02-14 16:45:29,493 on stmt: $42call_function.18.821 = call $18load_global.6.811($24binary_subscr.9.813, $40binary_add.17.820, func=$18load_global.6.811, args=[Var($24binary_subscr.9.813, <string>:4), Var($40binary_add.17.820, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,494 on stmt: $44get_iter.19.822 = getiter(value=$42call_function.18.821)
DEBUG 2022-02-14 16:45:29,494 on stmt: $phi46.0.823 = $44get_iter.19.822
DEBUG 2022-02-14 16:45:29,494 on stmt: $arg_out_var.216 = const(int, 1)
DEBUG 2022-02-14 16:45:29,494 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:29,494 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,494 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:29,494 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,494 on stmt: val_70.2 = phi(incoming_values=[Var(val_70, <string>:3), Var(val_70.1, parfor.py:279)], incoming_blocks=[0, 1037])
DEBUG 2022-02-14 16:45:29,494 on stmt: $46for_iter.1.824 = iternext(value=$phi46.0.823)
DEBUG 2022-02-14 16:45:29,494 on stmt: $46for_iter.2.825 = pair_first(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,494 on stmt: $46for_iter.3.826 = pair_second(value=$46for_iter.1.824)
DEBUG 2022-02-14 16:45:29,494 on stmt: $phi48.1.827 = $46for_iter.2.825
DEBUG 2022-02-14 16:45:29,494 on stmt: branch $46for_iter.3.826, 48, 1038
DEBUG 2022-02-14 16:45:29,494 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:29,494 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,494 on stmt: parfor__index_210 = $phi48.1.827
DEBUG 2022-02-14 16:45:29,494 on stmt: jump 56
DEBUG 2022-02-14 16:45:29,494 ==== SSA block rewrite pass on 1038
DEBUG 2022-02-14 16:45:29,494 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,494 on stmt: $const60.2.828 = const(int, 0)
DEBUG 2022-02-14 16:45:29,494 on stmt: val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,494 find_def var='val_111' stmt=val_111__arr[$const60.2.828] = val_111
DEBUG 2022-02-14 16:45:29,494 find_def_from_top label 1038
DEBUG 2022-02-14 16:45:29,494 idom 46 from label 1038
DEBUG 2022-02-14 16:45:29,494 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:29,494 find_def_from_top label 46
DEBUG 2022-02-14 16:45:29,494 insert phi node val_111.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:45:29,495 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:29,495 incoming_def val_111 = getitem(value=val_111__arr, index=$const4.1.809, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,495 find_def_from_bottom label 1037
DEBUG 2022-02-14 16:45:29,495 find_def_from_top label 1037
DEBUG 2022-02-14 16:45:29,495 idom 56 from label 1037
DEBUG 2022-02-14 16:45:29,495 find_def_from_bottom label 56
DEBUG 2022-02-14 16:45:29,495 incoming_def val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,495 replaced with: val_111__arr[$const60.2.828] = val_111.2
DEBUG 2022-02-14 16:45:29,495 on stmt: $const68.5.829 = const(int, 0)
DEBUG 2022-02-14 16:45:29,495 on stmt: val_70__arr[$const68.5.829] = val_70.2
DEBUG 2022-02-14 16:45:29,495 on stmt: $const72.6.830 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,495 on stmt: $74return_value.7.831 = cast(value=$const72.6.830)
DEBUG 2022-02-14 16:45:29,495 on stmt: return $74return_value.7.831
DEBUG 2022-02-14 16:45:29,495 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:29,495 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,495 on stmt: $arg_out_var.215 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,495 on stmt: $expr_out_var.214 = $arg_out_var.215 + $arg_out_var.216
DEBUG 2022-02-14 16:45:29,495 on stmt: $val.70.686 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.214, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:29,495 on stmt: val_70.1 = $val.70.686
DEBUG 2022-02-14 16:45:29,495 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_210, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,495 on stmt: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,495 find_def var='val_111' stmt=val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,495 find_def_from_top label 56
DEBUG 2022-02-14 16:45:29,495 idom 48 from label 56
DEBUG 2022-02-14 16:45:29,495 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:29,495 find_def_from_top label 48
DEBUG 2022-02-14 16:45:29,496 idom 46 from label 48
DEBUG 2022-02-14 16:45:29,496 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:29,496 replaced with: val_111.1 = call $64load_global.2.127(val_111.2, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111.2, <string>:6), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,496 on stmt: jump 1037
DEBUG 2022-02-14 16:45:29,496 ==== SSA block rewrite pass on 1037
DEBUG 2022-02-14 16:45:29,496 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9ec1610>
DEBUG 2022-02-14 16:45:29,496 on stmt: jump 46
DEBUG 2022-02-14 16:45:29,737 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=3, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,737 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,737 stack: []
DEBUG 2022-02-14 16:45:29,737 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,737 stack []
DEBUG 2022-02-14 16:45:29,737 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:29,737 stack []
DEBUG 2022-02-14 16:45:29,737 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:29,737 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:29,737 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:29,737 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-02-14 16:45:29,737 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,737 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-02-14 16:45:29,738 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:29,738 stack ['$26call_function.12']
DEBUG 2022-02-14 16:45:29,739 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,739 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,739 stack: ['$phi30.0']
DEBUG 2022-02-14 16:45:29,739 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-02-14 16:45:29,739 stack ['$phi30.0']
DEBUG 2022-02-14 16:45:29,739 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,739 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,739 stack: []
DEBUG 2022-02-14 16:45:29,739 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:29,739 stack []
DEBUG 2022-02-14 16:45:29,739 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:29,739 stack ['$const40.0']
DEBUG 2022-02-14 16:45:29,739 end state. edges=[]
DEBUG 2022-02-14 16:45:29,739 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,739 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:29,739 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:29,739 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:29,739 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,739 stack ['$phi32.0']
DEBUG 2022-02-14 16:45:29,739 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:29,740 stack ['$phi32.0', '$const34.2']
DEBUG 2022-02-14 16:45:29,740 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-02-14 16:45:29,740 stack ['$phi32.0']
DEBUG 2022-02-14 16:45:29,740 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,740 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,740 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,740 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,740 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-02-14 16:45:29,740 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,740 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,741 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,741 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,741 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:29,741 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-02-14 16:45:29,742 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,742 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-02-14 16:45:29,742 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-02-14 16:45:29,742 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-02-14 16:45:29,742 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,743 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_217 = $phi32.1             ['$phi32.1', 'parfor__index_217']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:45:29,749 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,749 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,749 on stmt: sched.878 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:29,749 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-02-14 16:45:29,750 on stmt: $2load_global.0.879 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:29,750 on stmt: $const6.2.880 = const(int, 0)
DEBUG 2022-02-14 16:45:29,750 on stmt: $8binary_subscr.3.881 = getitem(value=sched.878, index=$const6.2.880, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,750 on stmt: $const12.5.882 = const(int, 1)
DEBUG 2022-02-14 16:45:29,750 on stmt: $14binary_subscr.6.883 = getitem(value=sched.878, index=$const12.5.882, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:29,750 on stmt: $16load_global.7.884 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,750 on stmt: $18load_method.8.885 = getattr(value=$16load_global.7.884, attr=uint8)
DEBUG 2022-02-14 16:45:29,750 on stmt: $const20.9.886 = const(int, 1)
DEBUG 2022-02-14 16:45:29,750 on stmt: $22call_method.10.887 = call $18load_method.8.885($const20.9.886, func=$18load_method.8.885, args=[Var($const20.9.886, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,750 on stmt: $24binary_add.11.888 = $14binary_subscr.6.883 + $22call_method.10.887
DEBUG 2022-02-14 16:45:29,750 on stmt: $26call_function.12.889 = call $2load_global.0.879($8binary_subscr.3.881, $24binary_add.11.888, func=$2load_global.0.879, args=[Var($8binary_subscr.3.881, <string>:2), Var($24binary_add.11.888, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,750 on stmt: $28get_iter.13.890 = getiter(value=$26call_function.12.889)
DEBUG 2022-02-14 16:45:29,750 on stmt: $phi30.0.891 = $28get_iter.13.890
DEBUG 2022-02-14 16:45:29,750 on stmt: $expr_out_var.221 = const(complex128, 0j)
DEBUG 2022-02-14 16:45:29,750 on stmt: jump 30
DEBUG 2022-02-14 16:45:29,750 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:45:29,751 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,751 on stmt: $30for_iter.1.892 = iternext(value=$phi30.0.891)
DEBUG 2022-02-14 16:45:29,751 on stmt: $30for_iter.2.893 = pair_first(value=$30for_iter.1.892)
DEBUG 2022-02-14 16:45:29,751 on stmt: $30for_iter.3.894 = pair_second(value=$30for_iter.1.892)
DEBUG 2022-02-14 16:45:29,751 on stmt: $phi32.1.895 = $30for_iter.2.893
DEBUG 2022-02-14 16:45:29,751 on stmt: branch $30for_iter.3.894, 32, 1023
DEBUG 2022-02-14 16:45:29,751 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:45:29,751 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,751 on stmt: parfor__index_217 = $phi32.1.895
DEBUG 2022-02-14 16:45:29,751 on stmt: jump 40
DEBUG 2022-02-14 16:45:29,751 ==== SSA block analysis pass on 1023
DEBUG 2022-02-14 16:45:29,751 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,751 on stmt: $const40.0.896 = const(NoneType, None)
DEBUG 2022-02-14 16:45:29,751 on stmt: $42return_value.1.897 = cast(value=$const40.0.896)
DEBUG 2022-02-14 16:45:29,751 on stmt: return $42return_value.1.897
DEBUG 2022-02-14 16:45:29,751 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:29,751 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,751 on stmt: H__batch[parfor__index_217] = $expr_out_var.221
DEBUG 2022-02-14 16:45:29,751 on stmt: jump 1022
DEBUG 2022-02-14 16:45:29,751 ==== SSA block analysis pass on 1022
DEBUG 2022-02-14 16:45:29,751 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d1fe20>
DEBUG 2022-02-14 16:45:29,751 on stmt: jump 30
DEBUG 2022-02-14 16:45:29,752 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.883': [<numba.core.ir.Assign object at 0x7f71b9d79bb0>],
             '$16load_global.7.884': [<numba.core.ir.Assign object at 0x7f71b9d79d00>],
             '$18load_method.8.885': [<numba.core.ir.Assign object at 0x7f71b9d79e80>],
             '$22call_method.10.887': [<numba.core.ir.Assign object at 0x7f71b9d22250>],
             '$24binary_add.11.888': [<numba.core.ir.Assign object at 0x7f71b9d22370>],
             '$26call_function.12.889': [<numba.core.ir.Assign object at 0x7f71b9d22520>],
             '$28get_iter.13.890': [<numba.core.ir.Assign object at 0x7f71b9d22640>],
             '$2load_global.0.879': [<numba.core.ir.Assign object at 0x7f71b9f08430>],
             '$30for_iter.1.892': [<numba.core.ir.Assign object at 0x7f71b9d22910>],
             '$30for_iter.2.893': [<numba.core.ir.Assign object at 0x7f71b9d22a30>],
             '$30for_iter.3.894': [<numba.core.ir.Assign object at 0x7f71b9d22b50>],
             '$42return_value.1.897': [<numba.core.ir.Assign object at 0x7f71b9ec7160>],
             '$8binary_subscr.3.881': [<numba.core.ir.Assign object at 0x7f71b9f08dc0>],
             '$const12.5.882': [<numba.core.ir.Assign object at 0x7f71b9d79a30>],
             '$const20.9.886': [<numba.core.ir.Assign object at 0x7f71b9d22040>],
             '$const40.0.896': [<numba.core.ir.Assign object at 0x7f71b9ec7f40>],
             '$const6.2.880': [<numba.core.ir.Assign object at 0x7f71b9f08f40>],
             '$expr_out_var.221': [<numba.core.ir.Assign object at 0x7f71ba502460>],
             '$phi30.0.891': [<numba.core.ir.Assign object at 0x7f71b9f08850>],
             '$phi32.1.895': [<numba.core.ir.Assign object at 0x7f71b9d22850>],
             'H__batch': [<numba.core.ir.Assign object at 0x7f71b9f08700>],
             'parfor__index_217': [<numba.core.ir.Assign object at 0x7f71b9d22e20>],
             'sched.878': [<numba.core.ir.Assign object at 0x7f71b9ec7a60>]})
DEBUG 2022-02-14 16:45:29,752 SSA violators set()
DEBUG 2022-02-14 16:45:29,902 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,902 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,902 stack: []
DEBUG 2022-02-14 16:45:29,902 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,902 stack []
DEBUG 2022-02-14 16:45:29,902 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,902 stack []
DEBUG 2022-02-14 16:45:29,902 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,902 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:29,902 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,902 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:29,902 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,902 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:29,902 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,903 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:29,903 end state. edges=[]
DEBUG 2022-02-14 16:45:29,903 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,903 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,903 defmap: {}
DEBUG 2022-02-14 16:45:29,903 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:29,903 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:29,903 keep phismap: {}
DEBUG 2022-02-14 16:45:29,903 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:29,903 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,903 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,903 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:29,905 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,905 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c5d6d0>
DEBUG 2022-02-14 16:45:29,905 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:29,905 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:29,905 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:29,905 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,905 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:29,905 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:29,905 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b9c65340>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9c5ddc0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b9c65220>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9c5d2e0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9c5d280>]})
DEBUG 2022-02-14 16:45:29,905 SSA violators set()
DEBUG 2022-02-14 16:45:29,939 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,939 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,939 stack: []
DEBUG 2022-02-14 16:45:29,939 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,939 stack []
DEBUG 2022-02-14 16:45:29,939 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,939 stack []
DEBUG 2022-02-14 16:45:29,939 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:29,939 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:29,939 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:29,939 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:29,939 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:29,939 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:29,939 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:29,940 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$dtype8.3']
DEBUG 2022-02-14 16:45:29,940 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:29,940 stack ['$10call_function.4']
DEBUG 2022-02-14 16:45:29,940 end state. edges=[]
DEBUG 2022-02-14 16:45:29,940 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,940 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,940 defmap: {}
DEBUG 2022-02-14 16:45:29,940 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:29,940 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:29,940 keep phismap: {}
DEBUG 2022-02-14 16:45:29,940 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:29,940 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,940 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$dtype8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,940 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'dtype', 'tmp0', 'tmp1']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:45:29,942 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,942 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9b8a4c0>
DEBUG 2022-02-14 16:45:29,942 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:29,942 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:29,942 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:45:29,942 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:29,942 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,942 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:45:29,942 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:45:29,942 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f71b9b8af40>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f71b9b870a0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9b8aa00>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9b8a880>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9b8a190>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71b9b8a070>]})
DEBUG 2022-02-14 16:45:29,942 SSA violators set()
DEBUG 2022-02-14 16:45:29,947 bytecode dump:
>          0	NOP(arg=None, lineno=3693)
           2	LOAD_GLOBAL(arg=0, lineno=3693)
           4	LOAD_METHOD(arg=1, lineno=3693)
           6	LOAD_FAST(arg=0, lineno=3693)
           8	LOAD_FAST(arg=2, lineno=3693)
          10	CALL_METHOD(arg=2, lineno=3693)
          12	STORE_FAST(arg=3, lineno=3693)
          14	LOAD_GLOBAL(arg=0, lineno=3694)
          16	LOAD_METHOD(arg=2, lineno=3694)
          18	LOAD_FAST(arg=3, lineno=3694)
          20	LOAD_ATTR(arg=3, lineno=3694)
          22	CALL_METHOD(arg=1, lineno=3694)
          24	GET_ITER(arg=None, lineno=3694)
>         26	FOR_ITER(arg=12, lineno=3694)
          28	STORE_FAST(arg=4, lineno=3694)
          30	LOAD_FAST(arg=1, lineno=3695)
          32	LOAD_FAST(arg=3, lineno=3695)
          34	LOAD_FAST(arg=4, lineno=3695)
          36	STORE_SUBSCR(arg=None, lineno=3695)
          38	JUMP_ABSOLUTE(arg=26, lineno=3695)
>         40	LOAD_FAST(arg=3, lineno=3696)
          42	RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:45:29,947 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:29,947 stack: []
DEBUG 2022-02-14 16:45:29,947 dispatch pc=0, inst=NOP(arg=None, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack []
DEBUG 2022-02-14 16:45:29,947 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack []
DEBUG 2022-02-14 16:45:29,947 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:29,947 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:29,947 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack ['$4load_method.1', '$shape6.2']
DEBUG 2022-02-14 16:45:29,947 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3693)
DEBUG 2022-02-14 16:45:29,947 stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
DEBUG 2022-02-14 16:45:29,947 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3693)
DEBUG 2022-02-14 16:45:29,948 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack []
DEBUG 2022-02-14 16:45:29,948 dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$14load_global.5']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$16load_method.6']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$16load_method.6', '$arr18.7']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$16load_method.6', '$20load_attr.8']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=24, inst=GET_ITER(arg=None, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$22call_method.9']
DEBUG 2022-02-14 16:45:29,948 end state. edges=[Edge(pc=26, stack=('$24get_iter.10',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,948 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,948 stack: ['$phi26.0']
DEBUG 2022-02-14 16:45:29,948 dispatch pc=26, inst=FOR_ITER(arg=12, lineno=3694)
DEBUG 2022-02-14 16:45:29,948 stack ['$phi26.0']
DEBUG 2022-02-14 16:45:29,948 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,948 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,948 stack: []
DEBUG 2022-02-14 16:45:29,948 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3696)
DEBUG 2022-02-14 16:45:29,948 stack []
DEBUG 2022-02-14 16:45:29,948 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:45:29,948 stack ['$arr40.0']
DEBUG 2022-02-14 16:45:29,948 end state. edges=[]
DEBUG 2022-02-14 16:45:29,949 pending: deque([State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:45:29,949 stack: ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=28, inst=STORE_FAST(arg=4, lineno=3694)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=3695)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=3695)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0', '$value30.2']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=3695)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0', '$value30.2', '$arr32.3']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=3695)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0', '$value30.2', '$arr32.3', '$idx34.4']
DEBUG 2022-02-14 16:45:29,949 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=26, lineno=3695)
DEBUG 2022-02-14 16:45:29,949 stack ['$phi28.0']
DEBUG 2022-02-14 16:45:29,949 end state. edges=[Edge(pc=26, stack=('$phi28.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:29,949 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:45:29,949 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:29,949 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:29,949 defmap: {'$phi26.0': State(pc_initial=0 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1)}
DEBUG 2022-02-14 16:45:29,950 phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=2))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,950 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,950 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,950 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:29,950 keep phismap: {'$phi26.0': {('$24get_iter.10', State(pc_initial=0 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:29,950 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi26.0': '$24get_iter.10'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'}})
DEBUG 2022-02-14 16:45:29,951 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:29,951 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$arr18.7'}), (20, {'item': '$arr18.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9', 'res': '$24get_iter.10'})), outgoing_phis={'$phi26.0': '$24get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.10',)})
DEBUG 2022-02-14 16:45:29,951 block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG 2022-02-14 16:45:29,951 block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$value30.2'}), (32, {'res': '$arr32.3'}), (34, {'res': '$idx34.4'}), (36, {'target': '$arr32.3', 'index': '$idx34.4', 'value': '$value30.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$phi28.0',)})
DEBUG 2022-02-14 16:45:29,951 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$arr40.0'}), (42, {'retval': '$arr40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:29,951 label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex) ['$14load_global.5', '$16load_method.6']
    $20load_attr.8 = getattr(value=arr, attr=shape) ['$20load_attr.8', 'arr']
    $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None) ['$16load_method.6', '$20load_attr.8', '$22call_method.9']
    $24get_iter.10 = getiter(value=$22call_method.9) ['$22call_method.9', '$24get_iter.10']
    $phi26.0 = $24get_iter.10                ['$24get_iter.10', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 40             ['$26for_iter.3']
label 28:
    idx = $phi28.1                           ['$phi28.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 26                                  []
label 40:
    $42return_value.1 = cast(value=arr)      ['$42return_value.1', 'arr']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:45:29,954 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:29,954 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9b9dca0>
DEBUG 2022-02-14 16:45:29,954 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:45:29,954 on stmt: value = arg(1, name=value)
DEBUG 2022-02-14 16:45:29,954 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:45:29,954 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,954 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2022-02-14 16:45:29,954 on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,954 on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:29,954 on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex)
DEBUG 2022-02-14 16:45:29,954 on stmt: $20load_attr.8 = getattr(value=arr, attr=shape)
DEBUG 2022-02-14 16:45:29,954 on stmt: $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:29,954 on stmt: $24get_iter.10 = getiter(value=$22call_method.9)
DEBUG 2022-02-14 16:45:29,954 on stmt: $phi26.0 = $24get_iter.10
DEBUG 2022-02-14 16:45:29,954 on stmt: jump 26
DEBUG 2022-02-14 16:45:29,955 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:29,955 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9b9dca0>
DEBUG 2022-02-14 16:45:29,955 on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG 2022-02-14 16:45:29,955 on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG 2022-02-14 16:45:29,955 on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG 2022-02-14 16:45:29,955 on stmt: $phi28.1 = $26for_iter.2
DEBUG 2022-02-14 16:45:29,955 on stmt: branch $26for_iter.3, 28, 40
DEBUG 2022-02-14 16:45:29,955 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:45:29,955 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9b9dca0>
DEBUG 2022-02-14 16:45:29,955 on stmt: idx = $phi28.1
DEBUG 2022-02-14 16:45:29,955 on stmt: arr[idx] = value
DEBUG 2022-02-14 16:45:29,955 on stmt: jump 26
DEBUG 2022-02-14 16:45:29,955 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:29,955 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9b9dca0>
DEBUG 2022-02-14 16:45:29,955 on stmt: $42return_value.1 = cast(value=arr)
DEBUG 2022-02-14 16:45:29,955 on stmt: return $42return_value.1
DEBUG 2022-02-14 16:45:29,955 defs defaultdict(<class 'list'>,
            {'$14load_global.5': [<numba.core.ir.Assign object at 0x7f71b9b96610>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x7f71b9b96310>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0x7f71b9b91fd0>],
             '$22call_method.9': [<numba.core.ir.Assign object at 0x7f71b9b9d130>],
             '$24get_iter.10': [<numba.core.ir.Assign object at 0x7f71b9b9d220>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x7f71b9b9d430>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x7f71b9b9d550>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x7f71b9b9d670>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9b96f40>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x7f71b9b9f0a0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71b9b96dc0>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x7f71b9b96c10>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x7f71b9b9d370>],
             'arr': [<numba.core.ir.Assign object at 0x7f71b9b964c0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9b968b0>],
             'idx': [<numba.core.ir.Assign object at 0x7f71b9b9d940>],
             'shape': [<numba.core.ir.Assign object at 0x7f71b9b84d00>],
             'value': [<numba.core.ir.Assign object at 0x7f71b9b845e0>]})
DEBUG 2022-02-14 16:45:29,955 SSA violators set()
DEBUG 2022-02-14 16:45:30,221 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=17, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=18, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=19, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=20, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=18, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=17, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:30,221 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,221 stack: []
DEBUG 2022-02-14 16:45:30,221 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:30,221 stack []
DEBUG 2022-02-14 16:45:30,221 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:30,221 stack []
DEBUG 2022-02-14 16:45:30,221 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:30,221 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:30,221 dispatch pc=6, inst=LOAD_FAST(arg=17, lineno=2)
DEBUG 2022-02-14 16:45:30,221 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:30,221 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:30,222 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=10, inst=STORE_FAST(arg=18, lineno=2)
DEBUG 2022-02-14 16:45:30,222 stack ['$8call_method.3']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack []
DEBUG 2022-02-14 16:45:30,222 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-02-14 16:45:30,222 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,222 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$36call_function.16']
DEBUG 2022-02-14 16:45:30,223 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,223 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:45:30,223 stack: ['$phi40.0']
DEBUG 2022-02-14 16:45:30,223 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:45:30,223 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:30,223 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,223 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:45:30,224 stack: []
DEBUG 2022-02-14 16:45:30,224 dispatch pc=50, inst=LOAD_FAST(arg=18, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack []
DEBUG 2022-02-14 16:45:30,224 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$H__batch_250.0']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=60, inst=LOAD_FAST(arg=17, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$58binary_subscr.5']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:30,224 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-02-14 16:45:30,224 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:30,225 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-02-14 16:45:30,225 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:45:30,225 stack []
DEBUG 2022-02-14 16:45:30,225 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:30,225 stack ['$const70.11']
DEBUG 2022-02-14 16:45:30,225 end state. edges=[]
DEBUG 2022-02-14 16:45:30,225 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:45:30,225 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:45:30,225 dispatch pc=42, inst=STORE_FAST(arg=19, lineno=3)
DEBUG 2022-02-14 16:45:30,225 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:45:30,225 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:30,225 stack ['$phi42.0']
DEBUG 2022-02-14 16:45:30,225 dispatch pc=46, inst=STORE_FAST(arg=20, lineno=4)
DEBUG 2022-02-14 16:45:30,225 stack ['$phi42.0', '$const44.2']
DEBUG 2022-02-14 16:45:30,225 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-02-14 16:45:30,225 stack ['$phi42.0']
DEBUG 2022-02-14 16:45:30,225 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,225 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:45:30,225 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,226 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,226 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-02-14 16:45:30,226 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:30,226 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:30,226 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:30,227 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:30,227 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:30,227 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-02-14 16:45:30,227 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,227 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-02-14 16:45:30,227 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-02-14 16:45:30,227 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-02-14 16:45:30,228 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,229 label 0:
    sched = arg(0, name=sched)               ['sched']
    _170binary__add_75 = arg(1, name=_170binary__add_75) ['_170binary__add_75']
    A = arg(2, name=A)                       ['A']
    D = arg(3, name=D)                       ['D']
    N__fixed = arg(4, name=N__fixed)         ['N__fixed']
    N__max = arg(5, name=N__max)             ['N__max']
    batch__max = arg(6, name=batch__max)     ['batch__max']
    binoms = arg(7, name=binoms)             ['binoms']
    edge__reps = arg(8, name=edge__reps)     ['edge__reps']
    edge__reps__size0_164 = arg(9, name=edge__reps__size0_164) ['edge__reps__size0_164']
    even__cutoff = arg(10, name=even__cutoff) ['even__cutoff']
    glynn = arg(11, name=glynn)              ['glynn']
    n = arg(12, name=n)                      ['n']
    oddV = arg(13, name=oddV)                ['oddV']
    oddV0 = arg(14, name=oddV0)              ['oddV0']
    oddloop = arg(15, name=oddloop)          ['oddloop']
    oddloop0 = arg(16, name=oddloop0)        ['oddloop0']
    H__batch_2__arr = arg(17, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_244 = $phi42.1             ['$phi42.1', 'parfor__index_244']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-02-14 16:45:30,265 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,266 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,266 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,266 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,266 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,266 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,266 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,266 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,266 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,266 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,266 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,266 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,266 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,266 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,266 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,266 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,266 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,266 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,266 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,266 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,266 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,266 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,266 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,267 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,267 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,267 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,267 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,267 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,267 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,267 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,267 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,267 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,267 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,267 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,267 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,267 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,268 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,268 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,268 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,268 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,268 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,268 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,268 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,268 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,268 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,268 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,268 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,268 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,268 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,268 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,268 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,268 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,268 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,268 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,268 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,268 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,268 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,268 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,269 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,269 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,269 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,269 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,269 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,269 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,269 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,269 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,269 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,269 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,269 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,269 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,269 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,269 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,269 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,269 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,269 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,269 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,269 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,269 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,269 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,269 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,270 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,270 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,270 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,270 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,270 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,270 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,270 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,270 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:30,270 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,270 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,270 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,270 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,270 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,270 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,270 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:45:30,270 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,270 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,270 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,270 ==== SSA block analysis pass on 1035
DEBUG 2022-02-14 16:45:30,270 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,270 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,270 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,270 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,270 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,271 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,271 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,271 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,271 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,271 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,271 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,271 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,271 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,271 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,271 ==== SSA block analysis pass on 675
DEBUG 2022-02-14 16:45:30,271 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,271 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,271 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,271 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,271 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,271 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,271 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,271 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,271 ==== SSA block analysis pass on 816
DEBUG 2022-02-14 16:45:30,271 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,271 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,271 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,271 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,272 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,272 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,272 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,272 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,272 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,272 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,272 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:30,272 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,272 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,272 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,272 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,272 ==== SSA block analysis pass on 703
DEBUG 2022-02-14 16:45:30,272 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,272 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,272 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,272 ==== SSA block analysis pass on 707
DEBUG 2022-02-14 16:45:30,272 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,272 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,272 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,273 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,273 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,273 ==== SSA block analysis pass on 717
DEBUG 2022-02-14 16:45:30,273 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,273 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,273 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,273 ==== SSA block analysis pass on 723
DEBUG 2022-02-14 16:45:30,273 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,273 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,273 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,273 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,273 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,273 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,273 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,273 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,273 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,273 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,274 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,274 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,274 ==== SSA block analysis pass on 737
DEBUG 2022-02-14 16:45:30,274 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,274 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,274 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,274 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,274 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,274 ==== SSA block analysis pass on 832
DEBUG 2022-02-14 16:45:30,274 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,274 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,274 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,274 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,274 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,274 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,274 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,274 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,274 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,274 ==== SSA block analysis pass on 871
DEBUG 2022-02-14 16:45:30,274 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,274 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,274 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,275 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,275 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,275 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,275 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,275 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,275 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:45:30,275 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,275 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,275 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,275 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,275 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,275 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,275 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:30,275 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,275 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,275 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,275 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,275 ==== SSA block analysis pass on 873
DEBUG 2022-02-14 16:45:30,275 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,275 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,275 ==== SSA block analysis pass on 739
DEBUG 2022-02-14 16:45:30,275 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,275 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,276 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,276 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,276 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,276 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,276 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,276 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:30,276 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,276 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,276 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,276 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,276 ==== SSA block analysis pass on 889
DEBUG 2022-02-14 16:45:30,276 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,276 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,276 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,276 on stmt: H__batch_2 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,276 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,276 ==== SSA block analysis pass on 501
DEBUG 2022-02-14 16:45:30,276 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,276 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,276 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,276 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,276 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,276 ==== SSA block analysis pass on 777
DEBUG 2022-02-14 16:45:30,276 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,277 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,277 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,277 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,277 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,277 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,277 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,277 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,277 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,277 ==== SSA block analysis pass on 814
DEBUG 2022-02-14 16:45:30,277 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,277 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,277 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,277 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,277 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,277 ==== SSA block analysis pass on 928
DEBUG 2022-02-14 16:45:30,277 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9c33c10>
DEBUG 2022-02-14 16:45:30,277 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,279 defs defaultdict(<class 'list'>,
            {'$12load_global.4.924': [<numba.core.ir.Assign object at 0x7f71ba1597f0>],
             '$18binary_subscr.7.926': [<numba.core.ir.Assign object at 0x7f71ba159c40>],
             '$206binary_multiply.6': [<numba.core.ir.Assign object at 0x7f71baaede80>],
             '$210binary_add.8': [<numba.core.ir.Assign object at 0x7f71baaf2160>],
             '$214binary_add.10': [<numba.core.ir.Assign object at 0x7f71baaf2460>],
             '$226load_global.15': [<numba.core.ir.Assign object at 0x7f71baaf2d30>],
             '$248load_global.23': [<numba.core.ir.Assign object at 0x7f71baaf4bb0>],
             '$24binary_subscr.10.928': [<numba.core.ir.Assign object at 0x7f71b9f900a0>],
             '$256binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7f71baaf51c0>],
             '$258call_function.28': [<numba.core.ir.Assign object at 0x7f71baaf5370>],
             '$260get_iter.29': [<numba.core.ir.Assign object at 0x7f71baaf5490>],
             '$262for_iter.2': [<numba.core.ir.Assign object at 0x7f71baaf4ac0>],
             '$262for_iter.4': [<numba.core.ir.Assign object at 0x7f71baaf56a0>],
             '$26load_global.11.929': [<numba.core.ir.Assign object at 0x7f71b9f901f0>],
             '$274binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71baaf5fa0>],
             '$280binary_subscr.10': [<numba.core.ir.Assign object at 0x7f71baaf73a0>],
             '$282build_tuple.11': [<numba.core.ir.Assign object at 0x7f71baaf7520>],
             '$284binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71baaf76a0>],
             '$28load_method.12.930': [<numba.core.ir.Assign object at 0x7f71b9f90370>],
             '$296pred': [<numba.core.ir.Assign object at 0x7f71baaf7bb0>],
             '$2load_global.0.922': [<numba.core.ir.Assign object at 0x7f71ba1591f0>],
             '$318load_global.1': [<numba.core.ir.Assign object at 0x7f71baaf9910>],
             '$328call_function.6': [<numba.core.ir.Assign object at 0x7f71baa6f3a0>],
             '$32call_method.14.932': [<numba.core.ir.Assign object at 0x7f71b9f90700>],
             '$330unpack_sequence.11': [<numba.core.ir.Assign object at 0x7f71baafb100>],
             '$340load_global.12': [<numba.core.ir.Assign object at 0x7f71baafbb50>],
             '$34binary_add.15.933': [<numba.core.ir.Assign object at 0x7f71b9f90820>],
             '$352binary_subscr.17': [<numba.core.ir.Assign object at 0x7f71baa9ee20>],
             '$356compare_op.19': [<numba.core.ir.Assign object at 0x7f71baafd6a0>],
             '$358pred': [<numba.core.ir.Assign object at 0x7f71baafd910>],
             '$366binary_subscr.3': [<numba.core.ir.Assign object at 0x7f71baa9ed00>],
             '$36call_function.16.934': [<numba.core.ir.Assign object at 0x7f71b9f909d0>],
             '$370compare_op.5': [<numba.core.ir.Assign object at 0x7f71baafdee0>],
             '$372pred': [<numba.core.ir.Assign object at 0x7f71baaff190>],
             '$376load_global.1': [<numba.core.ir.Assign object at 0x7f71baaff3d0>],
             '$38get_iter.17.935': [<numba.core.ir.Assign object at 0x7f71b9f90af0>],
             '$392binary_floor_divide.8': [<numba.core.ir.Assign object at 0x7f71baaffe80>],
             '$396binary_subtract.10': [<numba.core.ir.Assign object at 0x7f71bab01160>],
             '$402load_global.12': [<numba.core.ir.Assign object at 0x7f71bab01550>],
             '$40for_iter.1.937': [<numba.core.ir.Assign object at 0x7f71b9f90d00>],
             '$40for_iter.2.938': [<numba.core.ir.Assign object at 0x7f71b9f90e20>],
             '$40for_iter.3.939': [<numba.core.ir.Assign object at 0x7f71b9f90f40>],
             '$418call_function.20': [<numba.core.ir.Assign object at 0x7f71bab01f10>],
             '$432binary_subscr.27': [<numba.core.ir.Assign object at 0x7f71baa724f0>],
             '$438binary_multiply.30': [<numba.core.ir.Assign object at 0x7f71baa6fa00>],
             '$442binary_multiply.32': [<numba.core.ir.Assign object at 0x7f71bab04f40>],
             '$444inplace_add.33': [<numba.core.ir.Assign object at 0x7f71bab07100>],
             '$450load_global.1': [<numba.core.ir.Assign object at 0x7f71bab01670>],
             '$466load_global.8': [<numba.core.ir.Assign object at 0x7f71bab07610>],
             '$486load_global.17': [<numba.core.ir.Assign object at 0x7f71baa89250>],
             '$494binary_subscr.21': [<numba.core.ir.Assign object at 0x7f71baa9eb50>],
             '$496binary_multiply.22': [<numba.core.ir.Assign object at 0x7f71baa899a0>],
             '$4load_method.1.923': [<numba.core.ir.Assign object at 0x7f71ba1592b0>],
             '$500binary_add.24': [<numba.core.ir.Assign object at 0x7f71baa89ca0>],
             '$506binary_multiply.27': [<numba.core.ir.Assign object at 0x7f71baa8b100>],
             '$510binary_add.29': [<numba.core.ir.Assign object at 0x7f71baa8b3a0>],
             '$514binary_add.31': [<numba.core.ir.Assign object at 0x7f71baa8b6a0>],
             '$516call_function.32': [<numba.core.ir.Assign object at 0x7f71baa8b850>],
             '$518get_iter.33': [<numba.core.ir.Assign object at 0x7f71baa8b970>],
             '$520for_iter.2': [<numba.core.ir.Assign object at 0x7f71bab07b20>],
             '$520for_iter.4': [<numba.core.ir.Assign object at 0x7f71baa89fa0>],
             '$538binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7f71baa8d6a0>],
             '$542binary_subtract.11': [<numba.core.ir.Assign object at 0x7f71baa8d940>],
             '$554binary_subtract.16': [<numba.core.ir.Assign object at 0x7f71baa8f100>],
             '$558binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7f71baa8f400>],
             '$564binary_subscr.21': [<numba.core.ir.Assign object at 0x7f71be3dc640>],
             '$566build_tuple.22': [<numba.core.ir.Assign object at 0x7f71baa8f9a0>],
             '$568binary_subscr.23': [<numba.core.ir.Assign object at 0x7f71baa8fb20>],
             '$56build_slice.3.943': [<numba.core.ir.Assign object at 0x7f71b99f7df0>],
             '$56build_slice.4.944': [<numba.core.ir.Assign object at 0x7f71b9a2aca0>],
             '$580binary_modulo.28': [<numba.core.ir.Assign object at 0x7f71baa91340>],
             '$584compare_op.30': [<numba.core.ir.Assign object at 0x7f71baa91640>],
             '$586pred': [<numba.core.ir.Assign object at 0x7f71baa918b0>],
             '$58binary_subscr.5.945': [<numba.core.ir.Assign object at 0x7f71b9a2aa30>],
             '$596binary_subscr.6': [<numba.core.ir.Assign object at 0x7f71baa91ac0>],
             '$602binary_multiply.9': [<numba.core.ir.Assign object at 0x7f71baa72760>],
             '$610binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7f71baa93400>],
             '$612binary_subscr.14': [<numba.core.ir.Assign object at 0x7f71baa93580>],
             '$614binary_multiply.15': [<numba.core.ir.Assign object at 0x7f71baa93700>],
             '$616inplace_add.16': [<numba.core.ir.Assign object at 0x7f71baa93880>],
             '$630binary_subscr.6': [<numba.core.ir.Assign object at 0x7f71baa93d60>],
             '$636binary_multiply.9': [<numba.core.ir.Assign object at 0x7f71baa72100>],
             '$642binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71baa95520>],
             '$644binary_multiply.13': [<numba.core.ir.Assign object at 0x7f71baa956a0>],
             '$646inplace_add.14': [<numba.core.ir.Assign object at 0x7f71baa95820>],
             '$66build_slice.10.949': [<numba.core.ir.Assign object at 0x7f71ba27f190>],
             '$66build_slice.9.948': [<numba.core.ir.Assign object at 0x7f71ba27f070>],
             '$72return_value.12.951': [<numba.core.ir.Assign object at 0x7f71ba27f550>],
             '$AX_S.263': [<numba.core.ir.Assign object at 0x7f71baafb250>],
             '$D_S.266': [<numba.core.ir.Assign object at 0x7f71baafb490>],
             '$H_batch.2.689': [<numba.core.ir.Assign object at 0x7f71baa72790>],
             '$N_det.267': [<numba.core.ir.Assign object at 0x7f71bab07e80>],
             '$XD_S.264': [<numba.core.ir.Assign object at 0x7f71baafb370>],
             '$binom_prod.2.687': [<numba.core.ir.Assign object at 0x7f71baa6f6d0>],
             '$const16.6.925': [<numba.core.ir.Assign object at 0x7f71ba159a90>],
             '$const202.4': [<numba.core.ir.Assign object at 0x7f71baaedbb0>],
             '$const212.9': [<numba.core.ir.Assign object at 0x7f71baaf22b0>],
             '$const22.9.927': [<numba.core.ir.Assign object at 0x7f71ba159eb0>],
             '$const250.24': [<numba.core.ir.Assign object at 0x7f71baaf4d30>],
             '$const254.26': [<numba.core.ir.Assign object at 0x7f71baaf4fd0>],
             '$const30.13.931': [<numba.core.ir.Assign object at 0x7f71b9f904f0>],
             '$const350.16': [<numba.core.ir.Assign object at 0x7f71baafd1f0>],
             '$const354.18': [<numba.core.ir.Assign object at 0x7f71baafd4f0>],
             '$const364.2': [<numba.core.ir.Assign object at 0x7f71baafda30>],
             '$const368.4': [<numba.core.ir.Assign object at 0x7f71baafdd30>],
             '$const386.5': [<numba.core.ir.Assign object at 0x7f71baaffa30>],
             '$const390.7': [<numba.core.ir.Assign object at 0x7f71baaffcd0>],
             '$const428.24': [<numba.core.ir.Assign object at 0x7f71bab04550>],
             '$const488.18': [<numba.core.ir.Assign object at 0x7f71baa893d0>],
             '$const492.20': [<numba.core.ir.Assign object at 0x7f71baa89670>],
             '$const498.23': [<numba.core.ir.Assign object at 0x7f71baa89af0>],
             '$const502.25': [<numba.core.ir.Assign object at 0x7f71baa89df0>],
             '$const512.30': [<numba.core.ir.Assign object at 0x7f71baa8b4f0>],
             '$const52.1.941': [<numba.core.ir.Assign object at 0x7f71b9f598b0>],
             '$const532.6': [<numba.core.ir.Assign object at 0x7f71baa8d250>],
             '$const536.8': [<numba.core.ir.Assign object at 0x7f71baa8d4f0>],
             '$const54.2.942': [<numba.core.ir.Assign object at 0x7f71b9f59a30>],
             '$const552.15': [<numba.core.ir.Assign object at 0x7f71baa8df10>],
             '$const556.17': [<numba.core.ir.Assign object at 0x7f71baa8f250>],
             '$const562.20': [<numba.core.ir.Assign object at 0x7f71baa8f670>],
             '$const578.27': [<numba.core.ir.Assign object at 0x7f71baa91190>],
             '$const582.29': [<numba.core.ir.Assign object at 0x7f71baa91490>],
             '$const608.12': [<numba.core.ir.Assign object at 0x7f71baa93250>],
             '$const62.7.946': [<numba.core.ir.Assign object at 0x7f71b9f59d30>],
             '$const64.8.947': [<numba.core.ir.Assign object at 0x7f71b9f59eb0>],
             '$const70.11.950': [<numba.core.ir.Assign object at 0x7f71ba27f3d0>],
             '$empty_attr_attr.224': [<numba.core.ir.Assign object at 0x7f71ba45b640>],
             '$empty_attr_attr.229': [<numba.core.ir.Assign object at 0x7f71ba755430>],
             '$i.261': [<numba.core.ir.Assign object at 0x7f71baaf5580>],
             '$np_g_var.223': [<numba.core.ir.Assign object at 0x7f71ba45bee0>],
             '$np_g_var.228': [<numba.core.ir.Assign object at 0x7f71ba3bea60>],
             '$np_typ_var.225': [<numba.core.ir.Assign object at 0x7f71ba38cc40>],
             '$np_typ_var.230': [<numba.core.ir.Assign object at 0x7f71b9e2bd90>],
             '$oddVX_S.265': [<numba.core.ir.Assign object at 0x7f71baafb5b0>],
             '$phi40.0.936': [<numba.core.ir.Assign object at 0x7f71ba159460>],
             '$phi42.1.940': [<numba.core.ir.Assign object at 0x7f71b9f90c40>],
             'A': [<numba.core.ir.Assign object at 0x7f71ba3c6820>],
             'D': [<numba.core.ir.Assign object at 0x7f71ba3c6700>],
             'E': [<numba.core.ir.Assign object at 0x7f71baafbe50>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x7f71ba1595e0>,
                            <numba.core.ir.Assign object at 0x7f71baa2d640>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x7f71b9d97880>],
             'Hnew': [<numba.core.ir.Assign object at 0x7f71ba391dc0>],
             'N': [<numba.core.ir.Assign object at 0x7f71baa8bfa0>],
             'N__fixed': [<numba.core.ir.Assign object at 0x7f71ba3c65e0>],
             'N__max': [<numba.core.ir.Assign object at 0x7f71ba3c64c0>],
             '_170binary__add_75': [<numba.core.ir.Assign object at 0x7f71ba3c6940>],
             'assert.175': [<numba.core.ir.Assign object at 0x7f71ba8aa4c0>],
             'assert.206': [<numba.core.ir.Assign object at 0x7f71ba87e3a0>],
             'batch__max': [<numba.core.ir.Assign object at 0x7f71ba3c6160>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7f71baac4a60>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x7f71baa2d130>,
                              <numba.core.ir.Assign object at 0x7f71baa2dbe0>],
             'binoms': [<numba.core.ir.Assign object at 0x7f71ba3c6040>],
             'bool296': [<numba.core.ir.Assign object at 0x7f71baaf7a90>],
             'bool358': [<numba.core.ir.Assign object at 0x7f71baafd7f0>],
             'bool372': [<numba.core.ir.Assign object at 0x7f71baaff070>],
             'bool586': [<numba.core.ir.Assign object at 0x7f71baa91790>],
             'delta': [<numba.core.ir.Assign object at 0x7f71ba203d00>],
             'delta.2': [<numba.core.ir.Assign object at 0x7f71baa2d310>,
                         <numba.core.ir.Assign object at 0x7f71baa2ddf0>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7f71b9debb50>],
             'edge__reps__size0_164': [<numba.core.ir.Assign object at 0x7f71b9debfa0>],
             'even__cutoff': [<numba.core.ir.Assign object at 0x7f71b9debe80>],
             'f': [<numba.core.ir.Assign object at 0x7f71bab041c0>],
             'f_even': [<numba.core.ir.Assign object at 0x7f71bab073d0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7f71bab07fd0>],
             'glynn': [<numba.core.ir.Assign object at 0x7f71b9debd60>],
             'j': [<numba.core.ir.Assign object at 0x7f71baac4fd0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71baaf4190>],
             'kept_edges_shape.171': [<numba.core.ir.Assign object at 0x7f71ba8aa0d0>],
             'kept_edges_size0.172': [<numba.core.ir.Assign object at 0x7f71ba8aa3d0>],
             'msg.174': [<numba.core.ir.Assign object at 0x7f71ba8aaca0>],
             'msg.205': [<numba.core.ir.Assign object at 0x7f71ba87e340>],
             'n': [<numba.core.ir.Assign object at 0x7f71b9debc40>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7f71baa720d0>],
             'oddV': [<numba.core.ir.Assign object at 0x7f71b9deba00>],
             'oddV0': [<numba.core.ir.Assign object at 0x7f71b9deb8e0>],
             'oddVX_S0': [<numba.core.ir.Assign object at 0x7f71baa6f550>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71b9deb730>],
             'oddloop0': [<numba.core.ir.Assign object at 0x7f71b9deb610>],
             'parfor__index_244': [<numba.core.ir.Assign object at 0x7f71b9f59250>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7f71baac4820>],
             'plus_minus.1': [<numba.core.ir.Assign object at 0x7f71baac4760>],
             'ret.176': [<numba.core.ir.Assign object at 0x7f71ba8aae80>],
             'ret.207': [<numba.core.ir.Assign object at 0x7f71ba934820>],
             'sched.921': [<numba.core.ir.Assign object at 0x7f71ba3c6a60>]})
DEBUG 2022-02-14 16:45:30,279 SSA violators {'binom_prod.2', 'H__batch_2', 'delta.2'}
DEBUG 2022-02-14 16:45:30,279 Fix SSA violator on var binom_prod.2
DEBUG 2022-02-14 16:45:30,279 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,279 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,279 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,279 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,279 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,279 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,279 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,279 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,280 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,280 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,280 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,280 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,280 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,280 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,280 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,280 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,280 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,280 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,280 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,280 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,280 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,280 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,280 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,280 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,280 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,280 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,280 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,280 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,280 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,280 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,280 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,280 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,280 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,281 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,281 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,281 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,281 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,281 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,281 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,281 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,281 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,281 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,281 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,281 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,281 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,281 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,281 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,281 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,281 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,281 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,282 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,282 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,282 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,282 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,282 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,282 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,282 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,282 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,282 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,282 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,282 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,282 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,282 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,282 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,282 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,282 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,282 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,282 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,282 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,282 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,282 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,282 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,282 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,282 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,282 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,283 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,283 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,283 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,283 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,283 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,283 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,283 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,283 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,283 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,283 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,283 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,283 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,283 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,283 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,283 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,283 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,283 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,283 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,283 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,283 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,283 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,283 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,283 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,283 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,283 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,283 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,283 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,283 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,283 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,284 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,284 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,284 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,284 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,284 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,284 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,284 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,284 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,284 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,284 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,284 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,284 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,284 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,284 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,284 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,284 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,284 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,284 first assign: binom_prod.2
DEBUG 2022-02-14 16:45:30,284 replaced with: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,284 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,284 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,284 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,284 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,284 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,284 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,285 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,285 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,285 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,285 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,285 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,285 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,285 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:30,285 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,285 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,285 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,285 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,285 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,285 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,285 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,285 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,285 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,285 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,285 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,285 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,285 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,285 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,285 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,285 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,285 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,285 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,286 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,286 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,286 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,286 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,286 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,286 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,286 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,286 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,286 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,286 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,286 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,286 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,286 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,286 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,286 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,286 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,286 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,286 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,287 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,287 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,287 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,287 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,287 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,287 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,287 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,287 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,287 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,287 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,287 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,287 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,287 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,287 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,287 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,287 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,287 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,287 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,287 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,287 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:30,287 replaced with: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,287 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,287 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,288 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,288 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,288 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,288 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,288 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,288 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,288 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,288 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,288 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,288 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,288 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,288 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,288 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,288 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:30,288 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,288 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,288 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,288 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,288 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,288 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,288 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,288 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,288 on stmt: H__batch_2 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,289 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,289 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,289 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,289 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,289 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,289 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,289 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,289 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,289 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,289 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,289 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,289 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,289 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,289 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,289 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,289 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,289 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,289 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,289 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,289 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,289 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,289 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,289 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,289 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,289 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,290 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,290 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x7f71b9c13100>],
             675: [<numba.core.ir.Assign object at 0x7f71b9c13c40>]})
DEBUG 2022-02-14 16:45:30,290 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,290 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,290 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,290 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,290 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,290 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,290 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,290 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,290 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,290 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,290 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,290 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,290 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,290 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,290 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,290 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,290 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,290 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,290 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,290 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,290 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,290 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,290 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,290 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,291 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,291 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,291 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,291 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,291 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,291 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,291 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,291 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,291 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,291 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,291 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,291 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,291 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,291 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,291 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,291 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,292 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,292 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,292 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,292 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,292 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,292 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,292 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,292 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,292 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,292 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,292 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,292 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,292 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,292 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,292 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,292 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,292 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,292 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,292 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,292 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,292 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,292 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,292 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,292 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,293 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,293 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,293 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,293 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,293 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,293 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,293 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,293 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,293 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,293 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,293 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,293 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,293 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,293 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,293 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,293 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,293 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,293 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,293 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,293 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,294 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,294 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,294 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,294 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,294 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,294 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,294 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,294 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,294 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,294 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,294 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,294 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,294 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,294 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,294 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,294 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,294 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,294 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,294 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,295 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,295 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,295 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,295 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,295 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,295 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,295 find_def var='binom_prod.2' stmt=$binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,295 find_def_from_top label 675
DEBUG 2022-02-14 16:45:30,295 idom 501 from label 675
DEBUG 2022-02-14 16:45:30,295 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,295 find_def_from_top label 501
DEBUG 2022-02-14 16:45:30,295 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 501
DEBUG 2022-02-14 16:45:30,295 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:30,295 incoming_def binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,295 find_def_from_bottom label 675
DEBUG 2022-02-14 16:45:30,295 incoming_def binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,295 replaced with: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,295 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,295 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,295 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,295 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,296 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,296 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,296 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,296 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,296 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,296 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,296 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,296 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,296 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,296 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:30,296 find_def var='binom_prod.2' stmt=n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:45:30,296 find_def_from_top label 816
DEBUG 2022-02-14 16:45:30,296 idom 814 from label 816
DEBUG 2022-02-14 16:45:30,296 find_def_from_bottom label 814
DEBUG 2022-02-14 16:45:30,296 find_def_from_top label 814
DEBUG 2022-02-14 16:45:30,296 idom 777 from label 814
DEBUG 2022-02-14 16:45:30,296 find_def_from_bottom label 777
DEBUG 2022-02-14 16:45:30,296 find_def_from_top label 777
DEBUG 2022-02-14 16:45:30,296 idom 723 from label 777
DEBUG 2022-02-14 16:45:30,296 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,296 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,296 idom 703 from label 723
DEBUG 2022-02-14 16:45:30,296 find_def_from_bottom label 703
DEBUG 2022-02-14 16:45:30,296 find_def_from_top label 703
DEBUG 2022-02-14 16:45:30,296 idom 501 from label 703
DEBUG 2022-02-14 16:45:30,296 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,297 replaced with: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:45:30,297 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,297 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,297 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,297 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,297 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,297 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,297 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,297 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,297 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,297 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,297 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,297 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,297 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,297 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,297 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,297 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,297 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,297 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,297 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,297 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,297 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,298 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,298 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,298 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,298 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,298 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,298 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,298 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,298 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,298 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,298 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,298 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,298 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,298 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,298 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,299 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,299 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,299 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,299 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,299 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,299 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,299 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,299 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,299 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,299 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,299 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,299 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,299 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,299 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,299 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,299 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,299 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,299 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,299 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,299 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,299 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,299 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,300 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,300 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,300 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,300 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,300 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,300 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,300 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,300 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,300 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,300 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,300 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,300 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,300 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,300 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,300 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,300 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,300 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:30,300 find_def var='binom_prod.2' stmt=$438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:45:30,300 find_def_from_top label 739
DEBUG 2022-02-14 16:45:30,300 idom 737 from label 739
DEBUG 2022-02-14 16:45:30,300 find_def_from_bottom label 737
DEBUG 2022-02-14 16:45:30,301 find_def_from_top label 737
DEBUG 2022-02-14 16:45:30,301 idom 723 from label 737
DEBUG 2022-02-14 16:45:30,301 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,301 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,301 idom 703 from label 723
DEBUG 2022-02-14 16:45:30,301 find_def_from_bottom label 703
DEBUG 2022-02-14 16:45:30,301 find_def_from_top label 703
DEBUG 2022-02-14 16:45:30,301 idom 501 from label 703
DEBUG 2022-02-14 16:45:30,301 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,301 replaced with: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:45:30,301 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,301 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,301 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,301 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,301 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,301 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,301 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,301 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,301 on stmt: H__batch_2 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,301 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,301 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,301 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,301 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,301 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,301 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,302 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,302 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,302 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,302 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,302 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,302 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,302 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,302 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,302 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,302 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,302 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,302 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,302 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,302 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,302 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,302 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,302 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,302 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,302 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,302 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,302 Fix SSA violator on var H__batch_2
DEBUG 2022-02-14 16:45:30,303 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,303 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,303 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,303 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,303 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,303 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,303 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,303 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,303 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,303 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,303 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,303 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,303 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,303 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,303 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,303 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,303 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,303 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,303 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,303 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,303 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,303 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,303 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,303 first assign: H__batch_2
DEBUG 2022-02-14 16:45:30,303 replaced with: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,303 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,303 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,303 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,304 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,304 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,304 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,304 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,304 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,304 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,304 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,304 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,304 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,304 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,304 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,304 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,304 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,304 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,304 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,304 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,304 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,304 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,304 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,304 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,305 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,305 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,305 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,305 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,305 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,305 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,305 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,305 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,305 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,305 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,305 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,305 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,305 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,305 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,305 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,305 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,305 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,305 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,305 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,305 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,306 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,306 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,306 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,306 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,306 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,306 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,306 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,306 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,306 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,306 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,306 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,306 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,306 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,306 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,306 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,306 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,306 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,306 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,306 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,306 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,306 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,306 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,306 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,306 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,306 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,306 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,306 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,307 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,307 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,307 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,307 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,307 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,307 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,307 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,307 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,307 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,307 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,307 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,307 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,307 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,307 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,307 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,307 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,308 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,308 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,308 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,308 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,308 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,308 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,308 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,308 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,308 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:45:30,308 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,308 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,308 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,308 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,308 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,308 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,308 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,308 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,308 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,308 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,308 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,308 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,308 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,308 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,308 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,309 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,309 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,309 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,309 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,309 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,309 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,309 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,309 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,309 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,309 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,309 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,309 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,309 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,309 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,309 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,309 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,309 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,309 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,309 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,309 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,310 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,310 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,310 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,310 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,310 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,310 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,310 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,310 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,310 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,310 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,310 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,310 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,310 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,310 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,310 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,310 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,310 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,310 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,310 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,310 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,310 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,310 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,310 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,310 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,310 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,311 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,311 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,311 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,311 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,311 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,311 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,311 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,311 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,311 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,311 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,311 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,311 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,311 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,311 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:45:30,311 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,311 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,311 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,311 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,311 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,311 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,311 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,311 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,311 on stmt: H__batch_2 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,311 replaced with: H__batch_2.1 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,312 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,312 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,312 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,312 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:45:30,312 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,312 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,312 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,312 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,312 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,312 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,312 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,312 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,312 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,312 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,312 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,312 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,312 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,312 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,312 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,312 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,312 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,312 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,312 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,312 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,313 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,313 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c13520>
DEBUG 2022-02-14 16:45:30,313 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,313 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9c13eb0>],
             889: [<numba.core.ir.Assign object at 0x7f71b9c33940>]})
DEBUG 2022-02-14 16:45:30,313 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,313 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,313 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,313 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,313 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,313 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,313 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,313 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,313 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,313 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,313 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,313 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,313 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,313 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,313 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,313 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,313 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,313 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,313 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,313 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,313 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,313 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,313 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,314 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,314 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,314 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,314 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,314 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,314 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,314 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,314 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,314 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,314 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,314 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,314 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,314 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,314 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,314 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,314 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,314 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,315 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,315 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,315 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,315 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,315 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,315 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,315 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,315 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,315 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,315 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,315 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,315 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,315 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,315 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,315 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,315 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,315 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,315 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,315 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,315 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,315 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,315 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,315 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,316 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,316 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,316 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,316 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,316 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,316 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,316 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,316 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,316 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,316 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,316 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,316 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,316 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,316 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,316 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,316 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,316 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,316 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,316 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,316 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,316 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,317 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,317 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,317 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,317 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,317 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,317 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,317 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,317 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,317 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,317 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,317 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,317 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,317 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,317 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,317 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,317 find_def var='H__batch_2' stmt=$58binary_subscr.5.945 = getitem(value=H__batch_2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,317 find_def_from_top label 1035
DEBUG 2022-02-14 16:45:30,317 idom 40 from label 1035
DEBUG 2022-02-14 16:45:30,317 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:30,317 find_def_from_top label 40
DEBUG 2022-02-14 16:45:30,317 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-02-14 16:45:30,317 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,317 incoming_def H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,317 find_def_from_bottom label 928
DEBUG 2022-02-14 16:45:30,317 find_def_from_top label 928
DEBUG 2022-02-14 16:45:30,317 idom 889 from label 928
DEBUG 2022-02-14 16:45:30,317 find_def_from_bottom label 889
DEBUG 2022-02-14 16:45:30,318 incoming_def H__batch_2.1 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,318 replaced with: $58binary_subscr.5.945 = getitem(value=H__batch_2.2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,318 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,318 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,318 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,318 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,318 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,318 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,318 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,318 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,318 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,318 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,318 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,318 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,318 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,318 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,318 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,318 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,318 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,318 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,318 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,318 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,318 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,318 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,319 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,319 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,319 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,319 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,319 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,319 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,319 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:45:30,319 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,319 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,319 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,319 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,319 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,319 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,319 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,319 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,319 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,319 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,319 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,319 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,319 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,319 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,319 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,319 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,320 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,320 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,320 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,320 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,320 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,320 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,320 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,320 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,320 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,320 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,320 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,320 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,320 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,320 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,320 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,320 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,320 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,320 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,320 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,321 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,321 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,321 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,321 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,321 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,321 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,321 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,321 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,321 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,321 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,321 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,321 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,321 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,321 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,321 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,321 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,321 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,321 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,321 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,321 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,321 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,321 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,321 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,321 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,322 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,322 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,322 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,322 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,322 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,322 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,322 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,322 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,322 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,322 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,322 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,322 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,322 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,322 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,322 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,322 find_def var='H__batch_2' stmt=$432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,322 find_def_from_top label 739
DEBUG 2022-02-14 16:45:30,322 idom 737 from label 739
DEBUG 2022-02-14 16:45:30,322 find_def_from_bottom label 737
DEBUG 2022-02-14 16:45:30,322 find_def_from_top label 737
DEBUG 2022-02-14 16:45:30,322 idom 723 from label 737
DEBUG 2022-02-14 16:45:30,322 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,322 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,322 idom 703 from label 723
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 703
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 703
DEBUG 2022-02-14 16:45:30,323 idom 501 from label 703
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 501
DEBUG 2022-02-14 16:45:30,323 idom 50 from label 501
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 50
DEBUG 2022-02-14 16:45:30,323 idom 42 from label 50
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 42
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 42
DEBUG 2022-02-14 16:45:30,323 idom 40 from label 42
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:30,323 replaced with: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,323 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:45:30,323 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,323 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,323 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,323 find_def var='H__batch_2' stmt=H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 739
DEBUG 2022-02-14 16:45:30,323 idom 737 from label 739
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 737
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 737
DEBUG 2022-02-14 16:45:30,323 idom 723 from label 737
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,323 idom 703 from label 723
DEBUG 2022-02-14 16:45:30,323 find_def_from_bottom label 703
DEBUG 2022-02-14 16:45:30,323 find_def_from_top label 703
DEBUG 2022-02-14 16:45:30,323 idom 501 from label 703
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 501
DEBUG 2022-02-14 16:45:30,324 idom 50 from label 501
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 50
DEBUG 2022-02-14 16:45:30,324 idom 42 from label 50
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 42
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 42
DEBUG 2022-02-14 16:45:30,324 idom 40 from label 42
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:30,324 replaced with: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,324 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,324 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,324 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,324 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,324 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,324 find_def var='H__batch_2' stmt=$H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 889
DEBUG 2022-02-14 16:45:30,324 idom 814 from label 889
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 814
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 814
DEBUG 2022-02-14 16:45:30,324 idom 777 from label 814
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 777
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 777
DEBUG 2022-02-14 16:45:30,324 idom 723 from label 777
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,324 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,324 idom 703 from label 723
DEBUG 2022-02-14 16:45:30,324 find_def_from_bottom label 703
DEBUG 2022-02-14 16:45:30,325 find_def_from_top label 703
DEBUG 2022-02-14 16:45:30,325 idom 501 from label 703
DEBUG 2022-02-14 16:45:30,325 find_def_from_bottom label 501
DEBUG 2022-02-14 16:45:30,325 find_def_from_top label 501
DEBUG 2022-02-14 16:45:30,325 idom 50 from label 501
DEBUG 2022-02-14 16:45:30,325 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:30,325 find_def_from_top label 50
DEBUG 2022-02-14 16:45:30,325 idom 42 from label 50
DEBUG 2022-02-14 16:45:30,325 find_def_from_bottom label 42
DEBUG 2022-02-14 16:45:30,325 find_def_from_top label 42
DEBUG 2022-02-14 16:45:30,325 idom 40 from label 42
DEBUG 2022-02-14 16:45:30,325 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:30,325 replaced with: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,325 on stmt: H__batch_2.1 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,325 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,325 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,325 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,325 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:45:30,325 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,325 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,325 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,325 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,325 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,325 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,325 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,325 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,325 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,326 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,326 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,326 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,326 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,326 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,326 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,326 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,326 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,326 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,326 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,326 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,326 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,326 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,326 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,326 Fix SSA violator on var delta.2
DEBUG 2022-02-14 16:45:30,326 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,326 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,326 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,326 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,326 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,326 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,326 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,326 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,326 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,326 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,326 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,326 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,327 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,327 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,327 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,327 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,327 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,327 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,327 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,327 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,327 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,327 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,327 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,327 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,327 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,327 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,327 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,327 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,327 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,327 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,327 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,327 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,327 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,327 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,327 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,327 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,327 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,327 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,328 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,328 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,328 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,328 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,328 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,328 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,328 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,328 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,328 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,328 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,328 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,328 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,328 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,328 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,328 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,328 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,329 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,329 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,329 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,329 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,329 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,329 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,329 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,329 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,329 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,329 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,329 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,329 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,329 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,329 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,329 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,329 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,329 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,329 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,329 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,329 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,329 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,330 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,330 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,330 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,330 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,330 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,330 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 928])
DEBUG 2022-02-14 16:45:30,330 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,330 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,330 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,330 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,330 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,330 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,330 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,330 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,330 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,330 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,330 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,330 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,330 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,330 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,330 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,330 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2.2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,330 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,330 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,330 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,330 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,331 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,331 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,331 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,331 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,331 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,331 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,331 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,331 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,331 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,331 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,331 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,331 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,331 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,331 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,331 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,331 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,331 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,331 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,331 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,331 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,331 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,331 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,331 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,331 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,331 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:45:30,331 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,331 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,332 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,332 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,332 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,332 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,332 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,332 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,332 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,332 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,332 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,332 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,332 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,332 first assign: delta.2
DEBUG 2022-02-14 16:45:30,332 replaced with: delta.2 = delta
DEBUG 2022-02-14 16:45:30,332 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,332 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,332 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,332 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:30,332 replaced with: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:30,332 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,332 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,332 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,332 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,332 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,332 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,332 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,332 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,333 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,333 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,333 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,333 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,333 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,333 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,333 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,333 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,333 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,333 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,333 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,333 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,333 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,333 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,333 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,333 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,333 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,333 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,333 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,333 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,334 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,334 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,334 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,334 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,334 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,334 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,334 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,334 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,334 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,334 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,334 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,334 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,334 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,334 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,334 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,334 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,334 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,334 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,334 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,334 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,334 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,334 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,334 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,334 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,334 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,335 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,335 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,335 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,335 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:45:30,335 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,335 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,335 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,335 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,335 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,335 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,335 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,335 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,335 on stmt: H__batch_2.1 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,335 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,335 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,335 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,335 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:45:30,335 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,335 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,335 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,335 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,335 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,335 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,335 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,335 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,336 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,336 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,336 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,336 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,336 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,336 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,336 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,336 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,336 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,336 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,336 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,336 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,336 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,336 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c33ac0>
DEBUG 2022-02-14 16:45:30,336 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,336 Replaced assignments: defaultdict(<class 'list'>,
            {707: [<numba.core.ir.Assign object at 0x7f71b9c13370>],
             717: [<numba.core.ir.Assign object at 0x7f71b9c135b0>]})
DEBUG 2022-02-14 16:45:30,336 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,336 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,336 on stmt: sched.921 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:30,336 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:45:30,336 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:45:30,336 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:45:30,336 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:45:30,336 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:45:30,336 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:45:30,336 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:45:30,336 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:45:30,336 on stmt: edge__reps__size0_164 = arg(9, name=edge__reps__size0_164)
DEBUG 2022-02-14 16:45:30,337 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:45:30,337 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:45:30,337 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:45:30,337 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:45:30,337 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:45:30,337 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:45:30,337 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:45:30,337 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:30,337 on stmt: $2load_global.0.922 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,337 on stmt: $4load_method.1.923 = getattr(value=$2load_global.0.922, attr=copy)
DEBUG 2022-02-14 16:45:30,337 on stmt: H__batch_2 = call $4load_method.1.923(H__batch_2__arr, func=$4load_method.1.923, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,337 on stmt: $12load_global.4.924 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,337 on stmt: $const16.6.925 = const(int, 0)
DEBUG 2022-02-14 16:45:30,337 on stmt: $18binary_subscr.7.926 = getitem(value=sched.921, index=$const16.6.925, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,337 on stmt: $const22.9.927 = const(int, 1)
DEBUG 2022-02-14 16:45:30,337 on stmt: $24binary_subscr.10.928 = getitem(value=sched.921, index=$const22.9.927, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,337 on stmt: $26load_global.11.929 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,337 on stmt: $28load_method.12.930 = getattr(value=$26load_global.11.929, attr=uint8)
DEBUG 2022-02-14 16:45:30,337 on stmt: $const30.13.931 = const(int, 1)
DEBUG 2022-02-14 16:45:30,337 on stmt: $32call_method.14.932 = call $28load_method.12.930($const30.13.931, func=$28load_method.12.930, args=[Var($const30.13.931, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,337 on stmt: $34binary_add.15.933 = $24binary_subscr.10.928 + $32call_method.14.932
DEBUG 2022-02-14 16:45:30,337 on stmt: $36call_function.16.934 = call $12load_global.4.924($18binary_subscr.7.926, $34binary_add.15.933, func=$12load_global.4.924, args=[Var($18binary_subscr.7.926, <string>:3), Var($34binary_add.15.933, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,337 on stmt: $38get_iter.17.935 = getiter(value=$36call_function.16.934)
DEBUG 2022-02-14 16:45:30,337 on stmt: $phi40.0.936 = $38get_iter.17.935
DEBUG 2022-02-14 16:45:30,337 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:45:30,337 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:45:30,338 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,338 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,338 on stmt: msg.174 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:45:30,338 on stmt: assert.175 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,338 on stmt: $np_g_var.228 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,338 on stmt: $empty_attr_attr.229 = getattr(value=$np_g_var.228, attr=empty)
DEBUG 2022-02-14 16:45:30,338 on stmt: $np_typ_var.230 = getattr(value=$np_g_var.228, attr=int64)
DEBUG 2022-02-14 16:45:30,338 on stmt: delta = call $empty_attr_attr.229(edge__reps__size0_164, $np_typ_var.230, func=$empty_attr_attr.229, args=[Var(edge__reps__size0_164, loop_hafnian_batch.py:95), Var($np_typ_var.230, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,338 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:30,338 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:30,338 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:45:30,338 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,338 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:45:30,338 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:45:30,338 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:45:30,338 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:45:30,339 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:30,339 on stmt: $np_g_var.223 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:30,339 on stmt: $empty_attr_attr.224 = getattr(value=$np_g_var.223, attr=empty)
DEBUG 2022-02-14 16:45:30,339 on stmt: $np_typ_var.225 = getattr(value=$np_g_var.223, attr=complex128)
DEBUG 2022-02-14 16:45:30,339 on stmt: Hnew = call $empty_attr_attr.224($214binary_add.10, $np_typ_var.225, func=$empty_attr_attr.224, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.225, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,339 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,339 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:45:30,339 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:45:30,339 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7f71beb25ee0>))
DEBUG 2022-02-14 16:45:30,339 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:45:30,339 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:45:30,339 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,339 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:45:30,339 on stmt: msg.205 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:45:30,339 on stmt: assert.206 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:30,339 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:30,339 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:30,339 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:45:30,339 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:45:30,339 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:45:30,339 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:45:30,339 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:45:30,339 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:45:30,340 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,340 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:30,340 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,340 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 928])
DEBUG 2022-02-14 16:45:30,340 on stmt: $40for_iter.1.937 = iternext(value=$phi40.0.936)
DEBUG 2022-02-14 16:45:30,340 on stmt: $40for_iter.2.938 = pair_first(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,340 on stmt: $40for_iter.3.939 = pair_second(value=$40for_iter.1.937)
DEBUG 2022-02-14 16:45:30,340 on stmt: $phi42.1.940 = $40for_iter.2.938
DEBUG 2022-02-14 16:45:30,340 on stmt: branch $40for_iter.3.939, 42, 1035
DEBUG 2022-02-14 16:45:30,340 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:30,340 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,340 on stmt: parfor__index_244 = $phi42.1.940
DEBUG 2022-02-14 16:45:30,340 on stmt: jump 50
DEBUG 2022-02-14 16:45:30,340 ==== SSA block rewrite pass on 1035
DEBUG 2022-02-14 16:45:30,340 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,340 on stmt: $const52.1.941 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $const54.2.942 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $56build_slice.3.943 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,340 on stmt: $56build_slice.4.944 = call $56build_slice.3.943($const52.1.941, $const54.2.942, func=$56build_slice.3.943, args=(Var($const52.1.941, <string>:5), Var($const54.2.942, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $58binary_subscr.5.945 = getitem(value=H__batch_2.2, index=$56build_slice.4.944, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,340 on stmt: $const62.7.946 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $const64.8.947 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $66build_slice.9.948 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:30,340 on stmt: $66build_slice.10.949 = call $66build_slice.9.948($const62.7.946, $const64.8.947, func=$66build_slice.9.948, args=(Var($const62.7.946, <string>:5), Var($const64.8.947, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,340 on stmt: H__batch_2__arr[$66build_slice.10.949] = $58binary_subscr.5.945
DEBUG 2022-02-14 16:45:30,340 on stmt: $const70.11.950 = const(NoneType, None)
DEBUG 2022-02-14 16:45:30,340 on stmt: $72return_value.12.951 = cast(value=$const70.11.950)
DEBUG 2022-02-14 16:45:30,340 on stmt: return $72return_value.12.951
DEBUG 2022-02-14 16:45:30,341 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:45:30,341 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,341 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,341 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.261, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,341 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:45:30,341 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,341 on stmt: $binom_prod.2.687 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,341 on stmt: binom_prod.2 = $binom_prod.2.687
DEBUG 2022-02-14 16:45:30,341 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,341 ==== SSA block rewrite pass on 816
DEBUG 2022-02-14 16:45:30,341 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,341 on stmt: N = N__fixed + $N_det.267
DEBUG 2022-02-14 16:45:30,341 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:45:30,341 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:45:30,341 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:45:30,341 on stmt: $554binary_subtract.16 = $N_det.267 - $const552.15
DEBUG 2022-02-14 16:45:30,341 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:45:30,341 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,341 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:45:30,341 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,341 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:45:30,341 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:45:30,341 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:45:30,341 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,342 on stmt: branch $586pred, 832, 871
DEBUG 2022-02-14 16:45:30,342 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:45:30,342 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,342 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,342 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:45:30,342 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:45:30,342 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,342 on stmt: ret.176 = call assert.175(msg.174, kept_edges_size0.172, edge__reps__size0_164, func=assert.175, args=[Var(msg.174, loop_hafnian_batch.py:114), Var(kept_edges_size0.172, loop_hafnian_batch.py:106), Var(edge__reps__size0_164, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,342 on stmt: id=3[LoopNest(index_variable = parfor_index.227, range = (0, edge__reps__size0_164, 1))]{1034: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.227, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:45:30,342 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:30,342 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,342 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:45:30,342 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,342 on stmt: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:30,342 on stmt: jump 723
DEBUG 2022-02-14 16:45:30,342 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:45:30,342 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,342 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,342 find_def var='delta.2' stmt=$328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,342 find_def_from_top label 723
DEBUG 2022-02-14 16:45:30,342 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 723
DEBUG 2022-02-14 16:45:30,342 find_def_from_bottom label 707
DEBUG 2022-02-14 16:45:30,342 incoming_def delta.2 = delta
DEBUG 2022-02-14 16:45:30,342 find_def_from_bottom label 717
DEBUG 2022-02-14 16:45:30,342 incoming_def delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:30,343 replaced with: $328call_function.6 = call $318load_global.1(delta.2.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,343 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:45:30,343 on stmt: $AX_S.263 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $XD_S.264 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $D_S.266 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $oddVX_S.265 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: E = call $340load_global.12($AX_S.263, func=$340load_global.12, args=[Var($AX_S.263, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,343 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:45:30,343 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,343 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:45:30,343 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:45:30,343 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,343 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:45:30,343 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,343 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:45:30,343 ==== SSA block rewrite pass on 832
DEBUG 2022-02-14 16:45:30,343 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,343 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,343 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:45:30,343 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,343 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:45:30,344 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,344 on stmt: Hnew[$N_det.267] = $616inplace_add.16
DEBUG 2022-02-14 16:45:30,344 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,344 ==== SSA block rewrite pass on 871
DEBUG 2022-02-14 16:45:30,344 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,344 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.267, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,344 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:45:30,344 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,344 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:45:30,344 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,344 on stmt: Hnew[$N_det.267] = $646inplace_add.14
DEBUG 2022-02-14 16:45:30,344 on stmt: jump 873
DEBUG 2022-02-14 16:45:30,344 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:30,344 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,344 on stmt: j = parfor__index_244
DEBUG 2022-02-14 16:45:30,344 on stmt: id=2[LoopNest(index_variable = parfor_index.222, range = (0, $214binary_add.10, 1))]{1033: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.222, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:45:30,344 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,344 on stmt: kept_edges_shape.171 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:30,344 on stmt: kept_edges_size0.172 = static_getitem(value=kept_edges_shape.171, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,344 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:45:30,344 on stmt: id=7[LoopNest(index_variable = parfor_index.242, range = (0, kept_edges_size0.172, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.242, parfor.py:256)
DEBUG 2022-02-14 16:45:30,344 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,344 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:45:30,344 on stmt: jump 501
DEBUG 2022-02-14 16:45:30,344 ==== SSA block rewrite pass on 873
DEBUG 2022-02-14 16:45:30,344 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,345 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,345 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:45:30,345 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,345 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,345 find_def var='delta.2' stmt=oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,345 find_def_from_top label 739
DEBUG 2022-02-14 16:45:30,345 idom 737 from label 739
DEBUG 2022-02-14 16:45:30,345 find_def_from_bottom label 737
DEBUG 2022-02-14 16:45:30,345 find_def_from_top label 737
DEBUG 2022-02-14 16:45:30,345 idom 723 from label 737
DEBUG 2022-02-14 16:45:30,345 find_def_from_bottom label 723
DEBUG 2022-02-14 16:45:30,345 replaced with: oddVX_S0 = call $376load_global.1(delta.2.2, oddV0, func=$376load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,345 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.10
DEBUG 2022-02-14 16:45:30,345 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:45:30,345 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.263, $XD_S.264, $D_S.266, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,345 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,345 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,345 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:45:30,345 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:45:30,345 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,345 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:45:30,345 on stmt: jump 777
DEBUG 2022-02-14 16:45:30,346 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:45:30,346 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,346 on stmt: ret.207 = call assert.206(msg.205, _170binary__add_75, $214binary_add.10, func=assert.206, args=[Var(msg.205, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,346 on stmt: $H_batch.2.689 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,346 on stmt: H__batch_2.1 = $H_batch.2.689
DEBUG 2022-02-14 16:45:30,346 on stmt: jump 928
DEBUG 2022-02-14 16:45:30,346 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:45:30,346 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,346 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:45:30,346 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:45:30,346 on stmt: $i.261 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,346 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:45:30,346 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:45:30,346 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:45:30,346 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,346 on stmt: f_even = call $450load_global.1(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,346 on stmt: f_odd = call $466load_global.8(E, $AX_S.263, $XD_S.264, $D_S.266, N__max, oddloop, $oddVX_S.265, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.263, loop_hafnian_batch.py:118), Var($XD_S.264, loop_hafnian_batch.py:118), Var($D_S.266, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.265, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,346 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:30,346 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:45:30,346 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:45:30,346 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,346 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:45:30,346 on stmt: jump 814
DEBUG 2022-02-14 16:45:30,347 ==== SSA block rewrite pass on 814
DEBUG 2022-02-14 16:45:30,347 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,347 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:45:30,347 on stmt: $N_det.267 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,347 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:45:30,347 on stmt: branch $520for_iter.4, 816, 889
DEBUG 2022-02-14 16:45:30,347 ==== SSA block rewrite pass on 928
DEBUG 2022-02-14 16:45:30,347 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c131f0>
DEBUG 2022-02-14 16:45:30,347 on stmt: jump 40
DEBUG 2022-02-14 16:45:30,355 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,356 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,356 stack: []
DEBUG 2022-02-14 16:45:30,356 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,356 stack []
DEBUG 2022-02-14 16:45:30,356 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,356 stack []
DEBUG 2022-02-14 16:45:30,356 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,356 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:30,356 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:30,356 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:30,356 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,356 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:30,356 end state. edges=[]
DEBUG 2022-02-14 16:45:30,356 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,356 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,356 defmap: {}
DEBUG 2022-02-14 16:45:30,356 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,356 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,356 keep phismap: {}
DEBUG 2022-02-14 16:45:30,356 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:30,356 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,356 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,357 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:30,358 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,358 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9baf820>
DEBUG 2022-02-14 16:45:30,358 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:30,358 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:30,358 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,358 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:30,358 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:30,358 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9baf220>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71b9a28250>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b9a28370>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9baf520>]})
DEBUG 2022-02-14 16:45:30,358 SSA violators set()
DEBUG 2022-02-14 16:45:30,363 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,364 stack: []
DEBUG 2022-02-14 16:45:30,364 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack []
DEBUG 2022-02-14 16:45:30,364 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack []
DEBUG 2022-02-14 16:45:30,364 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack ['$arrtype2.0']
DEBUG 2022-02-14 16:45:30,364 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:30,364 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-14 16:45:30,364 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-14 16:45:30,364 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:45:30,364 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:30,364 end state. edges=[]
DEBUG 2022-02-14 16:45:30,364 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,364 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,364 defmap: {}
DEBUG 2022-02-14 16:45:30,364 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,365 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,365 keep phismap: {}
DEBUG 2022-02-14 16:45:30,365 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:30,365 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,365 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,365 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:45:30,366 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9d47580>
DEBUG 2022-02-14 16:45:30,367 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-14 16:45:30,367 on stmt: size = arg(1, name=size)
DEBUG 2022-02-14 16:45:30,367 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:45:30,367 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-14 16:45:30,367 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,367 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:45:30,367 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:45:30,367 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f71b9d3efd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f71b9d47100>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71b9d3eb80>],
             'align': [<numba.core.ir.Assign object at 0x7f71b9d3e8e0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f71b9d3e190>],
             'size': [<numba.core.ir.Assign object at 0x7f71b9d3e070>]})
DEBUG 2022-02-14 16:45:30,367 SSA violators set()
DEBUG 2022-02-14 16:45:30,404 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,405 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,405 stack: []
DEBUG 2022-02-14 16:45:30,405 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack []
DEBUG 2022-02-14 16:45:30,405 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack []
DEBUG 2022-02-14 16:45:30,405 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:30,405 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:30,405 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:30,405 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,405 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:30,405 end state. edges=[]
DEBUG 2022-02-14 16:45:30,405 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,405 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,405 defmap: {}
DEBUG 2022-02-14 16:45:30,406 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,406 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,406 keep phismap: {}
DEBUG 2022-02-14 16:45:30,406 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:30,406 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,406 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,406 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:30,407 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,407 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba1d3cd0>
DEBUG 2022-02-14 16:45:30,407 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:30,407 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:30,407 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:30,407 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,407 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:30,407 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:30,408 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba0ac670>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba0ac130>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba0ac550>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba1d33d0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba1d35b0>]})
DEBUG 2022-02-14 16:45:30,408 SSA violators set()
DEBUG 2022-02-14 16:45:30,436 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,436 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,436 stack: []
DEBUG 2022-02-14 16:45:30,436 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack []
DEBUG 2022-02-14 16:45:30,436 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack []
DEBUG 2022-02-14 16:45:30,436 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:30,436 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:30,436 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:30,436 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:30,436 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:30,436 end state. edges=[]
DEBUG 2022-02-14 16:45:30,436 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,436 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,437 defmap: {}
DEBUG 2022-02-14 16:45:30,437 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,437 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,437 keep phismap: {}
DEBUG 2022-02-14 16:45:30,437 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:30,437 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,437 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,437 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:30,438 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,438 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba01a4c0>
DEBUG 2022-02-14 16:45:30,438 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:30,438 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:30,439 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:30,439 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,439 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:30,439 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:30,439 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b9b2f8e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9b2f3a0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b9b2f7c0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba01adf0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba01ab80>]})
DEBUG 2022-02-14 16:45:30,439 SSA violators set()
DEBUG 2022-02-14 16:45:30,836 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:30,837 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,837 stack: []
DEBUG 2022-02-14 16:45:30,837 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:45:30,837 stack []
DEBUG 2022-02-14 16:45:30,837 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:30,837 stack []
DEBUG 2022-02-14 16:45:30,837 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:30,837 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:30,837 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:45:30,837 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:30,837 stack []
DEBUG 2022-02-14 16:45:30,837 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:30,837 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:30,837 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:30,837 stack ['$14call_function.5']
DEBUG 2022-02-14 16:45:30,837 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:45:30,837 stack []
DEBUG 2022-02-14 16:45:30,838 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:45:30,838 stack ['$b18.6']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:45:30,838 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:45:30,838 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:45:30,838 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,838 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,838 stack: []
DEBUG 2022-02-14 16:45:30,838 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:30,838 stack []
DEBUG 2022-02-14 16:45:30,838 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:30,838 stack ['$const26.0']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:45:30,838 stack []
DEBUG 2022-02-14 16:45:30,838 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:45:30,838 stack ['$b30.1']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:45:30,838 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:45:30,838 stack []
DEBUG 2022-02-14 16:45:30,838 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:45:30,838 stack ['$exp36.3']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:45:30,838 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:45:30,838 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:45:30,839 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:45:30,839 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,839 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,839 stack: []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:45:30,839 stack []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:45:30,839 stack ['$const98.0']
DEBUG 2022-02-14 16:45:30,839 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:30,839 stack []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:45:30,839 stack ['$b102.1']
DEBUG 2022-02-14 16:45:30,839 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,839 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,839 stack: []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:45:30,839 stack []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:45:30,839 stack ['$44load_global.0']
DEBUG 2022-02-14 16:45:30,839 end state. edges=[]
DEBUG 2022-02-14 16:45:30,839 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,839 stack: []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:45:30,839 stack []
DEBUG 2022-02-14 16:45:30,839 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:45:30,839 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:45:30,839 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,840 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,840 stack: []
DEBUG 2022-02-14 16:45:30,840 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:30,840 stack []
DEBUG 2022-02-14 16:45:30,840 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:45:30,840 stack ['$exp106.0']
DEBUG 2022-02-14 16:45:30,840 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:30,840 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:45:30,840 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:45:30,840 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:45:30,840 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,840 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,840 stack: []
DEBUG 2022-02-14 16:45:30,840 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:45:30,840 stack []
DEBUG 2022-02-14 16:45:30,840 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:30,840 stack ['$a52.0']
DEBUG 2022-02-14 16:45:30,840 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:30,840 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:45:30,840 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:45:30,840 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:45:30,840 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,840 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,840 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,840 stack: []
DEBUG 2022-02-14 16:45:30,840 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:30,840 stack []
DEBUG 2022-02-14 16:45:30,841 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$114load_global.0']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$116load_method.1']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:30,841 stack ['$126call_method.6']
DEBUG 2022-02-14 16:45:30,841 end state. edges=[]
DEBUG 2022-02-14 16:45:30,841 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,841 stack: []
DEBUG 2022-02-14 16:45:30,841 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:45:30,841 stack []
DEBUG 2022-02-14 16:45:30,841 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:45:30,841 stack ['$exp130.0']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:45:30,841 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:45:30,841 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:45:30,842 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:45:30,842 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,842 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,842 stack: []
DEBUG 2022-02-14 16:45:30,842 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:45:30,842 stack []
DEBUG 2022-02-14 16:45:30,842 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:45:30,842 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:45:30,842 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,842 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,842 stack: []
DEBUG 2022-02-14 16:45:30,842 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:30,842 stack []
DEBUG 2022-02-14 16:45:30,842 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:45:30,842 stack ['$a76.0']
DEBUG 2022-02-14 16:45:30,842 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:30,842 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:45:30,842 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:30,842 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:45:30,842 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,842 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,842 stack: []
DEBUG 2022-02-14 16:45:30,842 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:45:30,842 stack []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:45:30,843 stack ['$exp138.0']
DEBUG 2022-02-14 16:45:30,843 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:45:30,843 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:45:30,843 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:45:30,843 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:45:30,843 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,843 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,843 stack: []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:45:30,843 stack []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:45:30,843 stack ['$invert172.0']
DEBUG 2022-02-14 16:45:30,843 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,843 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,843 stack: []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:45:30,843 stack []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:45:30,843 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:45:30,843 end state. edges=[]
DEBUG 2022-02-14 16:45:30,843 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,843 stack: []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:30,843 stack []
DEBUG 2022-02-14 16:45:30,843 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:45:30,843 stack ['$68load_global.0']
DEBUG 2022-02-14 16:45:30,843 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:30,844 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:45:30,844 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:30,844 stack ['$72call_function.2']
DEBUG 2022-02-14 16:45:30,844 end state. edges=[]
DEBUG 2022-02-14 16:45:30,844 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,844 stack: []
DEBUG 2022-02-14 16:45:30,844 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:30,844 stack []
DEBUG 2022-02-14 16:45:30,844 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:45:30,844 stack ['$a84.0']
DEBUG 2022-02-14 16:45:30,844 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:30,844 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:45:30,844 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:30,844 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:45:30,844 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,844 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,844 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,844 stack: []
DEBUG 2022-02-14 16:45:30,844 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:30,844 stack []
DEBUG 2022-02-14 16:45:30,844 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:45:30,844 stack ['$r146.0']
DEBUG 2022-02-14 16:45:30,844 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:45:30,844 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:45:30,844 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:30,844 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:45:30,844 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,845 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,845 stack: []
DEBUG 2022-02-14 16:45:30,845 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:30,845 stack []
DEBUG 2022-02-14 16:45:30,845 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:45:30,845 stack ['$exp154.0']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:45:30,845 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:30,845 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:30,845 stack []
DEBUG 2022-02-14 16:45:30,845 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:30,845 stack ['$a162.3']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:30,845 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:30,845 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:45:30,845 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:45:30,845 stack []
DEBUG 2022-02-14 16:45:30,845 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:30,845 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,845 stack: []
DEBUG 2022-02-14 16:45:30,845 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack []
DEBUG 2022-02-14 16:45:30,846 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack ['$const176.0']
DEBUG 2022-02-14 16:45:30,846 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:45:30,846 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:45:30,846 end state. edges=[]
DEBUG 2022-02-14 16:45:30,846 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,846 stack: []
DEBUG 2022-02-14 16:45:30,846 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack []
DEBUG 2022-02-14 16:45:30,846 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:30,846 stack ['$r184.0']
DEBUG 2022-02-14 16:45:30,846 end state. edges=[]
DEBUG 2022-02-14 16:45:30,846 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,846 stack: []
DEBUG 2022-02-14 16:45:30,846 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:45:30,846 stack []
DEBUG 2022-02-14 16:45:30,846 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:45:30,846 stack ['$const92.0']
DEBUG 2022-02-14 16:45:30,846 end state. edges=[]
DEBUG 2022-02-14 16:45:30,846 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,846 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,846 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:30,847 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:30,847 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:30,847 defmap: {}
DEBUG 2022-02-14 16:45:30,847 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,847 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:30,847 keep phismap: {}
DEBUG 2022-02-14 16:45:30,847 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:30,847 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:30,847 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:45:30,847 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:45:30,847 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,847 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:45:30,847 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,848 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:30,850 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: int64)      ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: int64)     ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: True) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:45:30,859 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:30,859 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,859 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,859 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,859 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,859 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,859 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,859 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,859 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,859 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,859 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,859 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,859 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,859 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,859 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:30,859 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,859 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,859 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,859 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,859 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,859 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,859 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,859 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,859 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:45:30,859 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,859 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,860 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,860 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:30,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,860 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,860 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,860 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,860 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,860 ==== SSA block analysis pass on 52
DEBUG 2022-02-14 16:45:30,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,860 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,860 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,860 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,860 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,860 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,860 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:45:30,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,860 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,860 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,860 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,860 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,860 ==== SSA block analysis pass on 64
DEBUG 2022-02-14 16:45:30,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,860 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,860 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,860 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,860 ==== SSA block analysis pass on 76
DEBUG 2022-02-14 16:45:30,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,861 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,861 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,861 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,861 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,861 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,861 ==== SSA block analysis pass on 84
DEBUG 2022-02-14 16:45:30,861 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,861 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,861 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,861 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,861 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,861 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,861 ==== SSA block analysis pass on 92
DEBUG 2022-02-14 16:45:30,861 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,861 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,861 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,861 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,861 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:45:30,861 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,861 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:30,861 on stmt: exp = b
DEBUG 2022-02-14 16:45:30,861 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,861 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:45:30,861 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,861 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,861 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:30,862 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,862 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,862 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,862 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:45:30,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,862 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,862 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,862 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,862 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,862 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,862 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,862 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,862 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:45:30,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,862 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,862 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:30,862 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,862 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,862 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,862 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:45:30,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,862 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,862 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:30,862 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,862 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,863 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,863 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:45:30,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,863 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,863 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,863 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,863 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:45:30,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,863 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,863 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,863 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,863 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,863 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,863 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,863 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:45:30,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,863 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,863 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,863 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,863 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:45:30,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,863 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,863 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,863 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,863 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,863 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:45:30,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b97aeb50>
DEBUG 2022-02-14 16:45:30,864 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,864 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,864 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7f71b97cb190>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7f71b97d7460>],
             '$112pred': [<numba.core.ir.Assign object at 0x7f71b97d76d0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7f71b97d7910>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7f71b97d7a90>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7f71b97d7d30>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7f71b97d9070>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7f71b97d9220>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7f71b97d9310>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7f71b97d97c0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7f71b97d9a30>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7f71b97d9f40>],
             '$144pred': [<numba.core.ir.Assign object at 0x7f71b97db1f0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7f71b97db6a0>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7f71b97dbbe0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7f71b97dd0a0>],
             '$174pred': [<numba.core.ir.Assign object at 0x7f71b97dd550>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f71b97dda60>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7f71b97ddbb0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7f71b97ddf10>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7f71b97cb9a0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f71b97cbc10>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f71b97b7310>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7f71b97ca6a0>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f71b97ca910>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f71b97caa30>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7f71b97cad30>],
             '$50pred': [<numba.core.ir.Assign object at 0x7f71b97cafd0>],
             '$56compare_op.2': [<numba.core.ir.Assign object at 0x7f71b97d1580>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f71b97d17f0>],
             '$60load_deref.0': [<numba.core.ir.Assign object at 0x7f71b97d1a30>],
             '$62pred': [<numba.core.ir.Assign object at 0x7f71b97d1cd0>],
             '$64load_deref.0': [<numba.core.ir.Assign object at 0x7f71b97d1f70>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7f71b97d3130>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x7f71b97d3ca0>],
             '$82pred': [<numba.core.ir.Assign object at 0x7f71b97d3f10>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x7f71b97d5460>],
             '$90pred': [<numba.core.ir.Assign object at 0x7f71b97d56d0>],
             '$94return_value.1': [<numba.core.ir.Assign object at 0x7f71b97d5a90>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7f71b97d72b0>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7f71b97d9610>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7f71b97d9d90>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7f71b97dba30>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7f71b97dd790>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7f71b97cb7f0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7f71b97ca4f0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b97b7d30>],
             '$const54.1': [<numba.core.ir.Assign object at 0x7f71b97d13d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f71b97d3af0>],
             '$const86.1': [<numba.core.ir.Assign object at 0x7f71b97d52b0>],
             '$const92.0': [<numba.core.ir.Assign object at 0x7f71b97d5910>],
             'a': [<numba.core.ir.Assign object at 0x7f71b97b7160>],
             'a.1': [<numba.core.ir.Assign object at 0x7f71b97cb490>,
                     <numba.core.ir.Assign object at 0x7f71b97dd160>],
             'b': [<numba.core.ir.Assign object at 0x7f71b97b72b0>],
             'bool112': [<numba.core.ir.Assign object at 0x7f71b97d75b0>],
             'bool136': [<numba.core.ir.Assign object at 0x7f71b97d9910>],
             'bool144': [<numba.core.ir.Assign object at 0x7f71b97db0d0>],
             'bool174': [<numba.core.ir.Assign object at 0x7f71b97dd430>],
             'bool24': [<numba.core.ir.Assign object at 0x7f71b97cbaf0>],
             'bool42': [<numba.core.ir.Assign object at 0x7f71b97ca7f0>],
             'bool50': [<numba.core.ir.Assign object at 0x7f71b97caeb0>],
             'bool58': [<numba.core.ir.Assign object at 0x7f71b97d16d0>],
             'bool62': [<numba.core.ir.Assign object at 0x7f71b97d1bb0>],
             'bool82': [<numba.core.ir.Assign object at 0x7f71b97d3df0>],
             'bool90': [<numba.core.ir.Assign object at 0x7f71b97d55b0>],
             'exp': [<numba.core.ir.Assign object at 0x7f71b97ca130>,
                     <numba.core.ir.Assign object at 0x7f71b97d7040>,
                     <numba.core.ir.Assign object at 0x7f71b97dbca0>],
             'invert': [<numba.core.ir.Assign object at 0x7f71b97cbd30>,
                        <numba.core.ir.Assign object at 0x7f71b97d5d30>],
             'r': [<numba.core.ir.Assign object at 0x7f71b97b7f10>,
                   <numba.core.ir.Assign object at 0x7f71b97db760>]})
DEBUG 2022-02-14 16:45:30,864 SSA violators {'exp', 'invert', 'r', 'a.1'}
DEBUG 2022-02-14 16:45:30,864 Fix SSA violator on var exp
DEBUG 2022-02-14 16:45:30,864 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,864 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,864 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,865 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,865 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,865 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,865 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,865 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,865 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,865 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,865 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,865 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,865 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,865 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,865 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,865 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,865 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,865 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,865 first assign: exp
DEBUG 2022-02-14 16:45:30,865 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,865 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,865 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,865 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,865 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,865 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,865 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,865 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,865 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,866 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,866 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,866 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,866 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,866 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,866 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,866 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,866 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,866 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,866 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,866 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,866 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,866 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,866 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,866 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,866 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,866 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,866 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,866 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,866 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,866 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,866 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,866 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,866 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,866 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,866 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,866 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,866 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,867 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,867 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,867 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,867 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,867 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,867 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,867 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,867 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,867 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,867 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,867 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,867 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,867 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,867 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,867 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,867 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:30,867 on stmt: exp = b
DEBUG 2022-02-14 16:45:30,867 replaced with: exp.1 = b
DEBUG 2022-02-14 16:45:30,867 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,867 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,867 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,867 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,867 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:30,867 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,867 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,868 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,868 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,868 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,868 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,868 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,868 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,868 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,868 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,868 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,868 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,868 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,868 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:30,868 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,868 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,868 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,868 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,868 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,868 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,868 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:30,868 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,868 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,868 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,868 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,869 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,869 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,869 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,869 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,869 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,869 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,869 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,869 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,869 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,869 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,869 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,869 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,869 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,869 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,869 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,869 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,869 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,869 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,869 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,869 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,869 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,869 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,869 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,869 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,870 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b97aefd0>],
             98: [<numba.core.ir.Assign object at 0x7f71b97b71c0>],
             154: [<numba.core.ir.Assign object at 0x7f71b9771040>]})
DEBUG 2022-02-14 16:45:30,870 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,870 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,870 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,870 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,870 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,870 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,870 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,870 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,870 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,870 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,870 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,870 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,870 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,870 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,870 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,870 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,870 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,870 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,870 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,870 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,870 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,871 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,871 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,871 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,871 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,871 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,871 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,871 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,871 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,871 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,871 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,871 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,871 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,871 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,871 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,871 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,871 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,871 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,871 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,871 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,872 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,872 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,872 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,872 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,872 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,872 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,872 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,872 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,872 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,872 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,872 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,872 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,872 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,872 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,872 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,872 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,872 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,872 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,872 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,872 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,872 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,872 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,873 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,873 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,873 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,873 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,873 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,873 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,873 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:30,873 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,873 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,873 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,873 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,873 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,873 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:30,873 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:30,873 find_def_from_top label 106
DEBUG 2022-02-14 16:45:30,873 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:30,873 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:30,873 incoming_def exp.1 = b
DEBUG 2022-02-14 16:45:30,873 find_def_from_bottom label 76
DEBUG 2022-02-14 16:45:30,873 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,873 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,873 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,873 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,873 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,873 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,873 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,874 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,874 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 84
DEBUG 2022-02-14 16:45:30,874 find_def_from_top label 84
DEBUG 2022-02-14 16:45:30,874 idom 76 from label 84
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 76
DEBUG 2022-02-14 16:45:30,874 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,874 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,874 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,874 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,874 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,874 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,874 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,874 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,874 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,874 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,874 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,874 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,874 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,875 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,875 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,875 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,875 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,875 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,875 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,875 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,875 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,875 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,875 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,875 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,875 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:30,875 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:30,875 find_def_from_top label 130
DEBUG 2022-02-14 16:45:30,875 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:30,875 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:30,875 incoming_def exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,875 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:30,875 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,875 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,875 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,875 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,875 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,876 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,876 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,876 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,876 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:30,876 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:30,876 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,876 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,876 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,876 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,876 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,876 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,876 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,876 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,876 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,876 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,876 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,876 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,876 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,876 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,876 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,876 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,876 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,876 find_def_from_top label 154
DEBUG 2022-02-14 16:45:30,876 idom 138 from label 154
DEBUG 2022-02-14 16:45:30,877 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:30,877 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,877 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,877 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,877 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,877 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,877 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,877 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,877 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,877 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,877 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,877 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,877 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,877 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,877 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,877 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,877 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,877 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,877 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,877 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,877 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,877 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,877 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,877 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,877 Fix SSA violator on var invert
DEBUG 2022-02-14 16:45:30,877 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,878 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,878 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,878 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,878 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,878 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,878 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,878 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,878 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,878 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,878 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,878 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,878 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,878 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,878 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,878 first assign: invert
DEBUG 2022-02-14 16:45:30,878 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,878 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,878 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,878 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,878 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,878 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,878 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,878 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,878 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,879 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,879 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,879 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,879 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,879 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,879 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,879 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,879 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,879 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,879 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,879 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,879 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,879 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,879 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,879 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,879 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,879 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,879 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,879 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,879 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,879 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,880 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,880 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,880 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,880 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,880 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,880 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,880 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,880 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,880 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,880 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,880 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,880 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,880 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,880 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,880 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,880 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,880 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,880 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,880 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,880 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,880 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,880 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,880 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,880 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:30,880 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,880 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,880 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,881 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,881 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,881 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,881 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,881 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,881 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,881 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,881 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,881 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,881 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,881 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,881 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,881 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,881 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,881 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,881 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,881 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,881 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,881 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,881 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,881 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,881 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,881 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,881 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,882 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,882 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,882 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,882 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,882 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,882 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,882 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,882 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,882 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,882 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,882 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,882 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,882 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,882 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,882 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,882 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,882 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,882 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,882 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,882 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,882 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,882 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,882 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,882 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,882 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,883 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,883 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,883 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9771160>
DEBUG 2022-02-14 16:45:30,883 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,883 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,883 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b97b7700>],
             98: [<numba.core.ir.Assign object at 0x7f71b97b75b0>]})
DEBUG 2022-02-14 16:45:30,883 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,883 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,883 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,883 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,883 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,883 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,883 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,883 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,883 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,883 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,883 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,883 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,883 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,883 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,883 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,883 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,883 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,883 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,883 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,883 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,884 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,884 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,884 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,884 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,884 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,884 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,884 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,884 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,884 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,884 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,884 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,884 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,884 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,884 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,884 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,884 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,884 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,884 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,884 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,884 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,884 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,884 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,884 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,884 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,884 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,884 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,885 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,885 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,885 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,885 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,885 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,885 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,885 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,885 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,885 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,885 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,885 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,885 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,885 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,885 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,885 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,885 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,885 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,885 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,885 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,885 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,885 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,885 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,885 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,885 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,885 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,886 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,886 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,886 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,886 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,886 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,886 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,886 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,886 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,886 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,886 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,886 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,886 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,886 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,886 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,886 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,886 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,886 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,886 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,886 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,886 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,886 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,886 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,886 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,886 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,887 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,887 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,887 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,887 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,887 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,887 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,887 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,887 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,887 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,887 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,887 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,887 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,887 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,887 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,887 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,887 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,887 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,887 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,887 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,887 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,887 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,887 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,887 find_def_from_top label 172
DEBUG 2022-02-14 16:45:30,888 idom 130 from label 172
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 130
DEBUG 2022-02-14 16:45:30,888 idom 106 from label 130
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 106
DEBUG 2022-02-14 16:45:30,888 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:30,888 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 76
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,888 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,888 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,888 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,888 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 84
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 84
DEBUG 2022-02-14 16:45:30,888 idom 76 from label 84
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 76
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,888 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,888 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,888 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,888 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,888 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,888 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,889 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,889 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,889 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,889 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,889 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,889 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,889 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,889 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,889 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,889 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,889 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,889 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,889 Fix SSA violator on var r
DEBUG 2022-02-14 16:45:30,889 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,889 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,889 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,889 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,889 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,889 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,889 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,889 first assign: r
DEBUG 2022-02-14 16:45:30,889 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,889 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,889 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,889 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,889 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,889 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,890 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,890 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,890 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,890 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,890 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,890 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,890 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,890 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,890 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,890 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,890 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,890 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,890 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,890 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,890 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,890 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,890 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,890 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,890 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,890 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,890 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,890 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,890 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,890 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,890 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,890 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,890 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,890 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,891 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,891 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,891 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,891 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,891 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,891 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,891 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,891 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,891 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,891 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,891 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,891 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,891 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,891 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,891 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,891 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,891 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,891 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,891 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,891 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,891 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,891 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,891 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,891 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,891 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,891 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,891 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,891 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,891 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,891 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,892 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,892 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,892 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,892 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,892 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,892 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,892 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,892 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,892 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,892 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,892 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,892 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,892 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,892 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,892 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,892 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,892 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,892 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,892 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,892 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,892 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,892 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,892 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,892 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,892 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,892 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,893 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,893 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,893 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,893 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,893 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,893 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,893 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,893 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,893 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,893 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,893 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,893 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,893 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,893 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,893 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,893 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,893 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,893 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,893 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,893 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,893 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,893 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,893 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,893 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,893 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,893 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,893 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,893 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,893 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,893 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,894 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,894 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,894 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,894 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,894 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,894 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,894 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,894 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,894 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,894 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,894 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,894 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b97b7760>],
             146: [<numba.core.ir.Assign object at 0x7f71b9772160>]})
DEBUG 2022-02-14 16:45:30,894 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,894 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,894 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,894 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,894 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,894 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,894 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,894 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,894 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,894 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,894 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,894 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,894 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,895 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,895 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,895 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,895 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,895 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,895 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,895 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,895 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,895 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,895 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,895 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,895 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,895 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,895 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,895 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,895 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,895 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,895 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,895 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,895 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,896 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,896 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,896 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,896 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,896 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,896 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,896 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,896 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,896 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,896 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,896 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,896 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,896 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,896 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,896 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,896 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,896 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,896 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,896 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,896 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,896 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,897 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,897 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,897 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,897 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,897 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,897 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,897 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,897 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,897 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,897 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,897 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,897 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,897 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,897 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,897 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,897 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,897 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,897 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,897 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,897 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,897 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,897 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,897 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,898 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,898 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,898 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,898 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,898 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,898 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,898 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,898 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,898 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,898 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,898 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,898 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,898 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,898 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,898 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,898 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,898 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,898 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,898 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,898 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,899 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,899 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,899 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,899 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,899 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,899 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,899 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,899 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,899 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,899 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,899 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,899 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,899 find_def_from_top label 146
DEBUG 2022-02-14 16:45:30,899 idom 138 from label 146
DEBUG 2022-02-14 16:45:30,899 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:30,899 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,899 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,899 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,899 find_def_from_top label 130
DEBUG 2022-02-14 16:45:30,899 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:30,899 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:30,899 find_def_from_top label 106
DEBUG 2022-02-14 16:45:30,899 idom 0 from label 106
DEBUG 2022-02-14 16:45:30,900 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,900 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,900 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:30,900 find_def_from_top label 154
DEBUG 2022-02-14 16:45:30,900 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:45:30,900 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:30,900 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,900 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,900 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,900 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:45:30,900 find_def_from_bottom label 146
DEBUG 2022-02-14 16:45:30,900 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,900 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:30,900 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,900 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,900 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,900 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,900 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,900 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,900 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,900 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,900 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,900 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,901 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,901 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,901 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,901 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,901 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,901 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,901 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,901 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,901 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,901 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,901 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:30,901 find_def_from_top label 176
DEBUG 2022-02-14 16:45:30,901 idom 172 from label 176
DEBUG 2022-02-14 16:45:30,901 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:30,901 find_def_from_top label 172
DEBUG 2022-02-14 16:45:30,901 idom 130 from label 172
DEBUG 2022-02-14 16:45:30,901 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,901 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:30,901 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,901 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,901 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,901 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9771280>
DEBUG 2022-02-14 16:45:30,901 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,902 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:30,902 find_def_from_top label 184
DEBUG 2022-02-14 16:45:30,902 idom 172 from label 184
DEBUG 2022-02-14 16:45:30,902 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:30,902 find_def_from_top label 172
DEBUG 2022-02-14 16:45:30,902 idom 130 from label 172
DEBUG 2022-02-14 16:45:30,902 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,902 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:30,902 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,902 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:45:30,902 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,902 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,902 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,902 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,902 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,902 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,902 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,902 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,902 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,902 first assign: a.1
DEBUG 2022-02-14 16:45:30,902 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,902 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,903 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,903 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,903 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,903 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,903 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,903 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,903 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,903 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,903 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,903 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,903 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,903 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,903 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,903 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,903 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,903 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,903 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,903 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,903 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,903 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,903 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,903 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,904 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,904 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,904 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,904 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,904 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,904 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,904 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,904 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,904 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,904 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,904 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,904 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,904 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,904 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,904 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,904 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,904 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,904 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,904 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,904 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,904 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,905 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,905 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,905 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,905 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,905 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,905 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,905 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,905 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,905 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,905 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,905 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,905 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,905 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,905 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,905 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,905 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,905 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,905 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,905 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,905 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,905 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,906 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,906 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,906 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,906 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,906 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,906 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,906 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,906 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,906 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,906 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,906 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,906 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,906 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,906 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,906 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,906 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,906 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,906 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,906 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,907 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,907 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,907 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,907 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,907 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,907 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,907 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,907 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,907 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,907 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,907 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,907 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,907 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,907 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,907 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,907 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,907 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,907 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,907 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,907 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,907 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:30,908 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,908 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,908 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,908 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,908 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,908 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,908 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,908 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,908 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,908 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,908 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,908 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,908 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,908 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,908 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,908 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:30,908 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,908 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,908 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,908 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b97aeb20>
DEBUG 2022-02-14 16:45:30,908 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:30,909 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:30,909 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b97aedc0>],
             154: [<numba.core.ir.Assign object at 0x7f71b97723a0>]})
DEBUG 2022-02-14 16:45:30,909 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:30,909 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,909 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:30,909 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:30,909 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,909 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,909 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,909 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:45:30,909 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,909 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:30,909 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:30,909 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,909 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,909 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:30,909 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:30,909 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,909 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:30,910 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:30,910 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:30,910 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:30,910 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,910 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,910 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:30,910 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:30,910 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,910 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:30,910 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:30,910 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:30,910 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,910 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:45:30,910 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,910 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,910 on stmt: jump 52
DEBUG 2022-02-14 16:45:30,910 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:45:30,910 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,910 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,910 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,910 find_def var='a.1' stmt=$56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:45:30,911 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,911 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,911 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,911 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,911 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,911 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,911 find_def_from_top label 26
DEBUG 2022-02-14 16:45:30,911 idom 0 from label 26
DEBUG 2022-02-14 16:45:30,911 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,911 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,911 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,911 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:45:30,911 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:45:30,911 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,911 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,911 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,911 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,911 on stmt: jump 64
DEBUG 2022-02-14 16:45:30,911 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:45:30,911 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,911 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:45:30,911 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:45:30,911 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:45:30,912 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:45:30,912 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,912 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,912 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,912 find_def var='a.1' stmt=$80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:45:30,912 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,912 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,912 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,912 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,912 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,912 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,912 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,912 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,912 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,912 find_def_from_top label 26
DEBUG 2022-02-14 16:45:30,912 idom 0 from label 26
DEBUG 2022-02-14 16:45:30,912 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,912 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,912 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,912 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:45:30,912 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:45:30,912 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,912 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:45:30,913 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,913 find_def var='a.1' stmt=$88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:45:30,913 find_def_from_top label 84
DEBUG 2022-02-14 16:45:30,913 idom 76 from label 84
DEBUG 2022-02-14 16:45:30,913 find_def_from_bottom label 76
DEBUG 2022-02-14 16:45:30,913 find_def_from_top label 76
DEBUG 2022-02-14 16:45:30,913 idom 52 from label 76
DEBUG 2022-02-14 16:45:30,913 find_def_from_bottom label 52
DEBUG 2022-02-14 16:45:30,913 find_def_from_top label 52
DEBUG 2022-02-14 16:45:30,913 idom 48 from label 52
DEBUG 2022-02-14 16:45:30,913 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:30,913 find_def_from_top label 48
DEBUG 2022-02-14 16:45:30,913 idom 26 from label 48
DEBUG 2022-02-14 16:45:30,913 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:30,913 find_def_from_top label 26
DEBUG 2022-02-14 16:45:30,913 idom 0 from label 26
DEBUG 2022-02-14 16:45:30,913 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,913 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,913 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,913 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:45:30,913 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:45:30,913 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,913 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:45:30,913 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:45:30,914 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:45:30,914 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:30,914 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,914 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:30,914 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:30,914 on stmt: jump 106
DEBUG 2022-02-14 16:45:30,914 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:30,914 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,914 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,914 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:45:30,914 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:30,914 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:30,914 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,914 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,914 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:30,914 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:30,914 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,914 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:30,914 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:30,914 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:30,915 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,915 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,915 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,915 find_def_from_top label 114
DEBUG 2022-02-14 16:45:30,915 idom 106 from label 114
DEBUG 2022-02-14 16:45:30,915 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:30,915 find_def_from_top label 106
DEBUG 2022-02-14 16:45:30,915 idom 0 from label 106
DEBUG 2022-02-14 16:45:30,915 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,915 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:30,915 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:30,915 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:30,915 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,915 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,915 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:30,915 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:30,915 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:30,915 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,915 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,915 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:30,915 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:30,915 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,916 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,916 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:30,916 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,916 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,916 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:30,916 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:30,916 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,916 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,916 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,916 find_def_from_top label 146
DEBUG 2022-02-14 16:45:30,916 idom 138 from label 146
DEBUG 2022-02-14 16:45:30,916 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:30,916 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,916 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,916 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,916 find_def_from_top label 130
DEBUG 2022-02-14 16:45:30,916 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:30,916 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:30,916 find_def_from_top label 106
DEBUG 2022-02-14 16:45:30,916 idom 0 from label 106
DEBUG 2022-02-14 16:45:30,916 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:30,917 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,917 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:30,917 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,917 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,917 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:30,917 on stmt: jump 154
DEBUG 2022-02-14 16:45:30,917 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:30,917 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,917 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:30,917 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:30,917 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,917 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:30,917 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,917 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,917 find_def_from_top label 154
DEBUG 2022-02-14 16:45:30,917 idom 138 from label 154
DEBUG 2022-02-14 16:45:30,917 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:30,917 find_def_from_top label 138
DEBUG 2022-02-14 16:45:30,917 idom 130 from label 138
DEBUG 2022-02-14 16:45:30,917 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:30,917 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:30,917 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:30,918 on stmt: jump 130
DEBUG 2022-02-14 16:45:30,918 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:30,918 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,918 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:30,918 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:30,918 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:30,918 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:30,918 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,918 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:30,918 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:30,918 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:30,918 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:30,918 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:30,918 Running <numba.core.ssa._FixSSAVars object at 0x7f71b97b7730>
DEBUG 2022-02-14 16:45:30,918 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:30,918 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,743 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:38,743 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,743 stack: []
DEBUG 2022-02-14 16:45:38,743 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:45:38,743 stack []
DEBUG 2022-02-14 16:45:38,743 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:38,743 stack []
DEBUG 2022-02-14 16:45:38,743 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:38,743 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:45:38,743 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:38,743 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:45:38,744 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:38,744 stack []
DEBUG 2022-02-14 16:45:38,744 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:38,744 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:38,744 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:38,744 stack ['$14call_function.5']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:45:38,744 stack []
DEBUG 2022-02-14 16:45:38,744 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:45:38,744 stack ['$b18.6']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:45:38,744 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:45:38,744 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:45:38,745 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:45:38,745 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,745 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,745 stack: []
DEBUG 2022-02-14 16:45:38,745 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:38,745 stack []
DEBUG 2022-02-14 16:45:38,745 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:38,745 stack ['$const26.0']
DEBUG 2022-02-14 16:45:38,745 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:45:38,745 stack []
DEBUG 2022-02-14 16:45:38,745 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:45:38,745 stack ['$b30.1']
DEBUG 2022-02-14 16:45:38,745 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:45:38,745 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:45:38,745 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:45:38,745 stack []
DEBUG 2022-02-14 16:45:38,745 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:45:38,746 stack ['$exp36.3']
DEBUG 2022-02-14 16:45:38,746 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:45:38,746 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:45:38,746 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:45:38,746 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:45:38,746 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,746 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,746 stack: []
DEBUG 2022-02-14 16:45:38,746 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:45:38,746 stack []
DEBUG 2022-02-14 16:45:38,746 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:45:38,746 stack ['$const98.0']
DEBUG 2022-02-14 16:45:38,746 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:38,746 stack []
DEBUG 2022-02-14 16:45:38,746 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:45:38,746 stack ['$b102.1']
DEBUG 2022-02-14 16:45:38,746 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,747 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,747 stack: []
DEBUG 2022-02-14 16:45:38,747 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:45:38,747 stack []
DEBUG 2022-02-14 16:45:38,747 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:45:38,747 stack ['$44load_global.0']
DEBUG 2022-02-14 16:45:38,747 end state. edges=[]
DEBUG 2022-02-14 16:45:38,747 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,747 stack: []
DEBUG 2022-02-14 16:45:38,747 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:45:38,747 stack []
DEBUG 2022-02-14 16:45:38,747 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:45:38,747 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:45:38,747 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,747 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,747 stack: []
DEBUG 2022-02-14 16:45:38,747 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:38,747 stack []
DEBUG 2022-02-14 16:45:38,748 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:45:38,748 stack ['$exp106.0']
DEBUG 2022-02-14 16:45:38,748 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:38,748 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:45:38,748 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:45:38,748 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:45:38,748 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,748 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,748 stack: []
DEBUG 2022-02-14 16:45:38,748 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:45:38,748 stack []
DEBUG 2022-02-14 16:45:38,748 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:38,748 stack ['$a52.0']
DEBUG 2022-02-14 16:45:38,748 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:38,748 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:45:38,748 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:45:38,748 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:45:38,748 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,749 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,749 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,749 stack: []
DEBUG 2022-02-14 16:45:38,749 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack []
DEBUG 2022-02-14 16:45:38,749 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$114load_global.0']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$116load_method.1']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:38,749 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:45:38,749 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:38,750 stack ['$126call_method.6']
DEBUG 2022-02-14 16:45:38,750 end state. edges=[]
DEBUG 2022-02-14 16:45:38,750 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,750 stack: []
DEBUG 2022-02-14 16:45:38,750 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:45:38,750 stack []
DEBUG 2022-02-14 16:45:38,750 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:45:38,750 stack ['$exp130.0']
DEBUG 2022-02-14 16:45:38,750 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:45:38,750 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:45:38,750 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:45:38,750 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:45:38,750 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,750 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,750 stack: []
DEBUG 2022-02-14 16:45:38,750 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:45:38,750 stack []
DEBUG 2022-02-14 16:45:38,751 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:45:38,751 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:45:38,751 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,751 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,751 stack: []
DEBUG 2022-02-14 16:45:38,751 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:38,751 stack []
DEBUG 2022-02-14 16:45:38,751 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:45:38,751 stack ['$a76.0']
DEBUG 2022-02-14 16:45:38,751 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:38,751 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:45:38,751 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:38,751 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:45:38,751 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,751 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,751 stack: []
DEBUG 2022-02-14 16:45:38,751 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:45:38,751 stack []
DEBUG 2022-02-14 16:45:38,752 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:45:38,752 stack ['$exp138.0']
DEBUG 2022-02-14 16:45:38,752 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:45:38,752 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:45:38,752 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:45:38,752 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:45:38,752 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,752 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,752 stack: []
DEBUG 2022-02-14 16:45:38,752 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:45:38,752 stack []
DEBUG 2022-02-14 16:45:38,752 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:45:38,752 stack ['$invert172.0']
DEBUG 2022-02-14 16:45:38,752 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,752 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,752 stack: []
DEBUG 2022-02-14 16:45:38,752 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:45:38,752 stack []
DEBUG 2022-02-14 16:45:38,753 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:45:38,753 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:45:38,753 end state. edges=[]
DEBUG 2022-02-14 16:45:38,753 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,753 stack: []
DEBUG 2022-02-14 16:45:38,753 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:38,753 stack []
DEBUG 2022-02-14 16:45:38,753 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:45:38,753 stack ['$68load_global.0']
DEBUG 2022-02-14 16:45:38,753 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:38,753 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:45:38,753 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:38,753 stack ['$72call_function.2']
DEBUG 2022-02-14 16:45:38,753 end state. edges=[]
DEBUG 2022-02-14 16:45:38,753 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,753 stack: []
DEBUG 2022-02-14 16:45:38,753 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:38,753 stack []
DEBUG 2022-02-14 16:45:38,754 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:45:38,754 stack ['$a84.0']
DEBUG 2022-02-14 16:45:38,754 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:38,754 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:45:38,754 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:38,754 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:45:38,754 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,754 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,754 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,754 stack: []
DEBUG 2022-02-14 16:45:38,754 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:38,754 stack []
DEBUG 2022-02-14 16:45:38,754 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:45:38,754 stack ['$r146.0']
DEBUG 2022-02-14 16:45:38,754 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:45:38,754 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:45:38,754 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:38,754 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:45:38,754 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,755 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,755 stack: []
DEBUG 2022-02-14 16:45:38,755 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:38,755 stack []
DEBUG 2022-02-14 16:45:38,755 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:45:38,755 stack ['$exp154.0']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:45:38,755 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:38,755 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:38,755 stack []
DEBUG 2022-02-14 16:45:38,755 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:38,755 stack ['$a162.3']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:38,755 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:38,755 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:45:38,755 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:45:38,755 stack []
DEBUG 2022-02-14 16:45:38,755 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:38,755 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,755 stack: []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack ['$const176.0']
DEBUG 2022-02-14 16:45:38,756 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:45:38,756 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:45:38,756 end state. edges=[]
DEBUG 2022-02-14 16:45:38,756 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,756 stack: []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:38,756 stack ['$r184.0']
DEBUG 2022-02-14 16:45:38,756 end state. edges=[]
DEBUG 2022-02-14 16:45:38,756 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,756 stack: []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:45:38,756 stack []
DEBUG 2022-02-14 16:45:38,756 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:45:38,756 stack ['$const92.0']
DEBUG 2022-02-14 16:45:38,756 end state. edges=[]
DEBUG 2022-02-14 16:45:38,756 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,757 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,757 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:38,758 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:38,758 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:38,758 defmap: {}
DEBUG 2022-02-14 16:45:38,758 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:38,758 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:38,758 keep phismap: {}
DEBUG 2022-02-14 16:45:38,758 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:38,758 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:38,758 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:45:38,759 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:45:38,760 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,760 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:38,762 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:45:38,770 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:38,770 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,770 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,770 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,770 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,770 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,770 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,770 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,770 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,770 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,770 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,770 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,770 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,770 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,770 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:38,770 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,770 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,771 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,771 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,771 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,771 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,771 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,771 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,771 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:45:38,771 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,771 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,771 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,771 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:38,771 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,771 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,771 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,771 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,771 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,771 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:45:38,771 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,771 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:38,771 on stmt: exp = b
DEBUG 2022-02-14 16:45:38,771 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,771 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:45:38,771 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,771 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,771 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:38,771 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,772 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,772 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,772 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:45:38,772 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,772 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,772 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,772 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,772 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,772 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,772 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,772 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,772 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:45:38,772 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,772 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,772 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:38,772 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,772 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,772 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,772 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:45:38,772 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,772 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,772 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:38,772 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,772 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,773 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,773 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:45:38,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,773 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,773 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,773 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,773 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:45:38,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,773 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,773 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,773 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,773 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,773 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,773 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,773 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:45:38,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,773 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,773 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,773 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,773 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:45:38,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,773 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,773 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,773 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,773 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,773 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:45:38,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b993dfd0>
DEBUG 2022-02-14 16:45:38,773 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,774 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,774 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7f71b9c8e760>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7f71b9828520>],
             '$112pred': [<numba.core.ir.Assign object at 0x7f71b991ea60>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7f71b991edc0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7f71b991eee0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7f71b991e5b0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7f71b991e850>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7f71b991e130>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7f71b991e0a0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7f71b9da0e50>],
             '$136pred': [<numba.core.ir.Assign object at 0x7f71b9da0b20>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7f71b9da0130>],
             '$144pred': [<numba.core.ir.Assign object at 0x7f71b9da04f0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7f71b99cddc0>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7f71b99cd100>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7f71b99cda90>],
             '$174pred': [<numba.core.ir.Assign object at 0x7f71b992fb50>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f71b992fe20>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7f71b992fc10>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7f71b992f2b0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7f71b9f46370>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f71b99a36d0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f71b9c8ec70>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7f71b97ae640>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f71b97aef40>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f71b97aeaf0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7f71b9f20fd0>],
             '$50pred': [<numba.core.ir.Assign object at 0x7f71b9f20550>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7f71b9828340>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7f71b9da0cd0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7f71b9da02e0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7f71b99cdf70>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7f71b992f340>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7f71b9f46250>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7f71b97ae190>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b9c8ea90>],
             'a': [<numba.core.ir.Assign object at 0x7f71b9f1fdc0>],
             'a.1': [<numba.core.ir.Assign object at 0x7f71b9c8e3d0>,
                     <numba.core.ir.Assign object at 0x7f71b99cdb80>],
             'b': [<numba.core.ir.Assign object at 0x7f71b9c8ee50>],
             'bool112': [<numba.core.ir.Assign object at 0x7f71b98283d0>],
             'bool136': [<numba.core.ir.Assign object at 0x7f71b9da0a90>],
             'bool144': [<numba.core.ir.Assign object at 0x7f71b9da0250>],
             'bool174': [<numba.core.ir.Assign object at 0x7f71b992ff40>],
             'bool24': [<numba.core.ir.Assign object at 0x7f71ba075700>],
             'bool42': [<numba.core.ir.Assign object at 0x7f71b97aef70>],
             'bool50': [<numba.core.ir.Assign object at 0x7f71b9f201c0>],
             'exp': [<numba.core.ir.Assign object at 0x7f71b9788e50>,
                     <numba.core.ir.Assign object at 0x7f71b9828610>,
                     <numba.core.ir.Assign object at 0x7f71b99cd430>],
             'invert': [<numba.core.ir.Assign object at 0x7f71ba2d9640>,
                        <numba.core.ir.Assign object at 0x7f71b9828a30>],
             'r': [<numba.core.ir.Assign object at 0x7f71b9c8e520>,
                   <numba.core.ir.Assign object at 0x7f71b99cd3d0>]})
DEBUG 2022-02-14 16:45:38,774 SSA violators {'exp', 'invert', 'r', 'a.1'}
DEBUG 2022-02-14 16:45:38,774 Fix SSA violator on var exp
DEBUG 2022-02-14 16:45:38,774 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,774 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,774 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,774 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,774 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,774 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,774 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,774 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,774 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,774 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,775 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,775 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,775 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,775 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,775 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,775 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,775 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,775 first assign: exp
DEBUG 2022-02-14 16:45:38,775 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,775 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,775 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,775 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,775 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,775 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,775 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,775 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,775 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,775 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,775 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,775 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,775 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,775 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,775 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,776 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:38,776 on stmt: exp = b
DEBUG 2022-02-14 16:45:38,776 replaced with: exp.1 = b
DEBUG 2022-02-14 16:45:38,776 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,776 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,776 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,776 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:38,776 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,776 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,776 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,776 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,776 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,776 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,776 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,776 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,776 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,776 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,776 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,776 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,776 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,776 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:38,776 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,777 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,777 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,777 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,777 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,777 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,777 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:38,777 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,777 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,777 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,777 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,777 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,777 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,777 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,777 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,777 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,777 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,777 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,777 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,777 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,777 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,777 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,777 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,777 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,777 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,777 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,777 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,777 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,778 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,778 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,778 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,778 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,778 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,778 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,778 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,778 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,778 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,778 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,778 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,778 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b94bcc70>],
             98: [<numba.core.ir.Assign object at 0x7f71b992f640>],
             154: [<numba.core.ir.Assign object at 0x7f71b992f100>]})
DEBUG 2022-02-14 16:45:38,778 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,778 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,778 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,778 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,778 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,778 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,778 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,778 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,778 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,778 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,778 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,778 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,779 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,779 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,779 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,779 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,779 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,779 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,779 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,779 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,779 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,779 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,779 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,779 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,779 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,779 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,779 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,779 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,779 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,779 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,779 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,779 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,779 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,779 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,779 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,779 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,780 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:38,780 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,780 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,780 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,780 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,780 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,780 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:38,780 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:38,780 find_def_from_top label 106
DEBUG 2022-02-14 16:45:38,780 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:38,780 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:38,780 find_def_from_top label 48
DEBUG 2022-02-14 16:45:38,780 idom 26 from label 48
DEBUG 2022-02-14 16:45:38,780 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:38,780 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,780 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:38,780 incoming_def exp.1 = b
DEBUG 2022-02-14 16:45:38,780 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,780 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,780 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,780 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,780 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,780 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,780 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,780 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,781 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,781 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,781 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,781 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,781 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,781 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,781 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,781 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,781 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:38,781 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:38,781 find_def_from_top label 130
DEBUG 2022-02-14 16:45:38,781 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:38,781 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:38,781 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,781 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:38,781 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,781 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,781 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,781 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,781 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,781 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,781 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,781 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,782 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:38,782 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:38,782 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,782 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,782 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,782 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,782 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,782 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,782 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,782 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,782 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,782 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,782 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,782 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,782 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,782 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,782 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,782 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,782 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,782 find_def_from_top label 154
DEBUG 2022-02-14 16:45:38,782 idom 138 from label 154
DEBUG 2022-02-14 16:45:38,782 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:38,782 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,782 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,782 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,783 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,783 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,783 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,783 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,783 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,783 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,783 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,783 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,783 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,783 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,783 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,783 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,783 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,783 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,783 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,783 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,783 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,783 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,783 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,783 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,783 Fix SSA violator on var invert
DEBUG 2022-02-14 16:45:38,783 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,783 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,783 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,783 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,784 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,784 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,784 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,784 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,784 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,784 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,784 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,784 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,784 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,784 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,784 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,784 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,784 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,784 first assign: invert
DEBUG 2022-02-14 16:45:38,784 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,784 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,784 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,784 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,784 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,784 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,784 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,784 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,784 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,784 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,784 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,784 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,784 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,785 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,785 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,785 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,785 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,785 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,785 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,785 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:38,785 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,785 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,785 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,785 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,785 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,785 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,785 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,785 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,785 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,785 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,785 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,785 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,785 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,785 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,785 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,785 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,785 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,785 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,785 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,786 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,786 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,786 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,786 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,786 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,786 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,786 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,786 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,786 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,786 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,786 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,786 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,786 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,786 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,786 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,786 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,786 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,786 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,786 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,786 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,786 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,786 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,787 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,787 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,787 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,787 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,787 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,787 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,787 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,787 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,787 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,787 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,787 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,787 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,787 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,787 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,787 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,787 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,787 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,787 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,787 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b992f730>],
             98: [<numba.core.ir.Assign object at 0x7f71b992f1c0>]})
DEBUG 2022-02-14 16:45:38,787 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,787 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,787 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,787 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,787 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,787 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,787 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,788 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,788 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,788 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,788 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,788 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,788 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,788 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,788 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,788 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,788 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,788 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,788 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,788 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,788 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,788 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,788 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,788 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,788 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,788 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,788 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,788 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,788 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,788 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,789 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,789 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,789 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,789 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,789 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,789 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,789 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,789 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,789 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,789 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,789 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,789 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,789 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,789 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,789 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,789 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,789 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,789 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,789 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,789 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,789 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,789 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,789 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,789 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,790 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,790 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,790 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,790 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,790 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,790 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,790 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,790 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,790 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,790 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,790 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,790 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,790 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,790 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,790 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,790 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,790 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,790 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,790 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,790 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,790 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,790 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,790 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,790 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,790 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,791 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,791 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,791 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,791 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,791 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,791 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,791 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,791 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,791 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,791 find_def_from_top label 172
DEBUG 2022-02-14 16:45:38,791 idom 130 from label 172
DEBUG 2022-02-14 16:45:38,791 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,791 find_def_from_top label 130
DEBUG 2022-02-14 16:45:38,791 idom 106 from label 130
DEBUG 2022-02-14 16:45:38,791 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:38,791 find_def_from_top label 106
DEBUG 2022-02-14 16:45:38,791 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:38,791 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:38,791 find_def_from_top label 48
DEBUG 2022-02-14 16:45:38,791 idom 26 from label 48
DEBUG 2022-02-14 16:45:38,791 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:38,791 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,791 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:38,791 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,791 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,791 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,792 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,792 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,792 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,792 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,792 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,792 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b939fd00>
DEBUG 2022-02-14 16:45:38,792 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,792 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,792 Fix SSA violator on var r
DEBUG 2022-02-14 16:45:38,792 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,792 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,792 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,792 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,792 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,792 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,792 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,792 first assign: r
DEBUG 2022-02-14 16:45:38,792 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,792 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,792 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,792 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,792 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,792 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,792 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,793 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,793 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,793 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,793 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,793 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,793 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,793 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,793 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,793 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,793 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,793 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,793 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,793 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,793 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,793 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,793 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,793 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,793 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,793 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,793 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,793 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,793 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,793 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,793 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,793 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,794 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,794 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,794 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,794 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,794 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,794 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,794 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,794 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,794 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,794 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,794 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,794 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,794 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,794 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,794 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,794 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,794 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,794 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,794 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,794 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,794 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,794 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,794 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,794 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,794 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,795 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,795 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,795 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,795 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,795 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,795 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,795 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,795 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,795 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,795 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,795 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,795 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,795 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,795 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,795 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,795 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,795 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,795 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,795 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,795 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,795 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,795 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,795 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,795 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,795 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,795 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,795 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,796 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,796 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,796 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,796 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,796 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,796 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,796 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,796 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,796 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,796 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,796 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b94bcdc0>],
             146: [<numba.core.ir.Assign object at 0x7f71b9f592e0>]})
DEBUG 2022-02-14 16:45:38,796 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,796 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,796 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,796 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,796 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,796 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,796 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,796 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,796 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,796 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,796 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,796 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,796 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,797 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,797 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,797 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,797 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,797 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,797 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,797 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,797 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,797 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,797 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,797 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,797 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,797 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,797 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,797 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,797 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,797 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,797 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,797 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,797 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,797 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,797 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,797 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,797 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,797 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,797 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,797 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,798 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,798 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,798 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,798 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,798 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,798 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,798 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,798 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,798 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,798 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,798 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,798 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,798 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,798 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,798 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,798 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,798 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,798 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,798 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,798 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,798 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,798 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,798 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,798 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,799 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,799 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,799 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,799 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,799 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,799 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,799 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,799 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,799 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,799 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,799 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,799 find_def_from_top label 146
DEBUG 2022-02-14 16:45:38,799 idom 138 from label 146
DEBUG 2022-02-14 16:45:38,799 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:38,799 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,799 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,799 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,799 find_def_from_top label 130
DEBUG 2022-02-14 16:45:38,799 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:38,799 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:38,799 find_def_from_top label 106
DEBUG 2022-02-14 16:45:38,799 idom 0 from label 106
DEBUG 2022-02-14 16:45:38,799 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:38,799 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,799 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:38,799 find_def_from_top label 154
DEBUG 2022-02-14 16:45:38,799 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:45:38,800 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:38,800 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,800 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,800 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,800 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:45:38,800 find_def_from_bottom label 146
DEBUG 2022-02-14 16:45:38,800 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,800 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:38,800 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,800 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,800 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,800 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,800 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,800 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,800 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,800 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,800 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,800 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,800 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,800 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,800 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,800 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,800 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,800 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,800 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,800 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,801 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,801 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,801 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:38,801 find_def_from_top label 176
DEBUG 2022-02-14 16:45:38,801 idom 172 from label 176
DEBUG 2022-02-14 16:45:38,801 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:38,801 find_def_from_top label 172
DEBUG 2022-02-14 16:45:38,801 idom 130 from label 172
DEBUG 2022-02-14 16:45:38,801 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,801 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:38,801 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,801 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,801 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,801 Running <numba.core.ssa._FixSSAVars object at 0x7f71b993db20>
DEBUG 2022-02-14 16:45:38,801 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,801 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:38,801 find_def_from_top label 184
DEBUG 2022-02-14 16:45:38,801 idom 172 from label 184
DEBUG 2022-02-14 16:45:38,801 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:38,801 find_def_from_top label 172
DEBUG 2022-02-14 16:45:38,801 idom 130 from label 172
DEBUG 2022-02-14 16:45:38,801 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,801 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:38,801 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,801 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:45:38,801 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,801 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,802 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,802 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,802 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,802 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,802 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,802 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,802 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,802 first assign: a.1
DEBUG 2022-02-14 16:45:38,802 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,802 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,802 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,802 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,802 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,802 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,802 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,802 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,802 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,802 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,802 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,802 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,802 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,802 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,802 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,802 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,802 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,803 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,803 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,803 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,803 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,803 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,803 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,803 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,803 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,803 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,803 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,803 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,803 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,803 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,803 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,803 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,803 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,803 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,803 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,803 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,803 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,803 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,803 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,803 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,803 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,803 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,804 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,804 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,804 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,804 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,804 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,804 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,804 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,804 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,804 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,804 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,804 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,804 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,804 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,804 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,804 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,804 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,804 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,804 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,804 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,804 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,804 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,804 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,805 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,805 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,805 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:38,805 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,805 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,805 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,805 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,805 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,805 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,805 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,805 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,805 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,805 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,805 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,805 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,805 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,805 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:38,805 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,805 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,805 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9f59b80>
DEBUG 2022-02-14 16:45:38,805 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:38,805 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:38,806 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9f59640>],
             154: [<numba.core.ir.Assign object at 0x7f71b993d580>]})
DEBUG 2022-02-14 16:45:38,806 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:38,806 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,806 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:38,806 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:38,806 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,806 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,806 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,806 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:38,806 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,806 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:38,806 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:38,806 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,806 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,806 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:38,806 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:38,806 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,806 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:38,806 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:38,806 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:38,806 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:38,806 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,806 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,806 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:38,807 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:38,807 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,807 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:38,807 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:38,807 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:38,807 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,807 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:38,807 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,807 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,807 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,807 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:38,807 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,807 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:38,807 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:38,807 on stmt: jump 106
DEBUG 2022-02-14 16:45:38,807 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:38,807 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,807 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,807 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:38,807 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:38,807 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:38,807 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,807 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,807 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:38,807 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:38,807 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,807 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:38,807 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:38,808 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:38,808 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,808 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,808 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,808 find_def_from_top label 114
DEBUG 2022-02-14 16:45:38,808 idom 106 from label 114
DEBUG 2022-02-14 16:45:38,808 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:38,808 find_def_from_top label 106
DEBUG 2022-02-14 16:45:38,808 idom 0 from label 106
DEBUG 2022-02-14 16:45:38,808 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:38,808 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:38,808 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:38,808 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:38,808 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,808 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,808 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:38,808 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:38,808 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:38,808 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,808 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,808 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:38,808 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:38,808 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,808 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,808 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:38,808 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,808 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,809 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:38,809 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:38,809 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,809 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,809 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,809 find_def_from_top label 146
DEBUG 2022-02-14 16:45:38,809 idom 138 from label 146
DEBUG 2022-02-14 16:45:38,809 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:38,809 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,809 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,809 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,809 find_def_from_top label 130
DEBUG 2022-02-14 16:45:38,809 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:38,809 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:38,809 find_def_from_top label 106
DEBUG 2022-02-14 16:45:38,809 idom 0 from label 106
DEBUG 2022-02-14 16:45:38,809 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:38,809 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,809 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:38,809 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,809 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,809 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:38,809 on stmt: jump 154
DEBUG 2022-02-14 16:45:38,809 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:38,809 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,809 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:38,809 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:38,810 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,810 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:38,810 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,810 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,810 find_def_from_top label 154
DEBUG 2022-02-14 16:45:38,810 idom 138 from label 154
DEBUG 2022-02-14 16:45:38,810 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:38,810 find_def_from_top label 138
DEBUG 2022-02-14 16:45:38,810 idom 130 from label 138
DEBUG 2022-02-14 16:45:38,810 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:38,810 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:38,810 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:38,810 on stmt: jump 130
DEBUG 2022-02-14 16:45:38,810 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:38,810 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,810 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:38,810 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:38,810 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:38,810 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:38,810 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,810 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:38,810 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:38,810 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:38,810 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:38,810 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:38,810 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9c8e970>
DEBUG 2022-02-14 16:45:38,810 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:38,811 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:42,576 bytecode dump:
>          0	NOP(arg=None, lineno=23)
           2	LOAD_FAST(arg=1, lineno=23)
           4	LOAD_CONST(arg=0, lineno=23)
           6	LOAD_CONST(arg=0, lineno=23)
           8	BUILD_SLICE(arg=2, lineno=23)
          10	LOAD_CONST(arg=1, lineno=23)
          12	BUILD_TUPLE(arg=2, lineno=23)
          14	BINARY_SUBSCR(arg=None, lineno=23)
          16	STORE_FAST(arg=6, lineno=23)
          18	LOAD_FAST(arg=0, lineno=24)
          20	LOAD_CONST(arg=1, lineno=24)
          22	LOAD_CONST(arg=0, lineno=24)
          24	LOAD_CONST(arg=0, lineno=24)
          26	BUILD_SLICE(arg=2, lineno=24)
          28	BUILD_TUPLE(arg=2, lineno=24)
          30	BINARY_SUBSCR(arg=None, lineno=24)
          32	STORE_FAST(arg=7, lineno=24)
          34	LOAD_FAST(arg=0, lineno=26)
          36	LOAD_ATTR(arg=0, lineno=26)
          38	LOAD_CONST(arg=1, lineno=26)
          40	BINARY_SUBSCR(arg=None, lineno=26)
          42	STORE_FAST(arg=8, lineno=26)
          44	LOAD_CONST(arg=2, lineno=27)
          46	LOAD_FAST(arg=2, lineno=27)
          48	LOAD_METHOD(arg=1, lineno=27)
          50	CALL_METHOD(arg=0, lineno=27)
          52	BINARY_MULTIPLY(arg=None, lineno=27)
          54	STORE_FAST(arg=9, lineno=27)
          56	LOAD_FAST(arg=9, lineno=29)
          58	LOAD_CONST(arg=2, lineno=29)
          60	LOAD_FAST(arg=3, lineno=29)
          62	BINARY_MULTIPLY(arg=None, lineno=29)
          64	BINARY_ADD(arg=None, lineno=29)
          66	LOAD_FAST(arg=4, lineno=29)
          68	BINARY_ADD(arg=None, lineno=29)
          70	STORE_FAST(arg=10, lineno=29)
          72	LOAD_GLOBAL(arg=2, lineno=31)
          74	LOAD_METHOD(arg=3, lineno=31)
          76	LOAD_GLOBAL(arg=2, lineno=31)
          78	LOAD_METHOD(arg=4, lineno=31)
          80	LOAD_FAST(arg=3, lineno=31)
          82	BUILD_LIST(arg=1, lineno=31)
          84	CALL_METHOD(arg=1, lineno=31)
          86	LOAD_FAST(arg=2, lineno=31)
          88	BUILD_TUPLE(arg=2, lineno=31)
          90	CALL_METHOD(arg=1, lineno=31)
          92	STORE_FAST(arg=11, lineno=31)
          94	LOAD_GLOBAL(arg=2, lineno=32)
          96	LOAD_METHOD(arg=5, lineno=32)
          98	LOAD_FAST(arg=11, lineno=32)
         100	LOAD_CONST(arg=3, lineno=32)
         102	BINARY_ADD(arg=None, lineno=32)
         104	CALL_METHOD(arg=1, lineno=32)
         106	STORE_FAST(arg=12, lineno=32)
         108	LOAD_FAST(arg=11, lineno=34)
         110	LOAD_METHOD(arg=6, lineno=34)
         112	CALL_METHOD(arg=0, lineno=34)
         114	LOAD_FAST(arg=4, lineno=34)
         116	BINARY_ADD(arg=None, lineno=34)
         118	STORE_FAST(arg=13, lineno=34)
         120	LOAD_GLOBAL(arg=7, lineno=35)
         122	LOAD_FAST(arg=13, lineno=35)
         124	CALL_FUNCTION(arg=1, lineno=35)
         126	STORE_FAST(arg=14, lineno=35)
         128	LOAD_FAST(arg=1, lineno=36)
         130	LOAD_ATTR(arg=0, lineno=36)
         132	LOAD_CONST(arg=1, lineno=36)
         134	BINARY_SUBSCR(arg=None, lineno=36)
         136	STORE_FAST(arg=15, lineno=36)
         138	LOAD_GLOBAL(arg=2, lineno=38)
         140	LOAD_ATTR(arg=8, lineno=38)
         142	LOAD_FAST(arg=15, lineno=38)
         144	LOAD_CONST(arg=2, lineno=38)
         146	LOAD_FAST(arg=3, lineno=38)
         148	BINARY_MULTIPLY(arg=None, lineno=38)
         150	LOAD_FAST(arg=4, lineno=38)
         152	BINARY_ADD(arg=None, lineno=38)
         154	LOAD_CONST(arg=3, lineno=38)
         156	BINARY_ADD(arg=None, lineno=38)
         158	BUILD_TUPLE(arg=2, lineno=38)
         160	LOAD_GLOBAL(arg=2, lineno=38)
         162	LOAD_ATTR(arg=9, lineno=38)
         164	LOAD_CONST(arg=4, lineno=38)
         166	CALL_FUNCTION_KW(arg=2, lineno=38)
         168	STORE_FAST(arg=16, lineno=38)
         170	LOAD_GLOBAL(arg=10, lineno=40)
         172	LOAD_FAST(arg=12, lineno=40)
         174	CALL_FUNCTION(arg=1, lineno=40)
         176	GET_ITER(arg=None, lineno=40)
>        178	FOR_ITER(arg=428, lineno=40)
         182	STORE_FAST(arg=17, lineno=40)
         184	LOAD_GLOBAL(arg=2, lineno=42)
         186	LOAD_ATTR(arg=8, lineno=42)
         188	LOAD_FAST(arg=15, lineno=42)
         190	LOAD_CONST(arg=2, lineno=42)
         192	LOAD_FAST(arg=3, lineno=42)
         194	BINARY_MULTIPLY(arg=None, lineno=42)
         196	LOAD_FAST(arg=4, lineno=42)
         198	BINARY_ADD(arg=None, lineno=42)
         200	LOAD_CONST(arg=3, lineno=42)
         202	BINARY_ADD(arg=None, lineno=42)
         204	BUILD_TUPLE(arg=2, lineno=42)
         206	LOAD_GLOBAL(arg=2, lineno=42)
         208	LOAD_ATTR(arg=9, lineno=42)
         210	LOAD_CONST(arg=4, lineno=42)
         212	CALL_FUNCTION_KW(arg=2, lineno=42)
         214	STORE_FAST(arg=18, lineno=42)
         216	LOAD_GLOBAL(arg=11, lineno=44)
         218	LOAD_FAST(arg=17, lineno=44)
         220	LOAD_FAST(arg=11, lineno=44)
         222	CALL_FUNCTION(arg=2, lineno=44)
         224	STORE_FAST(arg=19, lineno=44)
         226	LOAD_FAST(arg=19, lineno=45)
         228	LOAD_METHOD(arg=1, lineno=45)
         230	CALL_METHOD(arg=0, lineno=45)
         232	STORE_FAST(arg=20, lineno=45)
         234	LOAD_CONST(arg=5, lineno=47)
         236	STORE_FAST(arg=21, lineno=47)
         238	LOAD_GLOBAL(arg=12, lineno=48)
         240	LOAD_CONST(arg=3, lineno=48)
         242	LOAD_FAST(arg=8, lineno=48)
         244	LOAD_CONST(arg=2, lineno=48)
         246	BINARY_FLOOR_DIVIDE(arg=None, lineno=48)
         248	CALL_FUNCTION(arg=2, lineno=48)
         250	GET_ITER(arg=None, lineno=48)
>        252	FOR_ITER(arg=28, lineno=48)
         254	STORE_FAST(arg=22, lineno=48)
         256	LOAD_FAST(arg=21, lineno=49)
         258	LOAD_FAST(arg=14, lineno=49)
         260	LOAD_FAST(arg=11, lineno=49)
         262	LOAD_FAST(arg=22, lineno=49)
         264	BINARY_SUBSCR(arg=None, lineno=49)
         266	LOAD_FAST(arg=19, lineno=49)
         268	LOAD_FAST(arg=22, lineno=49)
         270	BINARY_SUBSCR(arg=None, lineno=49)
         272	BUILD_TUPLE(arg=2, lineno=49)
         274	BINARY_SUBSCR(arg=None, lineno=49)
         276	INPLACE_MULTIPLY(arg=None, lineno=49)
         278	STORE_FAST(arg=21, lineno=49)
         280	JUMP_ABSOLUTE(arg=252, lineno=49)
>        282	LOAD_FAST(arg=5, lineno=51)
         284	POP_JUMP_IF_FALSE(arg=302, lineno=51)
         288	LOAD_CONST(arg=2, lineno=52)
         290	LOAD_FAST(arg=19, lineno=52)
         292	BINARY_MULTIPLY(arg=None, lineno=52)
         294	LOAD_FAST(arg=11, lineno=52)
         296	BINARY_SUBTRACT(arg=None, lineno=52)
         298	STORE_FAST(arg=23, lineno=52)
         300	JUMP_FORWARD(arg=4, lineno=52)
>        302	LOAD_FAST(arg=19, lineno=54)
         304	STORE_FAST(arg=23, lineno=54)
>        306	LOAD_GLOBAL(arg=13, lineno=56)
         308	LOAD_FAST(arg=23, lineno=56)
         310	LOAD_FAST(arg=0, lineno=56)
         312	LOAD_FAST(arg=1, lineno=56)
         314	LOAD_CONST(arg=1, lineno=56)
         316	LOAD_CONST(arg=0, lineno=56)
         318	LOAD_CONST(arg=0, lineno=56)
         320	BUILD_SLICE(arg=2, lineno=56)
         322	BUILD_TUPLE(arg=2, lineno=56)
         324	BINARY_SUBSCR(arg=None, lineno=56)
         326	LOAD_FAST(arg=7, lineno=56)
         328	CALL_FUNCTION(arg=4, lineno=56)
         330	UNPACK_SEQUENCE(arg=4, lineno=56)
         332	STORE_FAST(arg=24, lineno=56)
         334	STORE_FAST(arg=25, lineno=56)
         336	STORE_FAST(arg=26, lineno=56)
         338	STORE_FAST(arg=27, lineno=56)
         340	LOAD_GLOBAL(arg=14, lineno=58)
         342	LOAD_FAST(arg=24, lineno=58)
         344	CALL_FUNCTION(arg=1, lineno=58)
         346	STORE_FAST(arg=28, lineno=58)
         348	LOAD_GLOBAL(arg=12, lineno=60)
         350	LOAD_FAST(arg=15, lineno=60)
         352	CALL_FUNCTION(arg=1, lineno=60)
         354	GET_ITER(arg=None, lineno=60)
>        356	FOR_ITER(arg=242, lineno=60)
         358	STORE_FAST(arg=29, lineno=60)
         360	LOAD_GLOBAL(arg=15, lineno=61)
         362	LOAD_FAST(arg=23, lineno=61)
         364	LOAD_FAST(arg=1, lineno=61)
         366	LOAD_FAST(arg=29, lineno=61)
         368	LOAD_CONST(arg=0, lineno=61)
         370	LOAD_CONST(arg=0, lineno=61)
         372	BUILD_SLICE(arg=2, lineno=61)
         374	BUILD_TUPLE(arg=2, lineno=61)
         376	BINARY_SUBSCR(arg=None, lineno=61)
         378	CALL_FUNCTION(arg=2, lineno=61)
         380	UNPACK_SEQUENCE(arg=2, lineno=61)
         382	STORE_FAST(arg=25, lineno=61)
         384	STORE_FAST(arg=26, lineno=61)
         386	LOAD_GLOBAL(arg=16, lineno=63)
         388	LOAD_FAST(arg=28, lineno=63)
         390	LOAD_FAST(arg=24, lineno=63)
         392	LOAD_FAST(arg=25, lineno=63)
         394	LOAD_FAST(arg=26, lineno=63)
         396	LOAD_FAST(arg=10, lineno=63)
         398	CALL_FUNCTION(arg=5, lineno=63)
         400	STORE_FAST(arg=30, lineno=63)
         402	LOAD_GLOBAL(arg=17, lineno=64)
         404	LOAD_FAST(arg=28, lineno=64)
         406	LOAD_FAST(arg=24, lineno=64)
         408	LOAD_FAST(arg=25, lineno=64)
         410	LOAD_FAST(arg=26, lineno=64)
         412	LOAD_FAST(arg=10, lineno=64)
         414	LOAD_FAST(arg=6, lineno=64)
         416	LOAD_FAST(arg=29, lineno=64)
         418	BINARY_SUBSCR(arg=None, lineno=64)
         420	LOAD_FAST(arg=27, lineno=64)
         422	CALL_FUNCTION(arg=7, lineno=64)
         424	STORE_FAST(arg=31, lineno=64)
         426	LOAD_GLOBAL(arg=12, lineno=66)
         428	LOAD_CONST(arg=2, lineno=66)
         430	LOAD_FAST(arg=19, lineno=66)
         432	LOAD_CONST(arg=1, lineno=66)
         434	BINARY_SUBSCR(arg=None, lineno=66)
         436	BINARY_MULTIPLY(arg=None, lineno=66)
         438	LOAD_CONST(arg=2, lineno=66)
         440	LOAD_FAST(arg=3, lineno=66)
         442	BINARY_MULTIPLY(arg=None, lineno=66)
         444	LOAD_FAST(arg=4, lineno=66)
         446	BINARY_ADD(arg=None, lineno=66)
         448	LOAD_CONST(arg=3, lineno=66)
         450	BINARY_ADD(arg=None, lineno=66)
         452	CALL_FUNCTION(arg=2, lineno=66)
         454	GET_ITER(arg=None, lineno=66)
>        456	FOR_ITER(arg=138, lineno=66)
         458	STORE_FAST(arg=32, lineno=66)
         460	LOAD_FAST(arg=9, lineno=67)
         462	LOAD_FAST(arg=32, lineno=67)
         464	BINARY_ADD(arg=None, lineno=67)
         466	STORE_FAST(arg=33, lineno=67)
         468	LOAD_CONST(arg=6, lineno=68)
         470	LOAD_FAST(arg=33, lineno=68)
         472	LOAD_CONST(arg=2, lineno=68)
         474	BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
         476	LOAD_FAST(arg=20, lineno=68)
         478	BINARY_SUBTRACT(arg=None, lineno=68)
         480	BINARY_POWER(arg=None, lineno=68)
         482	STORE_FAST(arg=34, lineno=68)
         484	LOAD_FAST(arg=14, lineno=70)
         486	LOAD_FAST(arg=32, lineno=70)
         488	LOAD_CONST(arg=2, lineno=70)
         490	BINARY_FLOOR_DIVIDE(arg=None, lineno=70)
         492	LOAD_FAST(arg=19, lineno=70)
         494	LOAD_CONST(arg=1, lineno=70)
         496	BINARY_SUBSCR(arg=None, lineno=70)
         498	BUILD_TUPLE(arg=2, lineno=70)
         500	BINARY_SUBSCR(arg=None, lineno=70)
         502	LOAD_FAST(arg=21, lineno=70)
         504	BINARY_MULTIPLY(arg=None, lineno=70)
         506	STORE_FAST(arg=35, lineno=70)
         508	LOAD_FAST(arg=32, lineno=72)
         510	LOAD_CONST(arg=2, lineno=72)
         512	BINARY_MODULO(arg=None, lineno=72)
         514	LOAD_CONST(arg=1, lineno=72)
         516	COMPARE_OP(arg=2, lineno=72)
         518	POP_JUMP_IF_FALSE(arg=560, lineno=72)
         522	LOAD_FAST(arg=18, lineno=73)
         524	LOAD_FAST(arg=29, lineno=73)
         526	LOAD_FAST(arg=32, lineno=73)
         528	BUILD_TUPLE(arg=2, lineno=73)
         530	DUP_TOP_TWO(arg=None, lineno=73)
         532	BINARY_SUBSCR(arg=None, lineno=73)
         534	LOAD_FAST(arg=35, lineno=73)
         536	LOAD_FAST(arg=34, lineno=73)
         538	BINARY_MULTIPLY(arg=None, lineno=73)
         540	LOAD_FAST(arg=30, lineno=73)
         542	LOAD_FAST(arg=33, lineno=73)
         544	LOAD_CONST(arg=2, lineno=73)
         546	BINARY_FLOOR_DIVIDE(arg=None, lineno=73)
         548	BINARY_SUBSCR(arg=None, lineno=73)
         550	BINARY_MULTIPLY(arg=None, lineno=73)
         552	INPLACE_ADD(arg=None, lineno=73)
         554	ROT_THREE(arg=None, lineno=73)
         556	STORE_SUBSCR(arg=None, lineno=73)
         558	JUMP_FORWARD(arg=32, lineno=73)
>        560	LOAD_FAST(arg=18, lineno=75)
         562	LOAD_FAST(arg=29, lineno=75)
         564	LOAD_FAST(arg=32, lineno=75)
         566	BUILD_TUPLE(arg=2, lineno=75)
         568	DUP_TOP_TWO(arg=None, lineno=75)
         570	BINARY_SUBSCR(arg=None, lineno=75)
         572	LOAD_FAST(arg=35, lineno=75)
         574	LOAD_FAST(arg=34, lineno=75)
         576	BINARY_MULTIPLY(arg=None, lineno=75)
         578	LOAD_FAST(arg=31, lineno=75)
         580	LOAD_FAST(arg=33, lineno=75)
         582	BINARY_SUBSCR(arg=None, lineno=75)
         584	BINARY_MULTIPLY(arg=None, lineno=75)
         586	INPLACE_ADD(arg=None, lineno=75)
         588	ROT_THREE(arg=None, lineno=75)
         590	STORE_SUBSCR(arg=None, lineno=75)
>        592	JUMP_ABSOLUTE(arg=456, lineno=75)
>        596	JUMP_ABSOLUTE(arg=356, lineno=75)
>        600	LOAD_FAST(arg=16, lineno=76)
         602	LOAD_FAST(arg=18, lineno=76)
         604	INPLACE_ADD(arg=None, lineno=76)
         606	STORE_FAST(arg=16, lineno=76)
         608	JUMP_ABSOLUTE(arg=178, lineno=76)
>        610	LOAD_FAST(arg=5, lineno=78)
         612	POP_JUMP_IF_FALSE(arg=678, lineno=78)
         616	LOAD_GLOBAL(arg=12, lineno=79)
         618	LOAD_FAST(arg=16, lineno=79)
         620	LOAD_ATTR(arg=0, lineno=79)
         622	LOAD_CONST(arg=3, lineno=79)
         624	BINARY_SUBSCR(arg=None, lineno=79)
         626	CALL_FUNCTION(arg=1, lineno=79)
         628	GET_ITER(arg=None, lineno=79)
>        630	FOR_ITER(arg=46, lineno=79)
         632	STORE_FAST(arg=17, lineno=79)
         634	LOAD_FAST(arg=9, lineno=80)
         636	LOAD_FAST(arg=17, lineno=80)
         638	BINARY_ADD(arg=None, lineno=80)
         640	STORE_FAST(arg=36, lineno=80)
         642	LOAD_FAST(arg=16, lineno=81)
         644	LOAD_CONST(arg=0, lineno=81)
         646	LOAD_CONST(arg=0, lineno=81)
         648	BUILD_SLICE(arg=2, lineno=81)
         650	LOAD_FAST(arg=17, lineno=81)
         652	BUILD_TUPLE(arg=2, lineno=81)
         654	DUP_TOP_TWO(arg=None, lineno=81)
         656	BINARY_SUBSCR(arg=None, lineno=81)
         658	LOAD_CONST(arg=7, lineno=81)
         660	LOAD_FAST(arg=36, lineno=81)
         662	LOAD_CONST(arg=2, lineno=81)
         664	BINARY_FLOOR_DIVIDE(arg=None, lineno=81)
         666	BINARY_POWER(arg=None, lineno=81)
         668	INPLACE_MULTIPLY(arg=None, lineno=81)
         670	ROT_THREE(arg=None, lineno=81)
         672	STORE_SUBSCR(arg=None, lineno=81)
         674	JUMP_ABSOLUTE(arg=630, lineno=81)
>        678	LOAD_FAST(arg=16, lineno=83)
         680	RETURN_VALUE(arg=None, lineno=83)
DEBUG 2022-02-14 16:45:42,576 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,576 stack: []
DEBUG 2022-02-14 16:45:42,576 dispatch pc=0, inst=NOP(arg=None, lineno=23)
DEBUG 2022-02-14 16:45:42,576 stack []
DEBUG 2022-02-14 16:45:42,576 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack []
DEBUG 2022-02-14 16:45:42,577 dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=6, inst=LOAD_CONST(arg=0, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=8, inst=BUILD_SLICE(arg=2, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0', '$const4.1', '$const6.2']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0', '$8build_slice.4']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=12, inst=BUILD_TUPLE(arg=2, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0', '$8build_slice.4', '$const10.5']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$D2.0', '$12build_tuple.6']
DEBUG 2022-02-14 16:45:42,577 dispatch pc=16, inst=STORE_FAST(arg=6, lineno=23)
DEBUG 2022-02-14 16:45:42,577 stack ['$14binary_subscr.7']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack []
DEBUG 2022-02-14 16:45:42,578 dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8', '$const20.9']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=24, inst=LOAD_CONST(arg=0, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8', '$const20.9', '$const22.10']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=26, inst=BUILD_SLICE(arg=2, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8', '$const20.9', '$const22.10', '$const24.11']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=28, inst=BUILD_TUPLE(arg=2, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8', '$const20.9', '$26build_slice.13']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$A18.8', '$28build_tuple.14']
DEBUG 2022-02-14 16:45:42,578 dispatch pc=32, inst=STORE_FAST(arg=7, lineno=24)
DEBUG 2022-02-14 16:45:42,578 stack ['$30binary_subscr.15']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=26)
DEBUG 2022-02-14 16:45:42,579 stack []
DEBUG 2022-02-14 16:45:42,579 dispatch pc=36, inst=LOAD_ATTR(arg=0, lineno=26)
DEBUG 2022-02-14 16:45:42,579 stack ['$A34.16']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=26)
DEBUG 2022-02-14 16:45:42,579 stack ['$36load_attr.17']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=26)
DEBUG 2022-02-14 16:45:42,579 stack ['$36load_attr.17', '$const38.18']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=42, inst=STORE_FAST(arg=8, lineno=26)
DEBUG 2022-02-14 16:45:42,579 stack ['$40binary_subscr.19']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=27)
DEBUG 2022-02-14 16:45:42,579 stack []
DEBUG 2022-02-14 16:45:42,579 dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=27)
DEBUG 2022-02-14 16:45:42,579 stack ['$const44.20']
DEBUG 2022-02-14 16:45:42,579 dispatch pc=48, inst=LOAD_METHOD(arg=1, lineno=27)
DEBUG 2022-02-14 16:45:42,579 stack ['$const44.20', '$fixed_edge_reps46.21']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=50, inst=CALL_METHOD(arg=0, lineno=27)
DEBUG 2022-02-14 16:45:42,580 stack ['$const44.20', '$48load_method.22']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=52, inst=BINARY_MULTIPLY(arg=None, lineno=27)
DEBUG 2022-02-14 16:45:42,580 stack ['$const44.20', '$50call_method.23']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=54, inst=STORE_FAST(arg=9, lineno=27)
DEBUG 2022-02-14 16:45:42,580 stack ['$52binary_multiply.24']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=29)
DEBUG 2022-02-14 16:45:42,580 stack []
DEBUG 2022-02-14 16:45:42,580 dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=29)
DEBUG 2022-02-14 16:45:42,580 stack ['$N_fixed56.25']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=29)
DEBUG 2022-02-14 16:45:42,580 stack ['$N_fixed56.25', '$const58.26']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=62, inst=BINARY_MULTIPLY(arg=None, lineno=29)
DEBUG 2022-02-14 16:45:42,580 stack ['$N_fixed56.25', '$const58.26', '$batch_max60.27']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=64, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-14 16:45:42,580 stack ['$N_fixed56.25', '$62binary_multiply.28']
DEBUG 2022-02-14 16:45:42,580 dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=29)
DEBUG 2022-02-14 16:45:42,581 stack ['$64binary_add.29']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-14 16:45:42,581 stack ['$64binary_add.29', '$odd_cutoff66.30']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=70, inst=STORE_FAST(arg=10, lineno=29)
DEBUG 2022-02-14 16:45:42,581 stack ['$68binary_add.31']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack []
DEBUG 2022-02-14 16:45:42,581 dispatch pc=74, inst=LOAD_METHOD(arg=3, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack ['$72load_global.32']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack ['$74load_method.33']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=78, inst=LOAD_METHOD(arg=4, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack ['$74load_method.33', '$76load_global.34']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack ['$74load_method.33', '$78load_method.35']
DEBUG 2022-02-14 16:45:42,581 dispatch pc=82, inst=BUILD_LIST(arg=1, lineno=31)
DEBUG 2022-02-14 16:45:42,581 stack ['$74load_method.33', '$78load_method.35', '$batch_max80.36']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=31)
DEBUG 2022-02-14 16:45:42,582 stack ['$74load_method.33', '$78load_method.35', '$82build_list.37']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=31)
DEBUG 2022-02-14 16:45:42,582 stack ['$74load_method.33', '$84call_method.38']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=88, inst=BUILD_TUPLE(arg=2, lineno=31)
DEBUG 2022-02-14 16:45:42,582 stack ['$74load_method.33', '$84call_method.38', '$fixed_edge_reps86.39']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=90, inst=CALL_METHOD(arg=1, lineno=31)
DEBUG 2022-02-14 16:45:42,582 stack ['$74load_method.33', '$88build_tuple.40']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=92, inst=STORE_FAST(arg=11, lineno=31)
DEBUG 2022-02-14 16:45:42,582 stack ['$90call_method.41']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=94, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-02-14 16:45:42,582 stack []
DEBUG 2022-02-14 16:45:42,582 dispatch pc=96, inst=LOAD_METHOD(arg=5, lineno=32)
DEBUG 2022-02-14 16:45:42,582 stack ['$94load_global.42']
DEBUG 2022-02-14 16:45:42,582 dispatch pc=98, inst=LOAD_FAST(arg=11, lineno=32)
DEBUG 2022-02-14 16:45:42,582 stack ['$96load_method.43']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=32)
DEBUG 2022-02-14 16:45:42,583 stack ['$96load_method.43', '$edge_reps98.44']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=32)
DEBUG 2022-02-14 16:45:42,583 stack ['$96load_method.43', '$edge_reps98.44', '$const100.45']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-02-14 16:45:42,583 stack ['$96load_method.43', '$102binary_add.46']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=106, inst=STORE_FAST(arg=12, lineno=32)
DEBUG 2022-02-14 16:45:42,583 stack ['$104call_method.47']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=108, inst=LOAD_FAST(arg=11, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack []
DEBUG 2022-02-14 16:45:42,583 dispatch pc=110, inst=LOAD_METHOD(arg=6, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack ['$edge_reps108.48']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=112, inst=CALL_METHOD(arg=0, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack ['$110load_method.49']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack ['$112call_method.50']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=116, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack ['$112call_method.50', '$odd_cutoff114.51']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=118, inst=STORE_FAST(arg=13, lineno=34)
DEBUG 2022-02-14 16:45:42,583 stack ['$116binary_add.52']
DEBUG 2022-02-14 16:45:42,583 dispatch pc=120, inst=LOAD_GLOBAL(arg=7, lineno=35)
DEBUG 2022-02-14 16:45:42,583 stack []
DEBUG 2022-02-14 16:45:42,583 dispatch pc=122, inst=LOAD_FAST(arg=13, lineno=35)
DEBUG 2022-02-14 16:45:42,584 stack ['$120load_global.53']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=35)
DEBUG 2022-02-14 16:45:42,584 stack ['$120load_global.53', '$max_binom122.54']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=126, inst=STORE_FAST(arg=14, lineno=35)
DEBUG 2022-02-14 16:45:42,584 stack ['$124call_function.55']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=128, inst=LOAD_FAST(arg=1, lineno=36)
DEBUG 2022-02-14 16:45:42,584 stack []
DEBUG 2022-02-14 16:45:42,584 dispatch pc=130, inst=LOAD_ATTR(arg=0, lineno=36)
DEBUG 2022-02-14 16:45:42,584 stack ['$D128.56']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=36)
DEBUG 2022-02-14 16:45:42,584 stack ['$130load_attr.57']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=134, inst=BINARY_SUBSCR(arg=None, lineno=36)
DEBUG 2022-02-14 16:45:42,584 stack ['$130load_attr.57', '$const132.58']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=136, inst=STORE_FAST(arg=15, lineno=36)
DEBUG 2022-02-14 16:45:42,584 stack ['$134binary_subscr.59']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-02-14 16:45:42,584 stack []
DEBUG 2022-02-14 16:45:42,584 dispatch pc=140, inst=LOAD_ATTR(arg=8, lineno=38)
DEBUG 2022-02-14 16:45:42,584 stack ['$138load_global.60']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=142, inst=LOAD_FAST(arg=15, lineno=38)
DEBUG 2022-02-14 16:45:42,584 stack ['$140load_attr.61']
DEBUG 2022-02-14 16:45:42,584 dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=146, inst=LOAD_FAST(arg=3, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$const144.63']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=148, inst=BINARY_MULTIPLY(arg=None, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$const144.63', '$batch_max146.64']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=150, inst=LOAD_FAST(arg=4, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$148binary_multiply.65']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=152, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$148binary_multiply.65', '$odd_cutoff150.66']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$152binary_add.67']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$152binary_add.67', '$const154.68']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=158, inst=BUILD_TUPLE(arg=2, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$n_D142.62', '$156binary_add.69']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=160, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$158build_tuple.70']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=162, inst=LOAD_ATTR(arg=9, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$158build_tuple.70', '$160load_global.71']
DEBUG 2022-02-14 16:45:42,585 dispatch pc=164, inst=LOAD_CONST(arg=4, lineno=38)
DEBUG 2022-02-14 16:45:42,585 stack ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=166, inst=CALL_FUNCTION_KW(arg=2, lineno=38)
DEBUG 2022-02-14 16:45:42,586 stack ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72', '$const164.73']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=168, inst=STORE_FAST(arg=16, lineno=38)
DEBUG 2022-02-14 16:45:42,586 stack ['$166call_function_kw.74']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=170, inst=LOAD_GLOBAL(arg=10, lineno=40)
DEBUG 2022-02-14 16:45:42,586 stack []
DEBUG 2022-02-14 16:45:42,586 dispatch pc=172, inst=LOAD_FAST(arg=12, lineno=40)
DEBUG 2022-02-14 16:45:42,586 stack ['$170load_global.75']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=174, inst=CALL_FUNCTION(arg=1, lineno=40)
DEBUG 2022-02-14 16:45:42,586 stack ['$170load_global.75', '$steps172.76']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=176, inst=GET_ITER(arg=None, lineno=40)
DEBUG 2022-02-14 16:45:42,586 stack ['$174call_function.77']
DEBUG 2022-02-14 16:45:42,586 end state. edges=[Edge(pc=178, stack=('$176get_iter.78',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,586 pending: deque([State(pc_initial=178 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,586 stack: ['$phi178.0']
DEBUG 2022-02-14 16:45:42,586 dispatch pc=178, inst=FOR_ITER(arg=428, lineno=40)
DEBUG 2022-02-14 16:45:42,586 stack ['$phi178.0']
DEBUG 2022-02-14 16:45:42,586 end state. edges=[Edge(pc=610, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=('$phi178.0', '$178for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,586 pending: deque([State(pc_initial=610 nstack_initial=0), State(pc_initial=182 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,586 stack: []
DEBUG 2022-02-14 16:45:42,587 dispatch pc=610, inst=LOAD_FAST(arg=5, lineno=78)
DEBUG 2022-02-14 16:45:42,587 stack []
DEBUG 2022-02-14 16:45:42,587 dispatch pc=612, inst=POP_JUMP_IF_FALSE(arg=678, lineno=78)
DEBUG 2022-02-14 16:45:42,587 stack ['$glynn610.0']
DEBUG 2022-02-14 16:45:42,587 end state. edges=[Edge(pc=616, stack=(), blockstack=(), npush=0), Edge(pc=678, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,587 pending: deque([State(pc_initial=182 nstack_initial=2), State(pc_initial=616 nstack_initial=0), State(pc_initial=678 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,587 stack: ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=182, inst=STORE_FAST(arg=17, lineno=40)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=184, inst=LOAD_GLOBAL(arg=2, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=186, inst=LOAD_ATTR(arg=8, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$184load_global.2']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=188, inst=LOAD_FAST(arg=15, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$186load_attr.3']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$const190.5']
DEBUG 2022-02-14 16:45:42,587 dispatch pc=194, inst=BINARY_MULTIPLY(arg=None, lineno=42)
DEBUG 2022-02-14 16:45:42,587 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$const190.5', '$batch_max192.6']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=196, inst=LOAD_FAST(arg=4, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$194binary_multiply.7']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$194binary_multiply.7', '$odd_cutoff196.8']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=200, inst=LOAD_CONST(arg=3, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$198binary_add.9']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=202, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$198binary_add.9', '$const200.10']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=204, inst=BUILD_TUPLE(arg=2, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$202binary_add.11']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=206, inst=LOAD_GLOBAL(arg=2, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=208, inst=LOAD_ATTR(arg=9, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$206load_global.13']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=210, inst=LOAD_CONST(arg=4, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$208load_attr.14']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=212, inst=CALL_FUNCTION_KW(arg=2, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$208load_attr.14', '$const210.15']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=214, inst=STORE_FAST(arg=18, lineno=42)
DEBUG 2022-02-14 16:45:42,588 stack ['$phi182.0', '$212call_function_kw.16']
DEBUG 2022-02-14 16:45:42,588 dispatch pc=216, inst=LOAD_GLOBAL(arg=11, lineno=44)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=218, inst=LOAD_FAST(arg=17, lineno=44)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$216load_global.17']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=220, inst=LOAD_FAST(arg=11, lineno=44)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$216load_global.17', '$j218.18']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=222, inst=CALL_FUNCTION(arg=2, lineno=44)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$216load_global.17', '$j218.18', '$edge_reps220.19']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=224, inst=STORE_FAST(arg=19, lineno=44)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$222call_function.20']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=226, inst=LOAD_FAST(arg=19, lineno=45)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=228, inst=LOAD_METHOD(arg=1, lineno=45)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$kept_edges226.21']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=230, inst=CALL_METHOD(arg=0, lineno=45)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$228load_method.22']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=232, inst=STORE_FAST(arg=20, lineno=45)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$230call_method.23']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=234, inst=LOAD_CONST(arg=5, lineno=47)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=236, inst=STORE_FAST(arg=21, lineno=47)
DEBUG 2022-02-14 16:45:42,589 stack ['$phi182.0', '$const234.24']
DEBUG 2022-02-14 16:45:42,589 dispatch pc=238, inst=LOAD_GLOBAL(arg=12, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=240, inst=LOAD_CONST(arg=3, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$238load_global.25']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=242, inst=LOAD_FAST(arg=8, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$238load_global.25', '$const240.26']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=244, inst=LOAD_CONST(arg=2, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$n242.27']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=246, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$n242.27', '$const244.28']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=248, inst=CALL_FUNCTION(arg=2, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$246binary_floor_divide.29']
DEBUG 2022-02-14 16:45:42,590 dispatch pc=250, inst=GET_ITER(arg=None, lineno=48)
DEBUG 2022-02-14 16:45:42,590 stack ['$phi182.0', '$248call_function.30']
DEBUG 2022-02-14 16:45:42,590 end state. edges=[Edge(pc=252, stack=('$phi182.0', '$250get_iter.31'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,590 pending: deque([State(pc_initial=616 nstack_initial=0), State(pc_initial=678 nstack_initial=0), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,590 stack: []
DEBUG 2022-02-14 16:45:42,590 dispatch pc=616, inst=LOAD_GLOBAL(arg=12, lineno=79)
DEBUG 2022-02-14 16:45:42,590 stack []
DEBUG 2022-02-14 16:45:42,590 dispatch pc=618, inst=LOAD_FAST(arg=16, lineno=79)
DEBUG 2022-02-14 16:45:42,590 stack ['$616load_global.0']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=620, inst=LOAD_ATTR(arg=0, lineno=79)
DEBUG 2022-02-14 16:45:42,591 stack ['$616load_global.0', '$H_batch618.1']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=622, inst=LOAD_CONST(arg=3, lineno=79)
DEBUG 2022-02-14 16:45:42,591 stack ['$616load_global.0', '$620load_attr.2']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=624, inst=BINARY_SUBSCR(arg=None, lineno=79)
DEBUG 2022-02-14 16:45:42,591 stack ['$616load_global.0', '$620load_attr.2', '$const622.3']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=626, inst=CALL_FUNCTION(arg=1, lineno=79)
DEBUG 2022-02-14 16:45:42,591 stack ['$616load_global.0', '$624binary_subscr.4']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=628, inst=GET_ITER(arg=None, lineno=79)
DEBUG 2022-02-14 16:45:42,591 stack ['$626call_function.5']
DEBUG 2022-02-14 16:45:42,591 end state. edges=[Edge(pc=630, stack=('$628get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,591 pending: deque([State(pc_initial=678 nstack_initial=0), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,591 stack: []
DEBUG 2022-02-14 16:45:42,591 dispatch pc=678, inst=LOAD_FAST(arg=16, lineno=83)
DEBUG 2022-02-14 16:45:42,591 stack []
DEBUG 2022-02-14 16:45:42,591 dispatch pc=680, inst=RETURN_VALUE(arg=None, lineno=83)
DEBUG 2022-02-14 16:45:42,591 stack ['$H_batch678.0']
DEBUG 2022-02-14 16:45:42,591 end state. edges=[]
DEBUG 2022-02-14 16:45:42,591 pending: deque([State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,591 stack: ['$phi252.0', '$phi252.1']
DEBUG 2022-02-14 16:45:42,591 dispatch pc=252, inst=FOR_ITER(arg=28, lineno=48)
DEBUG 2022-02-14 16:45:42,591 stack ['$phi252.0', '$phi252.1']
DEBUG 2022-02-14 16:45:42,592 end state. edges=[Edge(pc=282, stack=('$phi252.0',), blockstack=(), npush=0), Edge(pc=254, stack=('$phi252.0', '$phi252.1', '$252for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,592 pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=254 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,592 stack: ['$phi630.0']
DEBUG 2022-02-14 16:45:42,592 dispatch pc=630, inst=FOR_ITER(arg=46, lineno=79)
DEBUG 2022-02-14 16:45:42,592 stack ['$phi630.0']
DEBUG 2022-02-14 16:45:42,592 end state. edges=[Edge(pc=678, stack=(), blockstack=(), npush=0), Edge(pc=632, stack=('$phi630.0', '$630for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,592 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=254 nstack_initial=3), State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,592 stack: ['$phi282.0']
DEBUG 2022-02-14 16:45:42,592 dispatch pc=282, inst=LOAD_FAST(arg=5, lineno=51)
DEBUG 2022-02-14 16:45:42,592 stack ['$phi282.0']
DEBUG 2022-02-14 16:45:42,592 dispatch pc=284, inst=POP_JUMP_IF_FALSE(arg=302, lineno=51)
DEBUG 2022-02-14 16:45:42,592 stack ['$phi282.0', '$glynn282.1']
DEBUG 2022-02-14 16:45:42,592 end state. edges=[Edge(pc=288, stack=('$phi282.0',), blockstack=(), npush=0), Edge(pc=302, stack=('$phi282.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,592 pending: deque([State(pc_initial=254 nstack_initial=3), State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,592 stack: ['$phi254.0', '$phi254.1', '$phi254.2']
DEBUG 2022-02-14 16:45:42,592 dispatch pc=254, inst=STORE_FAST(arg=22, lineno=48)
DEBUG 2022-02-14 16:45:42,592 stack ['$phi254.0', '$phi254.1', '$phi254.2']
DEBUG 2022-02-14 16:45:42,592 dispatch pc=256, inst=LOAD_FAST(arg=21, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=258, inst=LOAD_FAST(arg=14, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=260, inst=LOAD_FAST(arg=11, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=262, inst=LOAD_FAST(arg=22, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$edge_reps260.5']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=264, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$edge_reps260.5', '$i262.6']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=266, inst=LOAD_FAST(arg=19, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=268, inst=LOAD_FAST(arg=22, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$kept_edges266.8']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=270, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$kept_edges266.8', '$i268.9']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=272, inst=BUILD_TUPLE(arg=2, lineno=49)
DEBUG 2022-02-14 16:45:42,593 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$270binary_subscr.10']
DEBUG 2022-02-14 16:45:42,593 dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$272build_tuple.11']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=276, inst=INPLACE_MULTIPLY(arg=None, lineno=49)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$274binary_subscr.12']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=278, inst=STORE_FAST(arg=21, lineno=49)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi254.0', '$phi254.1', '$276inplace_multiply.13']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=280, inst=JUMP_ABSOLUTE(arg=252, lineno=49)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi254.0', '$phi254.1']
DEBUG 2022-02-14 16:45:42,594 end state. edges=[Edge(pc=252, stack=('$phi254.0', '$phi254.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,594 pending: deque([State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,594 pending: deque([State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,594 stack: ['$phi632.0', '$phi632.1']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=632, inst=STORE_FAST(arg=17, lineno=79)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi632.0', '$phi632.1']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=634, inst=LOAD_FAST(arg=9, lineno=80)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi632.0']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=636, inst=LOAD_FAST(arg=17, lineno=80)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi632.0', '$N_fixed634.2']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=638, inst=BINARY_ADD(arg=None, lineno=80)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi632.0', '$N_fixed634.2', '$j636.3']
DEBUG 2022-02-14 16:45:42,594 dispatch pc=640, inst=STORE_FAST(arg=36, lineno=80)
DEBUG 2022-02-14 16:45:42,594 stack ['$phi632.0', '$638binary_add.4']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=642, inst=LOAD_FAST(arg=16, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=644, inst=LOAD_CONST(arg=0, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=646, inst=LOAD_CONST(arg=0, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$const644.6']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=648, inst=BUILD_SLICE(arg=2, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$const644.6', '$const646.7']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=650, inst=LOAD_FAST(arg=17, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$648build_slice.9']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=652, inst=BUILD_TUPLE(arg=2, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$648build_slice.9', '$j650.10']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=654, inst=DUP_TOP_TWO(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=656, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$654dup_top_two.12', '$654dup_top_two.13']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=658, inst=LOAD_CONST(arg=7, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=660, inst=LOAD_FAST(arg=36, lineno=81)
DEBUG 2022-02-14 16:45:42,595 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15']
DEBUG 2022-02-14 16:45:42,595 dispatch pc=662, inst=LOAD_CONST(arg=2, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$x660.16']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=664, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$x660.16', '$const662.17']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=666, inst=BINARY_POWER(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$664binary_floor_divide.18']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=668, inst=INPLACE_MULTIPLY(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$666binary_power.19']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=670, inst=ROT_THREE(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$668inplace_multiply.20']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=672, inst=STORE_SUBSCR(arg=None, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0', '$668inplace_multiply.20', '$H_batch642.5', '$652build_tuple.11']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=674, inst=JUMP_ABSOLUTE(arg=630, lineno=81)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi632.0']
DEBUG 2022-02-14 16:45:42,596 end state. edges=[Edge(pc=630, stack=('$phi632.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,596 pending: deque([State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,596 stack: ['$phi288.0']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=288, inst=LOAD_CONST(arg=2, lineno=52)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi288.0']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=290, inst=LOAD_FAST(arg=19, lineno=52)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi288.0', '$const288.1']
DEBUG 2022-02-14 16:45:42,596 dispatch pc=292, inst=BINARY_MULTIPLY(arg=None, lineno=52)
DEBUG 2022-02-14 16:45:42,596 stack ['$phi288.0', '$const288.1', '$kept_edges290.2']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=294, inst=LOAD_FAST(arg=11, lineno=52)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi288.0', '$292binary_multiply.3']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=296, inst=BINARY_SUBTRACT(arg=None, lineno=52)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi288.0', '$292binary_multiply.3', '$edge_reps294.4']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=298, inst=STORE_FAST(arg=23, lineno=52)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi288.0', '$296binary_subtract.5']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=300, inst=JUMP_FORWARD(arg=4, lineno=52)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi288.0']
DEBUG 2022-02-14 16:45:42,597 end state. edges=[Edge(pc=306, stack=('$phi288.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,597 pending: deque([State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,597 stack: ['$phi302.0']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=302, inst=LOAD_FAST(arg=19, lineno=54)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi302.0']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=304, inst=STORE_FAST(arg=23, lineno=54)
DEBUG 2022-02-14 16:45:42,597 stack ['$phi302.0', '$kept_edges302.1']
DEBUG 2022-02-14 16:45:42,597 end state. edges=[Edge(pc=306, stack=('$phi302.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,597 pending: deque([State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,597 pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,597 pending: deque([State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,597 stack: ['$phi306.0']
DEBUG 2022-02-14 16:45:42,597 dispatch pc=306, inst=LOAD_GLOBAL(arg=13, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=308, inst=LOAD_FAST(arg=23, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=310, inst=LOAD_FAST(arg=0, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=312, inst=LOAD_FAST(arg=1, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=314, inst=LOAD_CONST(arg=1, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=316, inst=LOAD_CONST(arg=0, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=318, inst=LOAD_CONST(arg=0, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$const316.6']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=320, inst=BUILD_SLICE(arg=2, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$const316.6', '$const318.7']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=322, inst=BUILD_TUPLE(arg=2, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$320build_slice.9']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=324, inst=BINARY_SUBSCR(arg=None, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$322build_tuple.10']
DEBUG 2022-02-14 16:45:42,598 dispatch pc=326, inst=LOAD_FAST(arg=7, lineno=56)
DEBUG 2022-02-14 16:45:42,598 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$324binary_subscr.11']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=328, inst=CALL_FUNCTION(arg=4, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$324binary_subscr.11', '$oddV326.12']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=330, inst=UNPACK_SEQUENCE(arg=4, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$328call_function.13']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=332, inst=STORE_FAST(arg=24, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16', '$330unpack_sequence.15', '$330unpack_sequence.14']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=334, inst=STORE_FAST(arg=25, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16', '$330unpack_sequence.15']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=336, inst=STORE_FAST(arg=26, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=338, inst=STORE_FAST(arg=27, lineno=56)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$330unpack_sequence.17']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=340, inst=LOAD_GLOBAL(arg=14, lineno=58)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=342, inst=LOAD_FAST(arg=24, lineno=58)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$340load_global.19']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=344, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$340load_global.19', '$AX_S342.20']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=346, inst=STORE_FAST(arg=28, lineno=58)
DEBUG 2022-02-14 16:45:42,599 stack ['$phi306.0', '$344call_function.21']
DEBUG 2022-02-14 16:45:42,599 dispatch pc=348, inst=LOAD_GLOBAL(arg=12, lineno=60)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi306.0']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=350, inst=LOAD_FAST(arg=15, lineno=60)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi306.0', '$348load_global.22']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=352, inst=CALL_FUNCTION(arg=1, lineno=60)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi306.0', '$348load_global.22', '$n_D350.23']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=354, inst=GET_ITER(arg=None, lineno=60)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi306.0', '$352call_function.24']
DEBUG 2022-02-14 16:45:42,600 end state. edges=[Edge(pc=356, stack=('$phi306.0', '$354get_iter.25'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,600 pending: deque([State(pc_initial=306 nstack_initial=1), State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,600 pending: deque([State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,600 stack: ['$phi356.0', '$phi356.1']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=356, inst=FOR_ITER(arg=242, lineno=60)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi356.0', '$phi356.1']
DEBUG 2022-02-14 16:45:42,600 end state. edges=[Edge(pc=600, stack=('$phi356.0',), blockstack=(), npush=0), Edge(pc=358, stack=('$phi356.0', '$phi356.1', '$356for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,600 pending: deque([State(pc_initial=600 nstack_initial=1), State(pc_initial=358 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,600 stack: ['$phi600.0']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=600, inst=LOAD_FAST(arg=16, lineno=76)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi600.0']
DEBUG 2022-02-14 16:45:42,600 dispatch pc=602, inst=LOAD_FAST(arg=18, lineno=76)
DEBUG 2022-02-14 16:45:42,600 stack ['$phi600.0', '$H_batch600.1']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=604, inst=INPLACE_ADD(arg=None, lineno=76)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi600.0', '$H_batch600.1', '$Hnew602.2']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=606, inst=STORE_FAST(arg=16, lineno=76)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi600.0', '$604inplace_add.3']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=608, inst=JUMP_ABSOLUTE(arg=178, lineno=76)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi600.0']
DEBUG 2022-02-14 16:45:42,601 end state. edges=[Edge(pc=178, stack=('$phi600.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,601 pending: deque([State(pc_initial=358 nstack_initial=3), State(pc_initial=178 nstack_initial=1)])
DEBUG 2022-02-14 16:45:42,601 stack: ['$phi358.0', '$phi358.1', '$phi358.2']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=358, inst=STORE_FAST(arg=29, lineno=60)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$phi358.2']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=360, inst=LOAD_GLOBAL(arg=15, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=362, inst=LOAD_FAST(arg=23, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$360load_global.3']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=364, inst=LOAD_FAST(arg=1, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=366, inst=LOAD_FAST(arg=29, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=368, inst=LOAD_CONST(arg=0, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6']
DEBUG 2022-02-14 16:45:42,601 dispatch pc=370, inst=LOAD_CONST(arg=0, lineno=61)
DEBUG 2022-02-14 16:45:42,601 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$const368.7']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=372, inst=BUILD_SLICE(arg=2, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$const368.7', '$const370.8']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=374, inst=BUILD_TUPLE(arg=2, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$372build_slice.10']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=376, inst=BINARY_SUBSCR(arg=None, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$374build_tuple.11']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=378, inst=CALL_FUNCTION(arg=2, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$376binary_subscr.12']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=380, inst=UNPACK_SEQUENCE(arg=2, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$378call_function.13']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=382, inst=STORE_FAST(arg=25, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$380unpack_sequence.15', '$380unpack_sequence.14']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=384, inst=STORE_FAST(arg=26, lineno=61)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$380unpack_sequence.15']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=386, inst=LOAD_GLOBAL(arg=16, lineno=63)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=388, inst=LOAD_FAST(arg=28, lineno=63)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$386load_global.17']
DEBUG 2022-02-14 16:45:42,602 dispatch pc=390, inst=LOAD_FAST(arg=24, lineno=63)
DEBUG 2022-02-14 16:45:42,602 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=392, inst=LOAD_FAST(arg=25, lineno=63)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=394, inst=LOAD_FAST(arg=26, lineno=63)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=396, inst=LOAD_FAST(arg=10, lineno=63)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=398, inst=CALL_FUNCTION(arg=5, lineno=63)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21', '$N_max396.22']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=400, inst=STORE_FAST(arg=30, lineno=63)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$398call_function.23']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=402, inst=LOAD_GLOBAL(arg=17, lineno=64)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=404, inst=LOAD_FAST(arg=28, lineno=64)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$402load_global.24']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=406, inst=LOAD_FAST(arg=24, lineno=64)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=408, inst=LOAD_FAST(arg=25, lineno=64)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26']
DEBUG 2022-02-14 16:45:42,603 dispatch pc=410, inst=LOAD_FAST(arg=26, lineno=64)
DEBUG 2022-02-14 16:45:42,603 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=412, inst=LOAD_FAST(arg=10, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=414, inst=LOAD_FAST(arg=6, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=416, inst=LOAD_FAST(arg=29, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$oddloop414.30']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$oddloop414.30', '$k416.31']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=420, inst=LOAD_FAST(arg=27, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=422, inst=CALL_FUNCTION(arg=7, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32', '$oddVX_S420.33']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=424, inst=STORE_FAST(arg=31, lineno=64)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$422call_function.34']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=426, inst=LOAD_GLOBAL(arg=12, lineno=66)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=428, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$426load_global.35']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=430, inst=LOAD_FAST(arg=19, lineno=66)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36']
DEBUG 2022-02-14 16:45:42,604 dispatch pc=432, inst=LOAD_CONST(arg=1, lineno=66)
DEBUG 2022-02-14 16:45:42,604 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$kept_edges430.37']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=434, inst=BINARY_SUBSCR(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$kept_edges430.37', '$const432.38']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=436, inst=BINARY_MULTIPLY(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$434binary_subscr.39']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=438, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=440, inst=LOAD_FAST(arg=3, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$const438.41']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=442, inst=BINARY_MULTIPLY(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$const438.41', '$batch_max440.42']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=444, inst=LOAD_FAST(arg=4, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$442binary_multiply.43']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=446, inst=BINARY_ADD(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$442binary_multiply.43', '$odd_cutoff444.44']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=448, inst=LOAD_CONST(arg=3, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$446binary_add.45']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=450, inst=BINARY_ADD(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$446binary_add.45', '$const448.46']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=452, inst=CALL_FUNCTION(arg=2, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$450binary_add.47']
DEBUG 2022-02-14 16:45:42,605 dispatch pc=454, inst=GET_ITER(arg=None, lineno=66)
DEBUG 2022-02-14 16:45:42,605 stack ['$phi358.0', '$phi358.1', '$452call_function.48']
DEBUG 2022-02-14 16:45:42,605 end state. edges=[Edge(pc=456, stack=('$phi358.0', '$phi358.1', '$454get_iter.49'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,606 pending: deque([State(pc_initial=178 nstack_initial=1), State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,606 pending: deque([State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,606 stack: ['$phi456.0', '$phi456.1', '$phi456.2']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=456, inst=FOR_ITER(arg=138, lineno=66)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi456.0', '$phi456.1', '$phi456.2']
DEBUG 2022-02-14 16:45:42,606 end state. edges=[Edge(pc=596, stack=('$phi456.0', '$phi456.1'), blockstack=(), npush=0), Edge(pc=458, stack=('$phi456.0', '$phi456.1', '$phi456.2', '$456for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,606 pending: deque([State(pc_initial=596 nstack_initial=2), State(pc_initial=458 nstack_initial=4)])
DEBUG 2022-02-14 16:45:42,606 stack: ['$phi596.0', '$phi596.1']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=596, inst=JUMP_ABSOLUTE(arg=356, lineno=75)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi596.0', '$phi596.1']
DEBUG 2022-02-14 16:45:42,606 end state. edges=[Edge(pc=356, stack=('$phi596.0', '$phi596.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,606 pending: deque([State(pc_initial=458 nstack_initial=4), State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:45:42,606 stack: ['$phi458.0', '$phi458.1', '$phi458.2', '$phi458.3']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=458, inst=STORE_FAST(arg=32, lineno=66)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$phi458.3']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=460, inst=LOAD_FAST(arg=9, lineno=67)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=462, inst=LOAD_FAST(arg=32, lineno=67)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_fixed460.4']
DEBUG 2022-02-14 16:45:42,606 dispatch pc=464, inst=BINARY_ADD(arg=None, lineno=67)
DEBUG 2022-02-14 16:45:42,606 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_fixed460.4', '$N_det462.5']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=466, inst=STORE_FAST(arg=33, lineno=67)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$464binary_add.6']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=468, inst=LOAD_CONST(arg=6, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=470, inst=LOAD_FAST(arg=33, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=472, inst=LOAD_CONST(arg=2, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$N470.8']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=474, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$N470.8', '$const472.9']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=476, inst=LOAD_FAST(arg=20, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$474binary_floor_divide.10']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=478, inst=BINARY_SUBTRACT(arg=None, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$474binary_floor_divide.10', '$edges_sum476.11']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=480, inst=BINARY_POWER(arg=None, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$478binary_subtract.12']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=482, inst=STORE_FAST(arg=34, lineno=68)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$480binary_power.13']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=484, inst=LOAD_FAST(arg=14, lineno=70)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:45:42,607 dispatch pc=486, inst=LOAD_FAST(arg=32, lineno=70)
DEBUG 2022-02-14 16:45:42,607 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=488, inst=LOAD_CONST(arg=2, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$N_det486.15']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=490, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$N_det486.15', '$const488.16']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=492, inst=LOAD_FAST(arg=19, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=494, inst=LOAD_CONST(arg=1, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$kept_edges492.18']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$kept_edges492.18', '$const494.19']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=498, inst=BUILD_TUPLE(arg=2, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$496binary_subscr.20']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=500, inst=BINARY_SUBSCR(arg=None, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$498build_tuple.21']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=502, inst=LOAD_FAST(arg=21, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$500binary_subscr.22']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=504, inst=BINARY_MULTIPLY(arg=None, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$500binary_subscr.22', '$binom_prod502.23']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=506, inst=STORE_FAST(arg=35, lineno=70)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$504binary_multiply.24']
DEBUG 2022-02-14 16:45:42,608 dispatch pc=508, inst=LOAD_FAST(arg=32, lineno=72)
DEBUG 2022-02-14 16:45:42,608 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=510, inst=LOAD_CONST(arg=2, lineno=72)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_det508.25']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=512, inst=BINARY_MODULO(arg=None, lineno=72)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_det508.25', '$const510.26']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=514, inst=LOAD_CONST(arg=1, lineno=72)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$512binary_modulo.27']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=516, inst=COMPARE_OP(arg=2, lineno=72)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$512binary_modulo.27', '$const514.28']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=518, inst=POP_JUMP_IF_FALSE(arg=560, lineno=72)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$516compare_op.29']
DEBUG 2022-02-14 16:45:42,609 end state. edges=[Edge(pc=522, stack=('$phi458.0', '$phi458.1', '$phi458.2'), blockstack=(), npush=0), Edge(pc=560, stack=('$phi458.0', '$phi458.1', '$phi458.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,609 pending: deque([State(pc_initial=356 nstack_initial=2), State(pc_initial=522 nstack_initial=3), State(pc_initial=560 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,609 pending: deque([State(pc_initial=522 nstack_initial=3), State(pc_initial=560 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,609 stack: ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=522, inst=LOAD_FAST(arg=18, lineno=73)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=524, inst=LOAD_FAST(arg=29, lineno=73)
DEBUG 2022-02-14 16:45:42,609 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3']
DEBUG 2022-02-14 16:45:42,609 dispatch pc=526, inst=LOAD_FAST(arg=32, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$k524.4']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=528, inst=BUILD_TUPLE(arg=2, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$k524.4', '$N_det526.5']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=530, inst=DUP_TOP_TWO(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=532, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$530dup_top_two.7', '$530dup_top_two.8']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=534, inst=LOAD_FAST(arg=35, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=536, inst=LOAD_FAST(arg=34, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$n_det_binom_prod534.10']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=538, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$n_det_binom_prod534.10', '$plus_minus536.11']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=540, inst=LOAD_FAST(arg=30, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=542, inst=LOAD_FAST(arg=33, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13']
DEBUG 2022-02-14 16:45:42,610 dispatch pc=544, inst=LOAD_CONST(arg=2, lineno=73)
DEBUG 2022-02-14 16:45:42,610 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$N542.14']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=546, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$N542.14', '$const544.15']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=548, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$546binary_floor_divide.16']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=550, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$548binary_subscr.17']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=552, inst=INPLACE_ADD(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$550binary_multiply.18']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=554, inst=ROT_THREE(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$552inplace_add.19']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=556, inst=STORE_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$552inplace_add.19', '$Hnew522.3', '$528build_tuple.6']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=558, inst=JUMP_FORWARD(arg=32, lineno=73)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:45:42,611 end state. edges=[Edge(pc=592, stack=('$phi522.0', '$phi522.1', '$phi522.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,611 pending: deque([State(pc_initial=560 nstack_initial=3), State(pc_initial=592 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,611 stack: ['$phi560.0', '$phi560.1', '$phi560.2']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=560, inst=LOAD_FAST(arg=18, lineno=75)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi560.0', '$phi560.1', '$phi560.2']
DEBUG 2022-02-14 16:45:42,611 dispatch pc=562, inst=LOAD_FAST(arg=29, lineno=75)
DEBUG 2022-02-14 16:45:42,611 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=564, inst=LOAD_FAST(arg=32, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$k562.4']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=566, inst=BUILD_TUPLE(arg=2, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$k562.4', '$N_det564.5']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=568, inst=DUP_TOP_TWO(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=570, inst=BINARY_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$568dup_top_two.7', '$568dup_top_two.8']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=572, inst=LOAD_FAST(arg=35, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=574, inst=LOAD_FAST(arg=34, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$n_det_binom_prod572.10']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=576, inst=BINARY_MULTIPLY(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$n_det_binom_prod572.10', '$plus_minus574.11']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=578, inst=LOAD_FAST(arg=31, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=580, inst=LOAD_FAST(arg=33, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$f_odd578.13']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=582, inst=BINARY_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$f_odd578.13', '$N580.14']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=584, inst=BINARY_MULTIPLY(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,612 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$582binary_subscr.15']
DEBUG 2022-02-14 16:45:42,612 dispatch pc=586, inst=INPLACE_ADD(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,613 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$584binary_multiply.16']
DEBUG 2022-02-14 16:45:42,613 dispatch pc=588, inst=ROT_THREE(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,613 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$586inplace_add.17']
DEBUG 2022-02-14 16:45:42,613 dispatch pc=590, inst=STORE_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:45:42,613 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$586inplace_add.17', '$Hnew560.3', '$566build_tuple.6']
DEBUG 2022-02-14 16:45:42,613 end state. edges=[Edge(pc=592, stack=('$phi560.0', '$phi560.1', '$phi560.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,613 pending: deque([State(pc_initial=592 nstack_initial=3), State(pc_initial=592 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,613 stack: ['$phi592.0', '$phi592.1', '$phi592.2']
DEBUG 2022-02-14 16:45:42,613 dispatch pc=592, inst=JUMP_ABSOLUTE(arg=456, lineno=75)
DEBUG 2022-02-14 16:45:42,613 stack ['$phi592.0', '$phi592.1', '$phi592.2']
DEBUG 2022-02-14 16:45:42,613 end state. edges=[Edge(pc=456, stack=('$phi592.0', '$phi592.1', '$phi592.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,613 pending: deque([State(pc_initial=592 nstack_initial=3), State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,613 pending: deque([State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:45:42,613 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:42,613 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=1): {'$phi178.0'},
             State(pc_initial=182 nstack_initial=2): {'$phi182.1'},
             State(pc_initial=252 nstack_initial=2): {'$phi252.1'},
             State(pc_initial=254 nstack_initial=3): {'$phi254.2'},
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=288 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=1): set(),
             State(pc_initial=306 nstack_initial=1): set(),
             State(pc_initial=356 nstack_initial=2): {'$phi356.1'},
             State(pc_initial=358 nstack_initial=3): {'$phi358.2'},
             State(pc_initial=456 nstack_initial=3): {'$phi456.2'},
             State(pc_initial=458 nstack_initial=4): {'$phi458.3'},
             State(pc_initial=522 nstack_initial=3): set(),
             State(pc_initial=560 nstack_initial=3): set(),
             State(pc_initial=592 nstack_initial=3): set(),
             State(pc_initial=596 nstack_initial=2): set(),
             State(pc_initial=600 nstack_initial=1): set(),
             State(pc_initial=610 nstack_initial=0): set(),
             State(pc_initial=616 nstack_initial=0): set(),
             State(pc_initial=630 nstack_initial=1): {'$phi630.0'},
             State(pc_initial=632 nstack_initial=2): {'$phi632.1'},
             State(pc_initial=678 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:42,614 defmap: {'$phi178.0': State(pc_initial=0 nstack_initial=0),
 '$phi182.1': State(pc_initial=178 nstack_initial=1),
 '$phi252.1': State(pc_initial=182 nstack_initial=2),
 '$phi254.2': State(pc_initial=252 nstack_initial=2),
 '$phi356.1': State(pc_initial=306 nstack_initial=1),
 '$phi358.2': State(pc_initial=356 nstack_initial=2),
 '$phi456.2': State(pc_initial=358 nstack_initial=3),
 '$phi458.3': State(pc_initial=456 nstack_initial=3),
 '$phi630.0': State(pc_initial=616 nstack_initial=0),
 '$phi632.1': State(pc_initial=630 nstack_initial=1)}
DEBUG 2022-02-14 16:45:42,614 phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi600.0',
                            State(pc_initial=600 nstack_initial=1))},
             '$phi182.0': {('$phi178.0',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$phi182.0',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi254.0',
                            State(pc_initial=254 nstack_initial=3))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi254.1',
                            State(pc_initial=254 nstack_initial=3))},
             '$phi254.0': {('$phi252.0',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.1': {('$phi252.1',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$phi252.0',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi288.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi302.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi306.0': {('$phi288.0',
                            State(pc_initial=288 nstack_initial=1)),
                           ('$phi302.0',
                            State(pc_initial=302 nstack_initial=1))},
             '$phi356.0': {('$phi306.0',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi596.0',
                            State(pc_initial=596 nstack_initial=2))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi596.1',
                            State(pc_initial=596 nstack_initial=2))},
             '$phi358.0': {('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi358.1': {('$phi356.1',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$phi358.0',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi456.1': {('$phi358.1',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.1',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.2',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi458.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.1': {('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.2': {('$phi456.2',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$phi458.0',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi522.1': {('$phi458.1',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi522.2': {('$phi458.2',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.0': {('$phi458.0',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.1': {('$phi458.1',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.2': {('$phi458.2',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi592.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.2': {('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi596.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi596.1': {('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi600.0': {('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0)),
                           ('$phi632.0',
                            State(pc_initial=632 nstack_initial=2))},
             '$phi632.0': {('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:42,615 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi252.0',
                            State(pc_initial=252 nstack_initial=2)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi252.1',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:42,617 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:42,619 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:42,620 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:42,622 keep phismap: {'$phi178.0': {('$176get_iter.78', State(pc_initial=0 nstack_initial=0))},
 '$phi182.1': {('$178for_iter.2', State(pc_initial=178 nstack_initial=1))},
 '$phi252.1': {('$250get_iter.31', State(pc_initial=182 nstack_initial=2))},
 '$phi254.2': {('$252for_iter.3', State(pc_initial=252 nstack_initial=2))},
 '$phi356.1': {('$354get_iter.25', State(pc_initial=306 nstack_initial=1))},
 '$phi358.2': {('$356for_iter.3', State(pc_initial=356 nstack_initial=2))},
 '$phi456.2': {('$454get_iter.49', State(pc_initial=358 nstack_initial=3))},
 '$phi458.3': {('$456for_iter.4', State(pc_initial=456 nstack_initial=3))},
 '$phi630.0': {('$628get_iter.6', State(pc_initial=616 nstack_initial=0))},
 '$phi632.1': {('$630for_iter.2', State(pc_initial=630 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:42,622 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi178.0': '$176get_iter.78'},
             State(pc_initial=178 nstack_initial=1): {'$phi182.1': '$178for_iter.2'},
             State(pc_initial=182 nstack_initial=2): {'$phi252.1': '$250get_iter.31'},
             State(pc_initial=252 nstack_initial=2): {'$phi254.2': '$252for_iter.3'},
             State(pc_initial=306 nstack_initial=1): {'$phi356.1': '$354get_iter.25'},
             State(pc_initial=356 nstack_initial=2): {'$phi358.2': '$356for_iter.3'},
             State(pc_initial=358 nstack_initial=3): {'$phi456.2': '$454get_iter.49'},
             State(pc_initial=456 nstack_initial=3): {'$phi458.3': '$456for_iter.4'},
             State(pc_initial=616 nstack_initial=0): {'$phi630.0': '$628get_iter.6'},
             State(pc_initial=630 nstack_initial=1): {'$phi632.1': '$630for_iter.2'}})
DEBUG 2022-02-14 16:45:42,622 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:42,622 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$const6.2'}), (8, {'start': '$const4.1', 'stop': '$const6.2', 'step': None, 'res': '$8build_slice.4', 'slicevar': '$8build_slice.3'}), (10, {'res': '$const10.5'}), (12, {'items': ['$8build_slice.4', '$const10.5'], 'res': '$12build_tuple.6'}), (14, {'index': '$12build_tuple.6', 'target': '$D2.0', 'res': '$14binary_subscr.7'}), (16, {'value': '$14binary_subscr.7'}), (18, {'res': '$A18.8'}), (20, {'res': '$const20.9'}), (22, {'res': '$const22.10'}), (24, {'res': '$const24.11'}), (26, {'start': '$const22.10', 'stop': '$const24.11', 'step': None, 'res': '$26build_slice.13', 'slicevar': '$26build_slice.12'}), (28, {'items': ['$const20.9', '$26build_slice.13'], 'res': '$28build_tuple.14'}), (30, {'index': '$28build_tuple.14', 'target': '$A18.8', 'res': '$30binary_subscr.15'}), (32, {'value': '$30binary_subscr.15'}), (34, {'res': '$A34.16'}), (36, {'item': '$A34.16', 'res': '$36load_attr.17'}), (38, {'res': '$const38.18'}), (40, {'index': '$const38.18', 'target': '$36load_attr.17', 'res': '$40binary_subscr.19'}), (42, {'value': '$40binary_subscr.19'}), (44, {'res': '$const44.20'}), (46, {'res': '$fixed_edge_reps46.21'}), (48, {'item': '$fixed_edge_reps46.21', 'res': '$48load_method.22'}), (50, {'func': '$48load_method.22', 'args': [], 'res': '$50call_method.23'}), (52, {'lhs': '$const44.20', 'rhs': '$50call_method.23', 'res': '$52binary_multiply.24'}), (54, {'value': '$52binary_multiply.24'}), (56, {'res': '$N_fixed56.25'}), (58, {'res': '$const58.26'}), (60, {'res': '$batch_max60.27'}), (62, {'lhs': '$const58.26', 'rhs': '$batch_max60.27', 'res': '$62binary_multiply.28'}), (64, {'lhs': '$N_fixed56.25', 'rhs': '$62binary_multiply.28', 'res': '$64binary_add.29'}), (66, {'res': '$odd_cutoff66.30'}), (68, {'lhs': '$64binary_add.29', 'rhs': '$odd_cutoff66.30', 'res': '$68binary_add.31'}), (70, {'value': '$68binary_add.31'}), (72, {'res': '$72load_global.32'}), (74, {'item': '$72load_global.32', 'res': '$74load_method.33'}), (76, {'res': '$76load_global.34'}), (78, {'item': '$76load_global.34', 'res': '$78load_method.35'}), (80, {'res': '$batch_max80.36'}), (82, {'items': ['$batch_max80.36'], 'res': '$82build_list.37'}), (84, {'func': '$78load_method.35', 'args': ['$82build_list.37'], 'res': '$84call_method.38'}), (86, {'res': '$fixed_edge_reps86.39'}), (88, {'items': ['$84call_method.38', '$fixed_edge_reps86.39'], 'res': '$88build_tuple.40'}), (90, {'func': '$74load_method.33', 'args': ['$88build_tuple.40'], 'res': '$90call_method.41'}), (92, {'value': '$90call_method.41'}), (94, {'res': '$94load_global.42'}), (96, {'item': '$94load_global.42', 'res': '$96load_method.43'}), (98, {'res': '$edge_reps98.44'}), (100, {'res': '$const100.45'}), (102, {'lhs': '$edge_reps98.44', 'rhs': '$const100.45', 'res': '$102binary_add.46'}), (104, {'func': '$96load_method.43', 'args': ['$102binary_add.46'], 'res': '$104call_method.47'}), (106, {'value': '$104call_method.47'}), (108, {'res': '$edge_reps108.48'}), (110, {'item': '$edge_reps108.48', 'res': '$110load_method.49'}), (112, {'func': '$110load_method.49', 'args': [], 'res': '$112call_method.50'}), (114, {'res': '$odd_cutoff114.51'}), (116, {'lhs': '$112call_method.50', 'rhs': '$odd_cutoff114.51', 'res': '$116binary_add.52'}), (118, {'value': '$116binary_add.52'}), (120, {'res': '$120load_global.53'}), (122, {'res': '$max_binom122.54'}), (124, {'func': '$120load_global.53', 'args': ['$max_binom122.54'], 'res': '$124call_function.55'}), (126, {'value': '$124call_function.55'}), (128, {'res': '$D128.56'}), (130, {'item': '$D128.56', 'res': '$130load_attr.57'}), (132, {'res': '$const132.58'}), (134, {'index': '$const132.58', 'target': '$130load_attr.57', 'res': '$134binary_subscr.59'}), (136, {'value': '$134binary_subscr.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$n_D142.62'}), (144, {'res': '$const144.63'}), (146, {'res': '$batch_max146.64'}), (148, {'lhs': '$const144.63', 'rhs': '$batch_max146.64', 'res': '$148binary_multiply.65'}), (150, {'res': '$odd_cutoff150.66'}), (152, {'lhs': '$148binary_multiply.65', 'rhs': '$odd_cutoff150.66', 'res': '$152binary_add.67'}), (154, {'res': '$const154.68'}), (156, {'lhs': '$152binary_add.67', 'rhs': '$const154.68', 'res': '$156binary_add.69'}), (158, {'items': ['$n_D142.62', '$156binary_add.69'], 'res': '$158build_tuple.70'}), (160, {'res': '$160load_global.71'}), (162, {'item': '$160load_global.71', 'res': '$162load_attr.72'}), (164, {'res': '$const164.73'}), (166, {'func': '$140load_attr.61', 'args': ['$158build_tuple.70', '$162load_attr.72'], 'names': '$const164.73', 'res': '$166call_function_kw.74'}), (168, {'value': '$166call_function_kw.74'}), (170, {'res': '$170load_global.75'}), (172, {'res': '$steps172.76'}), (174, {'func': '$170load_global.75', 'args': ['$steps172.76'], 'res': '$174call_function.77'}), (176, {'value': '$174call_function.77', 'res': '$176get_iter.78'})), outgoing_phis={'$phi178.0': '$176get_iter.78'}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: ('$176get_iter.78',)})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=178 nstack_initial=1):
AdaptBlockInfo(insts=((178, {'iterator': '$phi178.0', 'pair': '$178for_iter.1', 'indval': '$178for_iter.2', 'pred': '$178for_iter.3'}),), outgoing_phis={'$phi182.1': '$178for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={610: (), 182: ('$phi178.0', '$178for_iter.2')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=182 nstack_initial=2):
AdaptBlockInfo(insts=((182, {'value': '$phi182.1'}), (184, {'res': '$184load_global.2'}), (186, {'item': '$184load_global.2', 'res': '$186load_attr.3'}), (188, {'res': '$n_D188.4'}), (190, {'res': '$const190.5'}), (192, {'res': '$batch_max192.6'}), (194, {'lhs': '$const190.5', 'rhs': '$batch_max192.6', 'res': '$194binary_multiply.7'}), (196, {'res': '$odd_cutoff196.8'}), (198, {'lhs': '$194binary_multiply.7', 'rhs': '$odd_cutoff196.8', 'res': '$198binary_add.9'}), (200, {'res': '$const200.10'}), (202, {'lhs': '$198binary_add.9', 'rhs': '$const200.10', 'res': '$202binary_add.11'}), (204, {'items': ['$n_D188.4', '$202binary_add.11'], 'res': '$204build_tuple.12'}), (206, {'res': '$206load_global.13'}), (208, {'item': '$206load_global.13', 'res': '$208load_attr.14'}), (210, {'res': '$const210.15'}), (212, {'func': '$186load_attr.3', 'args': ['$204build_tuple.12', '$208load_attr.14'], 'names': '$const210.15', 'res': '$212call_function_kw.16'}), (214, {'value': '$212call_function_kw.16'}), (216, {'res': '$216load_global.17'}), (218, {'res': '$j218.18'}), (220, {'res': '$edge_reps220.19'}), (222, {'func': '$216load_global.17', 'args': ['$j218.18', '$edge_reps220.19'], 'res': '$222call_function.20'}), (224, {'value': '$222call_function.20'}), (226, {'res': '$kept_edges226.21'}), (228, {'item': '$kept_edges226.21', 'res': '$228load_method.22'}), (230, {'func': '$228load_method.22', 'args': [], 'res': '$230call_method.23'}), (232, {'value': '$230call_method.23'}), (234, {'res': '$const234.24'}), (236, {'value': '$const234.24'}), (238, {'res': '$238load_global.25'}), (240, {'res': '$const240.26'}), (242, {'res': '$n242.27'}), (244, {'res': '$const244.28'}), (246, {'lhs': '$n242.27', 'rhs': '$const244.28', 'res': '$246binary_floor_divide.29'}), (248, {'func': '$238load_global.25', 'args': ['$const240.26', '$246binary_floor_divide.29'], 'res': '$248call_function.30'}), (250, {'value': '$248call_function.30', 'res': '$250get_iter.31'})), outgoing_phis={'$phi252.1': '$250get_iter.31'}, blockstack=(), active_try_block=None, outgoing_edgepushed={252: ('$phi182.0', '$250get_iter.31')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=252 nstack_initial=2):
AdaptBlockInfo(insts=((252, {'iterator': '$phi252.1', 'pair': '$252for_iter.2', 'indval': '$252for_iter.3', 'pred': '$252for_iter.4'}),), outgoing_phis={'$phi254.2': '$252for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi252.0',), 254: ('$phi252.0', '$phi252.1', '$252for_iter.3')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=254 nstack_initial=3):
AdaptBlockInfo(insts=((254, {'value': '$phi254.2'}), (256, {'res': '$binom_prod256.3'}), (258, {'res': '$binoms258.4'}), (260, {'res': '$edge_reps260.5'}), (262, {'res': '$i262.6'}), (264, {'index': '$i262.6', 'target': '$edge_reps260.5', 'res': '$264binary_subscr.7'}), (266, {'res': '$kept_edges266.8'}), (268, {'res': '$i268.9'}), (270, {'index': '$i268.9', 'target': '$kept_edges266.8', 'res': '$270binary_subscr.10'}), (272, {'items': ['$264binary_subscr.7', '$270binary_subscr.10'], 'res': '$272build_tuple.11'}), (274, {'index': '$272build_tuple.11', 'target': '$binoms258.4', 'res': '$274binary_subscr.12'}), (276, {'lhs': '$binom_prod256.3', 'rhs': '$274binary_subscr.12', 'res': '$276inplace_multiply.13'}), (278, {'value': '$276inplace_multiply.13'}), (280, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={252: ('$phi254.0', '$phi254.1')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$glynn282.1'}), (284, {'pred': '$glynn282.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={288: ('$phi282.0',), 302: ('$phi282.0',)})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=288 nstack_initial=1):
AdaptBlockInfo(insts=((288, {'res': '$const288.1'}), (290, {'res': '$kept_edges290.2'}), (292, {'lhs': '$const288.1', 'rhs': '$kept_edges290.2', 'res': '$292binary_multiply.3'}), (294, {'res': '$edge_reps294.4'}), (296, {'lhs': '$292binary_multiply.3', 'rhs': '$edge_reps294.4', 'res': '$296binary_subtract.5'}), (298, {'value': '$296binary_subtract.5'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={306: ('$phi288.0',)})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=302 nstack_initial=1):
AdaptBlockInfo(insts=((302, {'res': '$kept_edges302.1'}), (304, {'value': '$kept_edges302.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={306: ('$phi302.0',)})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=306 nstack_initial=1):
AdaptBlockInfo(insts=((306, {'res': '$306load_global.1'}), (308, {'res': '$delta308.2'}), (310, {'res': '$A310.3'}), (312, {'res': '$D312.4'}), (314, {'res': '$const314.5'}), (316, {'res': '$const316.6'}), (318, {'res': '$const318.7'}), (320, {'start': '$const316.6', 'stop': '$const318.7', 'step': None, 'res': '$320build_slice.9', 'slicevar': '$320build_slice.8'}), (322, {'items': ['$const314.5', '$320build_slice.9'], 'res': '$322build_tuple.10'}), (324, {'index': '$322build_tuple.10', 'target': '$D312.4', 'res': '$324binary_subscr.11'}), (326, {'res': '$oddV326.12'}), (328, {'func': '$306load_global.1', 'args': ['$delta308.2', '$A310.3', '$324binary_subscr.11', '$oddV326.12'], 'res': '$328call_function.13'}), (330, {'iterable': '$328call_function.13', 'stores': ['$330unpack_sequence.14', '$330unpack_sequence.15', '$330unpack_sequence.16', '$330unpack_sequence.17'], 'tupleobj': '$330unpack_sequence.18'}), (332, {'value': '$330unpack_sequence.14'}), (334, {'value': '$330unpack_sequence.15'}), (336, {'value': '$330unpack_sequence.16'}), (338, {'value': '$330unpack_sequence.17'}), (340, {'res': '$340load_global.19'}), (342, {'res': '$AX_S342.20'}), (344, {'func': '$340load_global.19', 'args': ['$AX_S342.20'], 'res': '$344call_function.21'}), (346, {'value': '$344call_function.21'}), (348, {'res': '$348load_global.22'}), (350, {'res': '$n_D350.23'}), (352, {'func': '$348load_global.22', 'args': ['$n_D350.23'], 'res': '$352call_function.24'}), (354, {'value': '$352call_function.24', 'res': '$354get_iter.25'})), outgoing_phis={'$phi356.1': '$354get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: ('$phi306.0', '$354get_iter.25')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=356 nstack_initial=2):
AdaptBlockInfo(insts=((356, {'iterator': '$phi356.1', 'pair': '$356for_iter.2', 'indval': '$356for_iter.3', 'pred': '$356for_iter.4'}),), outgoing_phis={'$phi358.2': '$356for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={600: ('$phi356.0',), 358: ('$phi356.0', '$phi356.1', '$356for_iter.3')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=358 nstack_initial=3):
AdaptBlockInfo(insts=((358, {'value': '$phi358.2'}), (360, {'res': '$360load_global.3'}), (362, {'res': '$delta362.4'}), (364, {'res': '$D364.5'}), (366, {'res': '$k366.6'}), (368, {'res': '$const368.7'}), (370, {'res': '$const370.8'}), (372, {'start': '$const368.7', 'stop': '$const370.8', 'step': None, 'res': '$372build_slice.10', 'slicevar': '$372build_slice.9'}), (374, {'items': ['$k366.6', '$372build_slice.10'], 'res': '$374build_tuple.11'}), (376, {'index': '$374build_tuple.11', 'target': '$D364.5', 'res': '$376binary_subscr.12'}), (378, {'func': '$360load_global.3', 'args': ['$delta362.4', '$376binary_subscr.12'], 'res': '$378call_function.13'}), (380, {'iterable': '$378call_function.13', 'stores': ['$380unpack_sequence.14', '$380unpack_sequence.15'], 'tupleobj': '$380unpack_sequence.16'}), (382, {'value': '$380unpack_sequence.14'}), (384, {'value': '$380unpack_sequence.15'}), (386, {'res': '$386load_global.17'}), (388, {'res': '$E388.18'}), (390, {'res': '$AX_S390.19'}), (392, {'res': '$XD_S392.20'}), (394, {'res': '$D_S394.21'}), (396, {'res': '$N_max396.22'}), (398, {'func': '$386load_global.17', 'args': ['$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21', '$N_max396.22'], 'res': '$398call_function.23'}), (400, {'value': '$398call_function.23'}), (402, {'res': '$402load_global.24'}), (404, {'res': '$E404.25'}), (406, {'res': '$AX_S406.26'}), (408, {'res': '$XD_S408.27'}), (410, {'res': '$D_S410.28'}), (412, {'res': '$N_max412.29'}), (414, {'res': '$oddloop414.30'}), (416, {'res': '$k416.31'}), (418, {'index': '$k416.31', 'target': '$oddloop414.30', 'res': '$418binary_subscr.32'}), (420, {'res': '$oddVX_S420.33'}), (422, {'func': '$402load_global.24', 'args': ['$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32', '$oddVX_S420.33'], 'res': '$422call_function.34'}), (424, {'value': '$422call_function.34'}), (426, {'res': '$426load_global.35'}), (428, {'res': '$const428.36'}), (430, {'res': '$kept_edges430.37'}), (432, {'res': '$const432.38'}), (434, {'index': '$const432.38', 'target': '$kept_edges430.37', 'res': '$434binary_subscr.39'}), (436, {'lhs': '$const428.36', 'rhs': '$434binary_subscr.39', 'res': '$436binary_multiply.40'}), (438, {'res': '$const438.41'}), (440, {'res': '$batch_max440.42'}), (442, {'lhs': '$const438.41', 'rhs': '$batch_max440.42', 'res': '$442binary_multiply.43'}), (444, {'res': '$odd_cutoff444.44'}), (446, {'lhs': '$442binary_multiply.43', 'rhs': '$odd_cutoff444.44', 'res': '$446binary_add.45'}), (448, {'res': '$const448.46'}), (450, {'lhs': '$446binary_add.45', 'rhs': '$const448.46', 'res': '$450binary_add.47'}), (452, {'func': '$426load_global.35', 'args': ['$436binary_multiply.40', '$450binary_add.47'], 'res': '$452call_function.48'}), (454, {'value': '$452call_function.48', 'res': '$454get_iter.49'})), outgoing_phis={'$phi456.2': '$454get_iter.49'}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi358.0', '$phi358.1', '$454get_iter.49')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=456 nstack_initial=3):
AdaptBlockInfo(insts=((456, {'iterator': '$phi456.2', 'pair': '$456for_iter.3', 'indval': '$456for_iter.4', 'pred': '$456for_iter.5'}),), outgoing_phis={'$phi458.3': '$456for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={596: ('$phi456.0', '$phi456.1'), 458: ('$phi456.0', '$phi456.1', '$phi456.2', '$456for_iter.4')})
DEBUG 2022-02-14 16:45:42,623 block_infos State(pc_initial=458 nstack_initial=4):
AdaptBlockInfo(insts=((458, {'value': '$phi458.3'}), (460, {'res': '$N_fixed460.4'}), (462, {'res': '$N_det462.5'}), (464, {'lhs': '$N_fixed460.4', 'rhs': '$N_det462.5', 'res': '$464binary_add.6'}), (466, {'value': '$464binary_add.6'}), (468, {'res': '$const468.7'}), (470, {'res': '$N470.8'}), (472, {'res': '$const472.9'}), (474, {'lhs': '$N470.8', 'rhs': '$const472.9', 'res': '$474binary_floor_divide.10'}), (476, {'res': '$edges_sum476.11'}), (478, {'lhs': '$474binary_floor_divide.10', 'rhs': '$edges_sum476.11', 'res': '$478binary_subtract.12'}), (480, {'lhs': '$const468.7', 'rhs': '$478binary_subtract.12', 'res': '$480binary_power.13'}), (482, {'value': '$480binary_power.13'}), (484, {'res': '$binoms484.14'}), (486, {'res': '$N_det486.15'}), (488, {'res': '$const488.16'}), (490, {'lhs': '$N_det486.15', 'rhs': '$const488.16', 'res': '$490binary_floor_divide.17'}), (492, {'res': '$kept_edges492.18'}), (494, {'res': '$const494.19'}), (496, {'index': '$const494.19', 'target': '$kept_edges492.18', 'res': '$496binary_subscr.20'}), (498, {'items': ['$490binary_floor_divide.17', '$496binary_subscr.20'], 'res': '$498build_tuple.21'}), (500, {'index': '$498build_tuple.21', 'target': '$binoms484.14', 'res': '$500binary_subscr.22'}), (502, {'res': '$binom_prod502.23'}), (504, {'lhs': '$500binary_subscr.22', 'rhs': '$binom_prod502.23', 'res': '$504binary_multiply.24'}), (506, {'value': '$504binary_multiply.24'}), (508, {'res': '$N_det508.25'}), (510, {'res': '$const510.26'}), (512, {'lhs': '$N_det508.25', 'rhs': '$const510.26', 'res': '$512binary_modulo.27'}), (514, {'res': '$const514.28'}), (516, {'lhs': '$512binary_modulo.27', 'rhs': '$const514.28', 'res': '$516compare_op.29'}), (518, {'pred': '$516compare_op.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi458.0', '$phi458.1', '$phi458.2'), 560: ('$phi458.0', '$phi458.1', '$phi458.2')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=522 nstack_initial=3):
AdaptBlockInfo(insts=((522, {'res': '$Hnew522.3'}), (524, {'res': '$k524.4'}), (526, {'res': '$N_det526.5'}), (528, {'items': ['$k524.4', '$N_det526.5'], 'res': '$528build_tuple.6'}), (530, {'orig': ['$Hnew522.3', '$528build_tuple.6'], 'duped': ['$530dup_top_two.7', '$530dup_top_two.8']}), (532, {'index': '$530dup_top_two.8', 'target': '$530dup_top_two.7', 'res': '$532binary_subscr.9'}), (534, {'res': '$n_det_binom_prod534.10'}), (536, {'res': '$plus_minus536.11'}), (538, {'lhs': '$n_det_binom_prod534.10', 'rhs': '$plus_minus536.11', 'res': '$538binary_multiply.12'}), (540, {'res': '$f_even540.13'}), (542, {'res': '$N542.14'}), (544, {'res': '$const544.15'}), (546, {'lhs': '$N542.14', 'rhs': '$const544.15', 'res': '$546binary_floor_divide.16'}), (548, {'index': '$546binary_floor_divide.16', 'target': '$f_even540.13', 'res': '$548binary_subscr.17'}), (550, {'lhs': '$538binary_multiply.12', 'rhs': '$548binary_subscr.17', 'res': '$550binary_multiply.18'}), (552, {'lhs': '$532binary_subscr.9', 'rhs': '$550binary_multiply.18', 'res': '$552inplace_add.19'}), (556, {'target': '$Hnew522.3', 'index': '$528build_tuple.6', 'value': '$552inplace_add.19'}), (558, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi522.0', '$phi522.1', '$phi522.2')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=560 nstack_initial=3):
AdaptBlockInfo(insts=((560, {'res': '$Hnew560.3'}), (562, {'res': '$k562.4'}), (564, {'res': '$N_det564.5'}), (566, {'items': ['$k562.4', '$N_det564.5'], 'res': '$566build_tuple.6'}), (568, {'orig': ['$Hnew560.3', '$566build_tuple.6'], 'duped': ['$568dup_top_two.7', '$568dup_top_two.8']}), (570, {'index': '$568dup_top_two.8', 'target': '$568dup_top_two.7', 'res': '$570binary_subscr.9'}), (572, {'res': '$n_det_binom_prod572.10'}), (574, {'res': '$plus_minus574.11'}), (576, {'lhs': '$n_det_binom_prod572.10', 'rhs': '$plus_minus574.11', 'res': '$576binary_multiply.12'}), (578, {'res': '$f_odd578.13'}), (580, {'res': '$N580.14'}), (582, {'index': '$N580.14', 'target': '$f_odd578.13', 'res': '$582binary_subscr.15'}), (584, {'lhs': '$576binary_multiply.12', 'rhs': '$582binary_subscr.15', 'res': '$584binary_multiply.16'}), (586, {'lhs': '$570binary_subscr.9', 'rhs': '$584binary_multiply.16', 'res': '$586inplace_add.17'}), (590, {'target': '$Hnew560.3', 'index': '$566build_tuple.6', 'value': '$586inplace_add.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi560.0', '$phi560.1', '$phi560.2')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=592 nstack_initial=3):
AdaptBlockInfo(insts=((592, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi592.0', '$phi592.1', '$phi592.2')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=596 nstack_initial=2):
AdaptBlockInfo(insts=((596, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: ('$phi596.0', '$phi596.1')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=600 nstack_initial=1):
AdaptBlockInfo(insts=((600, {'res': '$H_batch600.1'}), (602, {'res': '$Hnew602.2'}), (604, {'lhs': '$H_batch600.1', 'rhs': '$Hnew602.2', 'res': '$604inplace_add.3'}), (606, {'value': '$604inplace_add.3'}), (608, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: ('$phi600.0',)})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=610 nstack_initial=0):
AdaptBlockInfo(insts=((610, {'res': '$glynn610.0'}), (612, {'pred': '$glynn610.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={616: (), 678: ()})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=616 nstack_initial=0):
AdaptBlockInfo(insts=((616, {'res': '$616load_global.0'}), (618, {'res': '$H_batch618.1'}), (620, {'item': '$H_batch618.1', 'res': '$620load_attr.2'}), (622, {'res': '$const622.3'}), (624, {'index': '$const622.3', 'target': '$620load_attr.2', 'res': '$624binary_subscr.4'}), (626, {'func': '$616load_global.0', 'args': ['$624binary_subscr.4'], 'res': '$626call_function.5'}), (628, {'value': '$626call_function.5', 'res': '$628get_iter.6'})), outgoing_phis={'$phi630.0': '$628get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={630: ('$628get_iter.6',)})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=630 nstack_initial=1):
AdaptBlockInfo(insts=((630, {'iterator': '$phi630.0', 'pair': '$630for_iter.1', 'indval': '$630for_iter.2', 'pred': '$630for_iter.3'}),), outgoing_phis={'$phi632.1': '$630for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={678: (), 632: ('$phi630.0', '$630for_iter.2')})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=632 nstack_initial=2):
AdaptBlockInfo(insts=((632, {'value': '$phi632.1'}), (634, {'res': '$N_fixed634.2'}), (636, {'res': '$j636.3'}), (638, {'lhs': '$N_fixed634.2', 'rhs': '$j636.3', 'res': '$638binary_add.4'}), (640, {'value': '$638binary_add.4'}), (642, {'res': '$H_batch642.5'}), (644, {'res': '$const644.6'}), (646, {'res': '$const646.7'}), (648, {'start': '$const644.6', 'stop': '$const646.7', 'step': None, 'res': '$648build_slice.9', 'slicevar': '$648build_slice.8'}), (650, {'res': '$j650.10'}), (652, {'items': ['$648build_slice.9', '$j650.10'], 'res': '$652build_tuple.11'}), (654, {'orig': ['$H_batch642.5', '$652build_tuple.11'], 'duped': ['$654dup_top_two.12', '$654dup_top_two.13']}), (656, {'index': '$654dup_top_two.13', 'target': '$654dup_top_two.12', 'res': '$656binary_subscr.14'}), (658, {'res': '$const658.15'}), (660, {'res': '$x660.16'}), (662, {'res': '$const662.17'}), (664, {'lhs': '$x660.16', 'rhs': '$const662.17', 'res': '$664binary_floor_divide.18'}), (666, {'lhs': '$const658.15', 'rhs': '$664binary_floor_divide.18', 'res': '$666binary_power.19'}), (668, {'lhs': '$656binary_subscr.14', 'rhs': '$666binary_power.19', 'res': '$668inplace_multiply.20'}), (672, {'target': '$H_batch642.5', 'index': '$652build_tuple.11', 'value': '$668inplace_multiply.20'}), (674, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={630: ('$phi632.0',)})
DEBUG 2022-02-14 16:45:42,624 block_infos State(pc_initial=678 nstack_initial=0):
AdaptBlockInfo(insts=((678, {'res': '$H_batch678.0'}), (680, {'retval': '$H_batch678.0', 'castval': '$680return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:42,631 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8build_slice.3 = global(slice: <class 'slice'>) ['$8build_slice.3']
    $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None) ['$8build_slice.3', '$8build_slice.4', '$const4.1', '$const6.2']
    $const10.5 = const(int, 0)               ['$const10.5']
    $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)]) ['$12build_tuple.6', '$8build_slice.4', '$const10.5']
    oddloop = getitem(value=D, index=$12build_tuple.6, fn=<built-in function getitem>) ['$12build_tuple.6', 'D', 'oddloop']
    $const20.9 = const(int, 0)               ['$const20.9']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $const24.11 = const(NoneType, None)      ['$const24.11']
    $26build_slice.12 = global(slice: <class 'slice'>) ['$26build_slice.12']
    $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None) ['$26build_slice.12', '$26build_slice.13', '$const22.10', '$const24.11']
    $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)]) ['$26build_slice.13', '$28build_tuple.14', '$const20.9']
    oddV = getitem(value=A, index=$28build_tuple.14, fn=<built-in function getitem>) ['$28build_tuple.14', 'A', 'oddV']
    $36load_attr.17 = getattr(value=A, attr=shape) ['$36load_attr.17', 'A']
    $const38.18 = const(int, 0)              ['$const38.18']
    n = getitem(value=$36load_attr.17, index=$const38.18, fn=<built-in function getitem>) ['$36load_attr.17', '$const38.18', 'n']
    $const44.20 = const(int, 2)              ['$const44.20']
    $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum) ['$48load_method.22', 'fixed_edge_reps']
    $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None) ['$48load_method.22', '$50call_method.23']
    N_fixed = $const44.20 * $50call_method.23 ['$50call_method.23', '$const44.20', 'N_fixed']
    $const58.26 = const(int, 2)              ['$const58.26']
    $62binary_multiply.28 = $const58.26 * batch_max ['$62binary_multiply.28', '$const58.26', 'batch_max']
    $64binary_add.29 = N_fixed + $62binary_multiply.28 ['$62binary_multiply.28', '$64binary_add.29', 'N_fixed']
    N_max = $64binary_add.29 + odd_cutoff    ['$64binary_add.29', 'N_max', 'odd_cutoff']
    $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$72load_global.32']
    $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate) ['$72load_global.32', '$74load_method.33']
    $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$76load_global.34']
    $78load_method.35 = getattr(value=$76load_global.34, attr=array) ['$76load_global.34', '$78load_method.35']
    $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)]) ['$82build_list.37', 'batch_max']
    $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$78load_method.35', '$82build_list.37', '$84call_method.38']
    $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)]) ['$84call_method.38', '$88build_tuple.40', 'fixed_edge_reps']
    edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$74load_method.33', '$88build_tuple.40', 'edge_reps']
    $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$94load_global.42']
    $96load_method.43 = getattr(value=$94load_global.42, attr=prod) ['$94load_global.42', '$96load_method.43']
    $const100.45 = const(int, 1)             ['$const100.45']
    $102binary_add.46 = edge_reps + $const100.45 ['$102binary_add.46', '$const100.45', 'edge_reps']
    steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None) ['$102binary_add.46', '$96load_method.43', 'steps']
    $110load_method.49 = getattr(value=edge_reps, attr=max) ['$110load_method.49', 'edge_reps']
    $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None) ['$110load_method.49', '$112call_method.50']
    max_binom = $112call_method.50 + odd_cutoff ['$112call_method.50', 'max_binom', 'odd_cutoff']
    $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>)) ['$120load_global.53']
    binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None) ['$120load_global.53', 'binoms', 'max_binom']
    $130load_attr.57 = getattr(value=D, attr=shape) ['$130load_attr.57', 'D']
    $const132.58 = const(int, 0)             ['$const132.58']
    n_D = getitem(value=$130load_attr.57, index=$const132.58, fn=<built-in function getitem>) ['$130load_attr.57', '$const132.58', 'n_D']
    $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros) ['$138load_global.60', '$140load_attr.61']
    $const144.63 = const(int, 2)             ['$const144.63']
    $148binary_multiply.65 = $const144.63 * batch_max ['$148binary_multiply.65', '$const144.63', 'batch_max']
    $152binary_add.67 = $148binary_multiply.65 + odd_cutoff ['$148binary_multiply.65', '$152binary_add.67', 'odd_cutoff']
    $const154.68 = const(int, 1)             ['$const154.68']
    $156binary_add.69 = $152binary_add.67 + $const154.68 ['$152binary_add.67', '$156binary_add.69', '$const154.68']
    $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)]) ['$156binary_add.69', '$158build_tuple.70', 'n_D']
    $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$160load_global.71']
    $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128) ['$160load_global.71', '$162load_attr.72']
    H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None) ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72', 'H_batch']
    $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>) ['$170load_global.75']
    $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None) ['$170load_global.75', '$174call_function.77', 'steps']
    $176get_iter.78 = getiter(value=$174call_function.77) ['$174call_function.77', '$176get_iter.78']
    $phi178.0 = $176get_iter.78              ['$176get_iter.78', '$phi178.0']
    jump 178                                 []
label 178:
    $178for_iter.1 = iternext(value=$phi178.0) ['$178for_iter.1', '$phi178.0']
    $178for_iter.2 = pair_first(value=$178for_iter.1) ['$178for_iter.1', '$178for_iter.2']
    $178for_iter.3 = pair_second(value=$178for_iter.1) ['$178for_iter.1', '$178for_iter.3']
    $phi182.1 = $178for_iter.2               ['$178for_iter.2', '$phi182.1']
    branch $178for_iter.3, 182, 610          ['$178for_iter.3']
label 182:
    j = $phi182.1                            ['$phi182.1', 'j']
    $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$184load_global.2']
    $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros) ['$184load_global.2', '$186load_attr.3']
    $const190.5 = const(int, 2)              ['$const190.5']
    $194binary_multiply.7 = $const190.5 * batch_max ['$194binary_multiply.7', '$const190.5', 'batch_max']
    $198binary_add.9 = $194binary_multiply.7 + odd_cutoff ['$194binary_multiply.7', '$198binary_add.9', 'odd_cutoff']
    $const200.10 = const(int, 1)             ['$const200.10']
    $202binary_add.11 = $198binary_add.9 + $const200.10 ['$198binary_add.9', '$202binary_add.11', '$const200.10']
    $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)]) ['$202binary_add.11', '$204build_tuple.12', 'n_D']
    $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$206load_global.13']
    $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128) ['$206load_global.13', '$208load_attr.14']
    Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None) ['$186load_attr.3', '$204build_tuple.12', '$208load_attr.14', 'Hnew']
    $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>)) ['$216load_global.17']
    kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$216load_global.17', 'edge_reps', 'j', 'kept_edges']
    $228load_method.22 = getattr(value=kept_edges, attr=sum) ['$228load_method.22', 'kept_edges']
    edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None) ['$228load_method.22', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $238load_global.25 = global(range: <class 'range'>) ['$238load_global.25']
    $const240.26 = const(int, 1)             ['$const240.26']
    $const244.28 = const(int, 2)             ['$const244.28']
    $246binary_floor_divide.29 = n // $const244.28 ['$246binary_floor_divide.29', '$const244.28', 'n']
    $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None) ['$238load_global.25', '$246binary_floor_divide.29', '$248call_function.30', '$const240.26']
    $250get_iter.31 = getiter(value=$248call_function.30) ['$248call_function.30', '$250get_iter.31']
    $phi252.1 = $250get_iter.31              ['$250get_iter.31', '$phi252.1']
    jump 252                                 []
label 252:
    $252for_iter.2 = iternext(value=$phi252.1) ['$252for_iter.2', '$phi252.1']
    $252for_iter.3 = pair_first(value=$252for_iter.2) ['$252for_iter.2', '$252for_iter.3']
    $252for_iter.4 = pair_second(value=$252for_iter.2) ['$252for_iter.2', '$252for_iter.4']
    $phi254.2 = $252for_iter.3               ['$252for_iter.3', '$phi254.2']
    branch $252for_iter.4, 254, 282          ['$252for_iter.4']
label 254:
    i = $phi254.2                            ['$phi254.2', 'i']
    $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$264binary_subscr.7', 'edge_reps', 'i']
    $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$270binary_subscr.10', 'i', 'kept_edges']
    $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)]) ['$264binary_subscr.7', '$270binary_subscr.10', '$272build_tuple.11']
    $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>) ['$272build_tuple.11', '$274binary_subscr.12', 'binoms']
    $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$274binary_subscr.12', '$276inplace_multiply.13', 'binom_prod']
    binom_prod = $276inplace_multiply.13     ['$276inplace_multiply.13', 'binom_prod']
    jump 252                                 []
label 282:
    bool284 = global(bool: <class 'bool'>)   ['bool284']
    $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None) ['$284pred', 'bool284', 'glynn']
    branch $284pred, 288, 302                ['$284pred']
label 288:
    $const288.1 = const(int, 2)              ['$const288.1']
    $292binary_multiply.3 = $const288.1 * kept_edges ['$292binary_multiply.3', '$const288.1', 'kept_edges']
    delta = $292binary_multiply.3 - edge_reps ['$292binary_multiply.3', 'delta', 'edge_reps']
    jump 306                                 []
label 302:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 306                                 []
label 306:
    $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>)) ['$306load_global.1']
    $const314.5 = const(int, 0)              ['$const314.5']
    $const316.6 = const(NoneType, None)      ['$const316.6']
    $const318.7 = const(NoneType, None)      ['$const318.7']
    $320build_slice.8 = global(slice: <class 'slice'>) ['$320build_slice.8']
    $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None) ['$320build_slice.8', '$320build_slice.9', '$const316.6', '$const318.7']
    $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)]) ['$320build_slice.9', '$322build_tuple.10', '$const314.5']
    $324binary_subscr.11 = getitem(value=D, index=$322build_tuple.10, fn=<built-in function getitem>) ['$322build_tuple.10', '$324binary_subscr.11', 'D']
    $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None) ['$306load_global.1', '$324binary_subscr.11', '$328call_function.13', 'A', 'delta', 'oddV']
    $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4) ['$328call_function.13', '$330unpack_sequence.18']
    $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.14', '$330unpack_sequence.18']
    $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.15', '$330unpack_sequence.18']
    $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.16', '$330unpack_sequence.18']
    $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.17', '$330unpack_sequence.18']
    AX_S = $330unpack_sequence.14            ['$330unpack_sequence.14', 'AX_S']
    XD_S = $330unpack_sequence.15            ['$330unpack_sequence.15', 'XD_S']
    D_S = $330unpack_sequence.16             ['$330unpack_sequence.16', 'D_S']
    oddVX_S = $330unpack_sequence.17         ['$330unpack_sequence.17', 'oddVX_S']
    $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>)) ['$340load_global.19']
    E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None) ['$340load_global.19', 'AX_S', 'E']
    $348load_global.22 = global(range: <class 'range'>) ['$348load_global.22']
    $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None) ['$348load_global.22', '$352call_function.24', 'n_D']
    $354get_iter.25 = getiter(value=$352call_function.24) ['$352call_function.24', '$354get_iter.25']
    $phi356.1 = $354get_iter.25              ['$354get_iter.25', '$phi356.1']
    jump 356                                 []
label 356:
    $356for_iter.2 = iternext(value=$phi356.1) ['$356for_iter.2', '$phi356.1']
    $356for_iter.3 = pair_first(value=$356for_iter.2) ['$356for_iter.2', '$356for_iter.3']
    $356for_iter.4 = pair_second(value=$356for_iter.2) ['$356for_iter.2', '$356for_iter.4']
    $phi358.2 = $356for_iter.3               ['$356for_iter.3', '$phi358.2']
    branch $356for_iter.4, 358, 600          ['$356for_iter.4']
label 358:
    k = $phi358.2                            ['$phi358.2', 'k']
    $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>)) ['$360load_global.3']
    $const368.7 = const(NoneType, None)      ['$const368.7']
    $const370.8 = const(NoneType, None)      ['$const370.8']
    $372build_slice.9 = global(slice: <class 'slice'>) ['$372build_slice.9']
    $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None) ['$372build_slice.10', '$372build_slice.9', '$const368.7', '$const370.8']
    $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)]) ['$372build_slice.10', '$374build_tuple.11', 'k']
    $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>) ['$374build_tuple.11', '$376binary_subscr.12', 'D']
    $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None) ['$360load_global.3', '$376binary_subscr.12', '$378call_function.13', 'delta']
    $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2) ['$378call_function.13', '$380unpack_sequence.16']
    $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>) ['$380unpack_sequence.14', '$380unpack_sequence.16']
    $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>) ['$380unpack_sequence.15', '$380unpack_sequence.16']
    XD_S = $380unpack_sequence.14            ['$380unpack_sequence.14', 'XD_S']
    D_S = $380unpack_sequence.15             ['$380unpack_sequence.15', 'D_S']
    $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>)) ['$386load_global.17']
    f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None) ['$386load_global.17', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>)) ['$402load_global.24']
    $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>) ['$418binary_subscr.32', 'k', 'oddloop']
    f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None) ['$402load_global.24', '$418binary_subscr.32', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S']
    $426load_global.35 = global(range: <class 'range'>) ['$426load_global.35']
    $const428.36 = const(int, 2)             ['$const428.36']
    $const432.38 = const(int, 0)             ['$const432.38']
    $434binary_subscr.39 = getitem(value=kept_edges, index=$const432.38, fn=<built-in function getitem>) ['$434binary_subscr.39', '$const432.38', 'kept_edges']
    $436binary_multiply.40 = $const428.36 * $434binary_subscr.39 ['$434binary_subscr.39', '$436binary_multiply.40', '$const428.36']
    $const438.41 = const(int, 2)             ['$const438.41']
    $442binary_multiply.43 = $const438.41 * batch_max ['$442binary_multiply.43', '$const438.41', 'batch_max']
    $446binary_add.45 = $442binary_multiply.43 + odd_cutoff ['$442binary_multiply.43', '$446binary_add.45', 'odd_cutoff']
    $const448.46 = const(int, 1)             ['$const448.46']
    $450binary_add.47 = $446binary_add.45 + $const448.46 ['$446binary_add.45', '$450binary_add.47', '$const448.46']
    $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None) ['$426load_global.35', '$436binary_multiply.40', '$450binary_add.47', '$452call_function.48']
    $454get_iter.49 = getiter(value=$452call_function.48) ['$452call_function.48', '$454get_iter.49']
    $phi456.2 = $454get_iter.49              ['$454get_iter.49', '$phi456.2']
    jump 456                                 []
label 456:
    $456for_iter.3 = iternext(value=$phi456.2) ['$456for_iter.3', '$phi456.2']
    $456for_iter.4 = pair_first(value=$456for_iter.3) ['$456for_iter.3', '$456for_iter.4']
    $456for_iter.5 = pair_second(value=$456for_iter.3) ['$456for_iter.3', '$456for_iter.5']
    $phi458.3 = $456for_iter.4               ['$456for_iter.4', '$phi458.3']
    branch $456for_iter.5, 458, 596          ['$456for_iter.5']
label 458:
    N_det = $phi458.3                        ['$phi458.3', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const468.7 = const(float, -1.0)         ['$const468.7']
    $const472.9 = const(int, 2)              ['$const472.9']
    $474binary_floor_divide.10 = N // $const472.9 ['$474binary_floor_divide.10', '$const472.9', 'N']
    $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum ['$474binary_floor_divide.10', '$478binary_subtract.12', 'edges_sum']
    plus_minus = $const468.7 ** $478binary_subtract.12 ['$478binary_subtract.12', '$const468.7', 'plus_minus']
    $const488.16 = const(int, 2)             ['$const488.16']
    $490binary_floor_divide.17 = N_det // $const488.16 ['$490binary_floor_divide.17', '$const488.16', 'N_det']
    $const494.19 = const(int, 0)             ['$const494.19']
    $496binary_subscr.20 = getitem(value=kept_edges, index=$const494.19, fn=<built-in function getitem>) ['$496binary_subscr.20', '$const494.19', 'kept_edges']
    $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)]) ['$490binary_floor_divide.17', '$496binary_subscr.20', '$498build_tuple.21']
    $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>) ['$498build_tuple.21', '$500binary_subscr.22', 'binoms']
    n_det_binom_prod = $500binary_subscr.22 * binom_prod ['$500binary_subscr.22', 'binom_prod', 'n_det_binom_prod']
    $const510.26 = const(int, 2)             ['$const510.26']
    $512binary_modulo.27 = N_det % $const510.26 ['$512binary_modulo.27', '$const510.26', 'N_det']
    $const514.28 = const(int, 0)             ['$const514.28']
    $516compare_op.29 = $512binary_modulo.27 == $const514.28 ['$512binary_modulo.27', '$516compare_op.29', '$const514.28']
    bool518 = global(bool: <class 'bool'>)   ['bool518']
    $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None) ['$516compare_op.29', '$518pred', 'bool518']
    branch $518pred, 522, 560                ['$518pred']
label 522:
    $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)]) ['$528build_tuple.6', 'N_det', 'k']
    $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>) ['$528build_tuple.6', '$532binary_subscr.9', 'Hnew']
    $538binary_multiply.12 = n_det_binom_prod * plus_minus ['$538binary_multiply.12', 'n_det_binom_prod', 'plus_minus']
    $const544.15 = const(int, 2)             ['$const544.15']
    $546binary_floor_divide.16 = N // $const544.15 ['$546binary_floor_divide.16', '$const544.15', 'N']
    $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>) ['$546binary_floor_divide.16', '$548binary_subscr.17', 'f_even']
    $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17 ['$538binary_multiply.12', '$548binary_subscr.17', '$550binary_multiply.18']
    $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined) ['$532binary_subscr.9', '$550binary_multiply.18', '$552inplace_add.19']
    Hnew[$528build_tuple.6] = $552inplace_add.19 ['$528build_tuple.6', '$552inplace_add.19', 'Hnew']
    jump 592                                 []
label 560:
    $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)]) ['$566build_tuple.6', 'N_det', 'k']
    $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>) ['$566build_tuple.6', '$570binary_subscr.9', 'Hnew']
    $576binary_multiply.12 = n_det_binom_prod * plus_minus ['$576binary_multiply.12', 'n_det_binom_prod', 'plus_minus']
    $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$582binary_subscr.15', 'N', 'f_odd']
    $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15 ['$576binary_multiply.12', '$582binary_subscr.15', '$584binary_multiply.16']
    $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined) ['$570binary_subscr.9', '$584binary_multiply.16', '$586inplace_add.17']
    Hnew[$566build_tuple.6] = $586inplace_add.17 ['$566build_tuple.6', '$586inplace_add.17', 'Hnew']
    jump 592                                 []
label 592:
    jump 456                                 []
label 596:
    jump 356                                 []
label 600:
    $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$604inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $604inplace_add.3              ['$604inplace_add.3', 'H_batch']
    jump 178                                 []
label 610:
    bool612 = global(bool: <class 'bool'>)   ['bool612']
    $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None) ['$612pred', 'bool612', 'glynn']
    branch $612pred, 616, 678                ['$612pred']
label 616:
    $616load_global.0 = global(range: <class 'range'>) ['$616load_global.0']
    $620load_attr.2 = getattr(value=H_batch, attr=shape) ['$620load_attr.2', 'H_batch']
    $const622.3 = const(int, 1)              ['$const622.3']
    $624binary_subscr.4 = getitem(value=$620load_attr.2, index=$const622.3, fn=<built-in function getitem>) ['$620load_attr.2', '$624binary_subscr.4', '$const622.3']
    $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None) ['$616load_global.0', '$624binary_subscr.4', '$626call_function.5']
    $628get_iter.6 = getiter(value=$626call_function.5) ['$626call_function.5', '$628get_iter.6']
    $phi630.0 = $628get_iter.6               ['$628get_iter.6', '$phi630.0']
    jump 630                                 []
label 630:
    $630for_iter.1 = iternext(value=$phi630.0) ['$630for_iter.1', '$phi630.0']
    $630for_iter.2 = pair_first(value=$630for_iter.1) ['$630for_iter.1', '$630for_iter.2']
    $630for_iter.3 = pair_second(value=$630for_iter.1) ['$630for_iter.1', '$630for_iter.3']
    $phi632.1 = $630for_iter.2               ['$630for_iter.2', '$phi632.1']
    branch $630for_iter.3, 632, 678          ['$630for_iter.3']
label 632:
    j = $phi632.1                            ['$phi632.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $const644.6 = const(NoneType, None)      ['$const644.6']
    $const646.7 = const(NoneType, None)      ['$const646.7']
    $648build_slice.8 = global(slice: <class 'slice'>) ['$648build_slice.8']
    $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None) ['$648build_slice.8', '$648build_slice.9', '$const644.6', '$const646.7']
    $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)]) ['$648build_slice.9', '$652build_tuple.11', 'j']
    $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>) ['$652build_tuple.11', '$656binary_subscr.14', 'H_batch']
    $const658.15 = const(float, 0.5)         ['$const658.15']
    $const662.17 = const(int, 2)             ['$const662.17']
    $664binary_floor_divide.18 = x // $const662.17 ['$664binary_floor_divide.18', '$const662.17', 'x']
    $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18 ['$664binary_floor_divide.18', '$666binary_power.19', '$const658.15']
    $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined) ['$656binary_subscr.14', '$666binary_power.19', '$668inplace_multiply.20']
    H_batch[$652build_tuple.11] = $668inplace_multiply.20 ['$652build_tuple.11', '$668inplace_multiply.20', 'H_batch']
    jump 630                                 []
label 678:
    $680return_value.1 = cast(value=H_batch) ['$680return_value.1', 'H_batch']
    return $680return_value.1                ['$680return_value.1']

DEBUG 2022-02-14 16:45:42,652 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:42,652 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,652 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,652 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,652 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,652 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,652 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,652 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,653 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,653 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,653 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,653 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,653 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,653 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,653 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,653 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,653 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,653 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,653 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,653 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,654 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,654 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,654 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,654 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,654 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,654 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,654 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,654 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,654 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,654 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,654 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,654 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,654 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,654 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,654 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,654 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,654 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,654 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,655 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,655 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,655 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,655 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,655 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,655 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,655 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,655 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,655 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,655 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,655 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,655 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,655 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,655 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,655 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,655 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,655 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,655 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,655 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,655 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,655 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,656 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,656 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,656 ==== SSA block analysis pass on 178
DEBUG 2022-02-14 16:45:42,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,656 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,656 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,656 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,656 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,656 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,656 ==== SSA block analysis pass on 182
DEBUG 2022-02-14 16:45:42,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,656 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,656 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,656 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,656 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,656 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,656 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,656 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,656 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,656 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,656 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,656 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,656 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,657 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,657 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,657 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,657 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,657 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,657 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,657 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,657 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,657 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,657 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,657 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,657 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,657 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,657 ==== SSA block analysis pass on 252
DEBUG 2022-02-14 16:45:42,657 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,657 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,657 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,657 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,657 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,657 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,657 ==== SSA block analysis pass on 254
DEBUG 2022-02-14 16:45:42,657 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,658 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,658 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,658 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,658 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,658 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,658 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,658 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,658 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,658 ==== SSA block analysis pass on 282
DEBUG 2022-02-14 16:45:42,658 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,658 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,658 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,658 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,658 ==== SSA block analysis pass on 288
DEBUG 2022-02-14 16:45:42,658 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,658 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,658 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,658 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,658 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,659 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:45:42,659 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,659 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:42,659 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,659 ==== SSA block analysis pass on 306
DEBUG 2022-02-14 16:45:42,659 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,659 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,659 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,659 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,659 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,659 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,659 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,659 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,659 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,659 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,659 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,659 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,659 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,659 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,659 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,660 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,660 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,660 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,660 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,660 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,660 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,660 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,660 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,660 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,660 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,660 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,660 ==== SSA block analysis pass on 356
DEBUG 2022-02-14 16:45:42,660 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,660 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,660 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,660 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,660 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,660 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,660 ==== SSA block analysis pass on 358
DEBUG 2022-02-14 16:45:42,660 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,660 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,660 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,661 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,661 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,661 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,661 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,661 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,661 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,661 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,661 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,661 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,661 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,661 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,661 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,661 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,661 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,661 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,662 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,662 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,662 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,662 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,662 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,662 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,662 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,662 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,662 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,662 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,662 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,662 ==== SSA block analysis pass on 456
DEBUG 2022-02-14 16:45:42,662 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,662 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,662 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,662 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,662 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,662 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,662 ==== SSA block analysis pass on 458
DEBUG 2022-02-14 16:45:42,662 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,662 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,662 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,663 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,663 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,663 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,663 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,663 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,663 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,663 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,663 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,663 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,663 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,663 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,663 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,663 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,663 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,663 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,663 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,663 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,663 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,663 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,663 ==== SSA block analysis pass on 522
DEBUG 2022-02-14 16:45:42,663 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,663 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,664 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,664 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,664 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,664 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,664 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,664 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,664 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,664 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,664 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,664 ==== SSA block analysis pass on 560
DEBUG 2022-02-14 16:45:42,664 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,664 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,664 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,664 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,664 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,664 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,664 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,664 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,664 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,664 ==== SSA block analysis pass on 592
DEBUG 2022-02-14 16:45:42,664 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,664 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,665 ==== SSA block analysis pass on 596
DEBUG 2022-02-14 16:45:42,665 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,665 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,665 ==== SSA block analysis pass on 600
DEBUG 2022-02-14 16:45:42,665 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,665 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,665 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,665 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,665 ==== SSA block analysis pass on 610
DEBUG 2022-02-14 16:45:42,665 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,665 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,665 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,665 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,665 ==== SSA block analysis pass on 616
DEBUG 2022-02-14 16:45:42,665 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,665 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,665 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,665 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,665 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,665 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,665 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,665 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,665 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,666 ==== SSA block analysis pass on 630
DEBUG 2022-02-14 16:45:42,666 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,666 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,666 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,666 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,666 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,666 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,666 ==== SSA block analysis pass on 632
DEBUG 2022-02-14 16:45:42,666 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,666 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,666 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,666 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,666 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,666 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,666 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,666 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,666 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,666 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,666 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,666 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,666 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,666 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,667 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,667 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,667 ==== SSA block analysis pass on 678
DEBUG 2022-02-14 16:45:42,667 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9bffb50>
DEBUG 2022-02-14 16:45:42,667 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,667 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,669 defs defaultdict(<class 'list'>,
            {'$102binary_add.46': [<numba.core.ir.Assign object at 0x7f71b9cb6730>],
             '$110load_method.49': [<numba.core.ir.Assign object at 0x7f71b9cb6a30>],
             '$112call_method.50': [<numba.core.ir.Assign object at 0x7f71b9cb6100>],
             '$120load_global.53': [<numba.core.ir.Assign object at 0x7f71b9cb5b80>],
             '$12build_tuple.6': [<numba.core.ir.Assign object at 0x7f71b9c59a90>],
             '$130load_attr.57': [<numba.core.ir.Assign object at 0x7f71b9cb52b0>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x7f71b9cb53a0>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x7f71b9cb5a00>],
             '$148binary_multiply.65': [<numba.core.ir.Assign object at 0x7f71b9ca2610>],
             '$152binary_add.67': [<numba.core.ir.Assign object at 0x7f71b9ca21c0>],
             '$156binary_add.69': [<numba.core.ir.Assign object at 0x7f71b9ca2490>],
             '$158build_tuple.70': [<numba.core.ir.Assign object at 0x7f71b9ca26d0>],
             '$160load_global.71': [<numba.core.ir.Assign object at 0x7f71b9ca2fd0>],
             '$162load_attr.72': [<numba.core.ir.Assign object at 0x7f71b9ca28e0>],
             '$170load_global.75': [<numba.core.ir.Assign object at 0x7f71b9d05100>],
             '$174call_function.77': [<numba.core.ir.Assign object at 0x7f71b9d05e80>],
             '$176get_iter.78': [<numba.core.ir.Assign object at 0x7f71b9d05f10>],
             '$178for_iter.1': [<numba.core.ir.Assign object at 0x7f71b9c4d310>],
             '$178for_iter.2': [<numba.core.ir.Assign object at 0x7f71b9c39b50>],
             '$178for_iter.3': [<numba.core.ir.Assign object at 0x7f71b9cb6400>],
             '$184load_global.2': [<numba.core.ir.Assign object at 0x7f71b9d1fe20>],
             '$186load_attr.3': [<numba.core.ir.Assign object at 0x7f71b9d05610>],
             '$194binary_multiply.7': [<numba.core.ir.Assign object at 0x7f71b9d058b0>],
             '$198binary_add.9': [<numba.core.ir.Assign object at 0x7f71b9c824c0>],
             '$202binary_add.11': [<numba.core.ir.Assign object at 0x7f71b9c827f0>],
             '$204build_tuple.12': [<numba.core.ir.Assign object at 0x7f71b9c82ac0>],
             '$206load_global.13': [<numba.core.ir.Assign object at 0x7f71b9c82af0>],
             '$208load_attr.14': [<numba.core.ir.Assign object at 0x7f71b9c82c40>],
             '$216load_global.17': [<numba.core.ir.Assign object at 0x7f71b9c82310>],
             '$228load_method.22': [<numba.core.ir.Assign object at 0x7f71b9d02a90>],
             '$238load_global.25': [<numba.core.ir.Assign object at 0x7f71b9d02970>],
             '$246binary_floor_divide.29': [<numba.core.ir.Assign object at 0x7f71b9d0efd0>],
             '$248call_function.30': [<numba.core.ir.Assign object at 0x7f71b994d370>],
             '$250get_iter.31': [<numba.core.ir.Assign object at 0x7f71b994db80>],
             '$252for_iter.2': [<numba.core.ir.Assign object at 0x7f71b9d02ca0>],
             '$252for_iter.3': [<numba.core.ir.Assign object at 0x7f71b994d730>],
             '$252for_iter.4': [<numba.core.ir.Assign object at 0x7f71b994dcd0>],
             '$264binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71b9949070>],
             '$26build_slice.12': [<numba.core.ir.Assign object at 0x7f71b9b87220>],
             '$26build_slice.13': [<numba.core.ir.Assign object at 0x7f71b9b87bb0>],
             '$270binary_subscr.10': [<numba.core.ir.Assign object at 0x7f71b9949f70>],
             '$272build_tuple.11': [<numba.core.ir.Assign object at 0x7f71b977c5b0>],
             '$274binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71b977cdc0>],
             '$276inplace_multiply.13': [<numba.core.ir.Assign object at 0x7f71b977c100>],
             '$284pred': [<numba.core.ir.Assign object at 0x7f71b977c4c0>],
             '$28build_tuple.14': [<numba.core.ir.Assign object at 0x7f71b9b87d60>],
             '$292binary_multiply.3': [<numba.core.ir.Assign object at 0x7f71b97247c0>],
             '$306load_global.1': [<numba.core.ir.Assign object at 0x7f71b97240d0>],
             '$320build_slice.8': [<numba.core.ir.Assign object at 0x7f71b9793490>],
             '$320build_slice.9': [<numba.core.ir.Assign object at 0x7f71b9793fd0>],
             '$322build_tuple.10': [<numba.core.ir.Assign object at 0x7f71b97930d0>],
             '$324binary_subscr.11': [<numba.core.ir.Assign object at 0x7f71b9b3ea90>],
             '$328call_function.13': [<numba.core.ir.Assign object at 0x7f71b9793eb0>],
             '$330unpack_sequence.14': [<numba.core.ir.Assign object at 0x7f71b9793940>],
             '$330unpack_sequence.15': [<numba.core.ir.Assign object at 0x7f71b97938e0>],
             '$330unpack_sequence.16': [<numba.core.ir.Assign object at 0x7f71b974ef10>],
             '$330unpack_sequence.17': [<numba.core.ir.Assign object at 0x7f71b974e040>],
             '$330unpack_sequence.18': [<numba.core.ir.Assign object at 0x7f71b9793c10>],
             '$340load_global.19': [<numba.core.ir.Assign object at 0x7f71b974e7f0>],
             '$348load_global.22': [<numba.core.ir.Assign object at 0x7f71b974e160>],
             '$352call_function.24': [<numba.core.ir.Assign object at 0x7f71b97b7970>],
             '$354get_iter.25': [<numba.core.ir.Assign object at 0x7f71b97b7a60>],
             '$356for_iter.2': [<numba.core.ir.Assign object at 0x7f71b97b7790>],
             '$356for_iter.3': [<numba.core.ir.Assign object at 0x7f71b97d3250>],
             '$356for_iter.4': [<numba.core.ir.Assign object at 0x7f71b97d3460>],
             '$360load_global.3': [<numba.core.ir.Assign object at 0x7f71b9767e50>],
             '$36load_attr.17': [<numba.core.ir.Assign object at 0x7f71b9cecc40>],
             '$372build_slice.10': [<numba.core.ir.Assign object at 0x7f71ba3ea520>],
             '$372build_slice.9': [<numba.core.ir.Assign object at 0x7f71b9f20580>],
             '$374build_tuple.11': [<numba.core.ir.Assign object at 0x7f71b961df70>],
             '$376binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71b961df40>],
             '$378call_function.13': [<numba.core.ir.Assign object at 0x7f71b961d1c0>],
             '$380unpack_sequence.14': [<numba.core.ir.Assign object at 0x7f71b961d580>],
             '$380unpack_sequence.15': [<numba.core.ir.Assign object at 0x7f71b961d730>],
             '$380unpack_sequence.16': [<numba.core.ir.Assign object at 0x7f71b961d370>],
             '$386load_global.17': [<numba.core.ir.Assign object at 0x7f71b961d6a0>],
             '$402load_global.24': [<numba.core.ir.Assign object at 0x7f71b99adeb0>],
             '$418binary_subscr.32': [<numba.core.ir.Assign object at 0x7f71b99ad970>],
             '$426load_global.35': [<numba.core.ir.Assign object at 0x7f71b98740d0>],
             '$434binary_subscr.39': [<numba.core.ir.Assign object at 0x7f71b9b3e430>],
             '$436binary_multiply.40': [<numba.core.ir.Assign object at 0x7f71b9874970>],
             '$442binary_multiply.43': [<numba.core.ir.Assign object at 0x7f71b9a262e0>],
             '$446binary_add.45': [<numba.core.ir.Assign object at 0x7f71b9a26160>],
             '$450binary_add.47': [<numba.core.ir.Assign object at 0x7f71b9a26ee0>],
             '$452call_function.48': [<numba.core.ir.Assign object at 0x7f71b9a268b0>],
             '$454get_iter.49': [<numba.core.ir.Assign object at 0x7f71b9a260a0>],
             '$456for_iter.3': [<numba.core.ir.Assign object at 0x7f71b99adca0>],
             '$456for_iter.4': [<numba.core.ir.Assign object at 0x7f71b99ad820>],
             '$456for_iter.5': [<numba.core.ir.Assign object at 0x7f71b99add90>],
             '$474binary_floor_divide.10': [<numba.core.ir.Assign object at 0x7f71b9d3dd60>],
             '$478binary_subtract.12': [<numba.core.ir.Assign object at 0x7f71b9d3d2e0>],
             '$48load_method.22': [<numba.core.ir.Assign object at 0x7f71b9c3e160>],
             '$490binary_floor_divide.17': [<numba.core.ir.Assign object at 0x7f71b9655160>],
             '$496binary_subscr.20': [<numba.core.ir.Assign object at 0x7f71b9b3ef70>],
             '$498build_tuple.21': [<numba.core.ir.Assign object at 0x7f71b95f5910>],
             '$500binary_subscr.22': [<numba.core.ir.Assign object at 0x7f71b95f5850>],
             '$50call_method.23': [<numba.core.ir.Assign object at 0x7f71b9c3ec10>],
             '$512binary_modulo.27': [<numba.core.ir.Assign object at 0x7f71b95f58b0>],
             '$516compare_op.29': [<numba.core.ir.Assign object at 0x7f71b95f5f70>],
             '$518pred': [<numba.core.ir.Assign object at 0x7f71ba1a1460>],
             '$528build_tuple.6': [<numba.core.ir.Assign object at 0x7f71ba1a1bb0>],
             '$532binary_subscr.9': [<numba.core.ir.Assign object at 0x7f71ba1a1b20>],
             '$538binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71ba1a18b0>],
             '$546binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7f71ba1a1dc0>],
             '$548binary_subscr.17': [<numba.core.ir.Assign object at 0x7f71b9e14520>],
             '$550binary_multiply.18': [<numba.core.ir.Assign object at 0x7f71b9e14d60>],
             '$552inplace_add.19': [<numba.core.ir.Assign object at 0x7f71b9e14c10>],
             '$566build_tuple.6': [<numba.core.ir.Assign object at 0x7f71b9e14730>],
             '$570binary_subscr.9': [<numba.core.ir.Assign object at 0x7f71b9e14580>],
             '$576binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71b9e143d0>],
             '$582binary_subscr.15': [<numba.core.ir.Assign object at 0x7f71b9d47a60>],
             '$584binary_multiply.16': [<numba.core.ir.Assign object at 0x7f71b9d47d90>],
             '$586inplace_add.17': [<numba.core.ir.Assign object at 0x7f71b9d47400>],
             '$604inplace_add.3': [<numba.core.ir.Assign object at 0x7f71ba1d21c0>],
             '$612pred': [<numba.core.ir.Assign object at 0x7f71b9e1bb50>],
             '$616load_global.0': [<numba.core.ir.Assign object at 0x7f71b9e1bd00>],
             '$620load_attr.2': [<numba.core.ir.Assign object at 0x7f71b9e1b700>],
             '$624binary_subscr.4': [<numba.core.ir.Assign object at 0x7f71b9b3e910>],
             '$626call_function.5': [<numba.core.ir.Assign object at 0x7f71b9e1bc40>],
             '$628get_iter.6': [<numba.core.ir.Assign object at 0x7f71b9e1b7f0>],
             '$62binary_multiply.28': [<numba.core.ir.Assign object at 0x7f71b9c4d070>],
             '$630for_iter.1': [<numba.core.ir.Assign object at 0x7f71ba4d7970>],
             '$630for_iter.2': [<numba.core.ir.Assign object at 0x7f71ba4d7be0>],
             '$630for_iter.3': [<numba.core.ir.Assign object at 0x7f71ba4d7e20>],
             '$648build_slice.8': [<numba.core.ir.Assign object at 0x7f71b9ba0d30>],
             '$648build_slice.9': [<numba.core.ir.Assign object at 0x7f71b9c33e80>],
             '$64binary_add.29': [<numba.core.ir.Assign object at 0x7f71b9c4daf0>],
             '$652build_tuple.11': [<numba.core.ir.Assign object at 0x7f71b9c335b0>],
             '$656binary_subscr.14': [<numba.core.ir.Assign object at 0x7f71b9c33790>],
             '$664binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7f71ba4504c0>],
             '$666binary_power.19': [<numba.core.ir.Assign object at 0x7f71ba009520>],
             '$668inplace_multiply.20': [<numba.core.ir.Assign object at 0x7f71baa1e790>],
             '$680return_value.1': [<numba.core.ir.Assign object at 0x7f71b9e1b040>],
             '$72load_global.32': [<numba.core.ir.Assign object at 0x7f71b9c4d4c0>],
             '$74load_method.33': [<numba.core.ir.Assign object at 0x7f71b9c4d610>],
             '$76load_global.34': [<numba.core.ir.Assign object at 0x7f71b9c4dc10>],
             '$78load_method.35': [<numba.core.ir.Assign object at 0x7f71b9c39dc0>],
             '$82build_list.37': [<numba.core.ir.Assign object at 0x7f71b9c39790>],
             '$84call_method.38': [<numba.core.ir.Assign object at 0x7f71b9c39e20>],
             '$88build_tuple.40': [<numba.core.ir.Assign object at 0x7f71b9c392b0>],
             '$8build_slice.3': [<numba.core.ir.Assign object at 0x7f71b9bacc10>],
             '$8build_slice.4': [<numba.core.ir.Assign object at 0x7f71b9c592e0>],
             '$94load_global.42': [<numba.core.ir.Assign object at 0x7f71b9c39760>],
             '$96load_method.43': [<numba.core.ir.Assign object at 0x7f71b9c39880>],
             '$const10.5': [<numba.core.ir.Assign object at 0x7f71b9c59160>],
             '$const100.45': [<numba.core.ir.Assign object at 0x7f71b9cb6ee0>],
             '$const132.58': [<numba.core.ir.Assign object at 0x7f71b9cb5f10>],
             '$const144.63': [<numba.core.ir.Assign object at 0x7f71b9ca2ca0>],
             '$const154.68': [<numba.core.ir.Assign object at 0x7f71b9ca2370>],
             '$const190.5': [<numba.core.ir.Assign object at 0x7f71b9d051c0>],
             '$const20.9': [<numba.core.ir.Assign object at 0x7f71b9c59070>],
             '$const200.10': [<numba.core.ir.Assign object at 0x7f71b9c82520>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7f71b9c59400>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7f71b9c595e0>],
             '$const240.26': [<numba.core.ir.Assign object at 0x7f71b9d0e9a0>],
             '$const244.28': [<numba.core.ir.Assign object at 0x7f71b9d0e3a0>],
             '$const288.1': [<numba.core.ir.Assign object at 0x7f71b977cf10>],
             '$const314.5': [<numba.core.ir.Assign object at 0x7f71b9724d90>],
             '$const316.6': [<numba.core.ir.Assign object at 0x7f71b993de80>],
             '$const318.7': [<numba.core.ir.Assign object at 0x7f71b9793b50>],
             '$const368.7': [<numba.core.ir.Assign object at 0x7f71b992f5e0>],
             '$const370.8': [<numba.core.ir.Assign object at 0x7f71b98f6ca0>],
             '$const38.18': [<numba.core.ir.Assign object at 0x7f71b9c3ea90>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b9baca60>],
             '$const428.36': [<numba.core.ir.Assign object at 0x7f71b9874310>],
             '$const432.38': [<numba.core.ir.Assign object at 0x7f71b9874700>],
             '$const438.41': [<numba.core.ir.Assign object at 0x7f71b9874f40>],
             '$const44.20': [<numba.core.ir.Assign object at 0x7f71b9c3e820>],
             '$const448.46': [<numba.core.ir.Assign object at 0x7f71b9a26730>],
             '$const468.7': [<numba.core.ir.Assign object at 0x7f71b9d3d3d0>],
             '$const472.9': [<numba.core.ir.Assign object at 0x7f71b9d3dfd0>],
             '$const488.16': [<numba.core.ir.Assign object at 0x7f71b9655b20>],
             '$const494.19': [<numba.core.ir.Assign object at 0x7f71b9655f70>],
             '$const510.26': [<numba.core.ir.Assign object at 0x7f71b95f51c0>],
             '$const514.28': [<numba.core.ir.Assign object at 0x7f71b95f5c10>],
             '$const544.15': [<numba.core.ir.Assign object at 0x7f71ba1a16d0>],
             '$const58.26': [<numba.core.ir.Assign object at 0x7f71b9c3ee50>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7f71b9bac760>],
             '$const622.3': [<numba.core.ir.Assign object at 0x7f71b9e1b760>],
             '$const644.6': [<numba.core.ir.Assign object at 0x7f71ba4d7460>],
             '$const646.7': [<numba.core.ir.Assign object at 0x7f71ba4d7370>],
             '$const658.15': [<numba.core.ir.Assign object at 0x7f71b9c33b50>],
             '$const662.17': [<numba.core.ir.Assign object at 0x7f71ba82acd0>],
             '$phi178.0': [<numba.core.ir.Assign object at 0x7f71b9bacbb0>],
             '$phi182.1': [<numba.core.ir.Assign object at 0x7f71b9c3e2e0>],
             '$phi252.1': [<numba.core.ir.Assign object at 0x7f71b9d05460>],
             '$phi254.2': [<numba.core.ir.Assign object at 0x7f71b9d022e0>],
             '$phi356.1': [<numba.core.ir.Assign object at 0x7f71b9793460>],
             '$phi358.2': [<numba.core.ir.Assign object at 0x7f71b9724c40>],
             '$phi456.2': [<numba.core.ir.Assign object at 0x7f71b9767310>],
             '$phi458.3': [<numba.core.ir.Assign object at 0x7f71b99ad4f0>],
             '$phi630.0': [<numba.core.ir.Assign object at 0x7f71b9e1bbb0>],
             '$phi632.1': [<numba.core.ir.Assign object at 0x7f71b9e1b310>],
             'A': [<numba.core.ir.Assign object at 0x7f71b9b916a0>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f71b974e9d0>],
             'D': [<numba.core.ir.Assign object at 0x7f71b9bace20>],
             'D_S': [<numba.core.ir.Assign object at 0x7f71b974e310>,
                     <numba.core.ir.Assign object at 0x7f71b961d850>],
             'E': [<numba.core.ir.Assign object at 0x7f71b974e940>],
             'H_batch': [<numba.core.ir.Assign object at 0x7f71b9d05a30>,
                         <numba.core.ir.Assign object at 0x7f71ba1d2280>],
             'Hnew': [<numba.core.ir.Assign object at 0x7f71b9c822e0>],
             'N': [<numba.core.ir.Assign object at 0x7f71b9a26c10>],
             'N_det': [<numba.core.ir.Assign object at 0x7f71b9a26580>],
             'N_fixed': [<numba.core.ir.Assign object at 0x7f71b9c3ea00>],
             'N_max': [<numba.core.ir.Assign object at 0x7f71b9c4d730>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f71b974ed90>,
                      <numba.core.ir.Assign object at 0x7f71b961d940>],
             'batch_max': [<numba.core.ir.Assign object at 0x7f71b9bac610>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7f71b9d02a30>,
                            <numba.core.ir.Assign object at 0x7f71b977cfd0>],
             'binoms': [<numba.core.ir.Assign object at 0x7f71b9cb5e80>],
             'bool284': [<numba.core.ir.Assign object at 0x7f71b977c7c0>],
             'bool518': [<numba.core.ir.Assign object at 0x7f71b95f5c40>],
             'bool612': [<numba.core.ir.Assign object at 0x7f71b9e1bee0>],
             'delta': [<numba.core.ir.Assign object at 0x7f71b9724c70>,
                       <numba.core.ir.Assign object at 0x7f71b9724700>],
             'edge_reps': [<numba.core.ir.Assign object at 0x7f71b9c39070>],
             'edges_sum': [<numba.core.ir.Assign object at 0x7f71b9d02790>],
             'f_even': [<numba.core.ir.Assign object at 0x7f71b99ad310>],
             'f_odd': [<numba.core.ir.Assign object at 0x7f71b9874640>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x7f71b9bac850>],
             'glynn': [<numba.core.ir.Assign object at 0x7f71b9bac730>],
             'i': [<numba.core.ir.Assign object at 0x7f71b994da90>],
             'j': [<numba.core.ir.Assign object at 0x7f71b9cb54c0>,
                   <numba.core.ir.Assign object at 0x7f71ba4d78b0>],
             'k': [<numba.core.ir.Assign object at 0x7f71b9767be0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71b9d02460>],
             'max_binom': [<numba.core.ir.Assign object at 0x7f71b9cb6250>],
             'n': [<numba.core.ir.Assign object at 0x7f71b9b3e370>],
             'n_D': [<numba.core.ir.Assign object at 0x7f71b9b3e3a0>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7f71b95f5580>],
             'oddV': [<numba.core.ir.Assign object at 0x7f71b9b3e850>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f71b974e790>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x7f71b9baca30>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71b9b3e250>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7f71b9d3d0a0>],
             'steps': [<numba.core.ir.Assign object at 0x7f71b9cb6970>],
             'x': [<numba.core.ir.Assign object at 0x7f71ba4d7610>]})
DEBUG 2022-02-14 16:45:42,669 SSA violators {'XD_S', 'delta', 'j', 'binom_prod', 'D_S', 'H_batch'}
DEBUG 2022-02-14 16:45:42,669 Fix SSA violator on var XD_S
DEBUG 2022-02-14 16:45:42,669 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,669 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,669 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,669 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,669 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,669 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,669 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,669 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,669 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,669 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,669 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,669 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,669 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,669 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,670 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,670 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,670 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,670 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,670 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,670 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,670 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,670 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,670 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,670 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,670 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,670 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,670 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,670 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,670 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,670 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,670 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,670 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,670 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,670 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,670 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,671 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,671 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,671 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,671 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,671 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,671 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,671 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,671 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,671 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,671 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,671 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,671 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,671 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,671 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,671 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,671 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,671 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,671 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,671 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,671 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,672 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,672 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,672 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,672 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,672 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,672 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,672 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,672 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,672 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,672 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,672 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,672 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,672 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,672 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,672 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,672 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,672 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,672 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,672 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,672 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,673 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,673 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,673 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,673 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,673 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,673 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,673 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,673 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,673 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,673 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,673 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,673 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,673 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,673 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,673 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,673 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,673 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,673 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,673 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,673 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,673 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,673 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,674 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,674 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,674 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,674 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,674 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,674 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,674 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,674 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,674 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,674 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,674 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,674 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,674 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,674 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,674 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,674 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,674 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,674 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,674 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,674 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,674 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,674 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,675 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,675 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,675 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,675 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,675 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,675 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,675 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,675 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,675 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,675 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,675 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,675 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,675 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,675 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,675 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,675 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:42,675 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,675 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,676 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,676 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,676 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,676 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,676 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,676 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,676 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,676 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,676 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,676 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,676 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,676 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,676 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,676 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,676 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,676 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,676 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,677 first assign: XD_S
DEBUG 2022-02-14 16:45:42,677 replaced with: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,677 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,677 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,677 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,677 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,677 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,677 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,677 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,677 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,677 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,677 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,677 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,677 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,677 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,677 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,677 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,677 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,677 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,677 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,677 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,677 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,677 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,677 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,678 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,678 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,678 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,678 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,678 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,678 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,678 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,678 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,678 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,678 replaced with: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,678 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,678 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,678 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,678 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,678 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,678 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,678 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,678 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,678 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,679 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,679 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,679 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,679 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,679 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,679 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,679 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,679 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,679 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,679 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,679 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,679 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,679 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,679 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,679 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,679 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,679 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,679 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,679 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,679 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,679 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,679 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,679 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,680 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,680 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,680 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,680 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,680 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,680 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,680 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,680 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,680 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,680 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,680 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,680 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,680 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,680 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,680 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,680 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,680 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,680 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,680 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,680 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,680 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,681 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,681 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,681 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,681 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,681 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,681 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,681 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,681 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,681 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,681 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,681 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,681 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,681 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,681 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,681 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,681 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,681 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,681 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,681 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,681 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,681 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,681 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,682 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,682 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,682 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,682 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,682 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,682 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,682 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,682 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,682 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,682 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,682 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,682 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,682 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,682 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,682 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,682 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,682 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,682 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,682 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,682 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,682 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,682 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,683 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,683 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,683 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,683 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,683 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,683 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,683 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,683 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,683 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,683 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,683 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,683 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,683 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,683 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,683 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,683 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,683 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,683 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,683 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,683 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,683 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,683 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,683 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,684 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,684 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,684 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,684 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,684 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,684 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,684 Replaced assignments: defaultdict(<class 'list'>,
            {306: [<numba.core.ir.Assign object at 0x7f71b9b35ca0>],
             358: [<numba.core.ir.Assign object at 0x7f71b9b35070>]})
DEBUG 2022-02-14 16:45:42,684 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,684 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,684 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,684 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,684 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,684 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,684 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,684 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,684 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,685 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,685 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,685 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,685 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,685 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,685 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,685 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,685 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,685 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,685 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,685 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,686 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,686 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,686 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,686 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,686 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,686 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,686 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,686 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,686 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,686 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,686 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,686 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,686 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,686 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,686 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,686 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,686 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,686 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,687 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,687 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,687 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,687 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,687 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,687 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,687 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,687 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,687 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,687 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,687 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,687 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,687 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,687 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,687 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,687 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,687 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,687 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,688 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,688 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,688 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,688 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,688 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,688 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,688 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,688 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,688 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,688 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,688 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,688 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,688 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,688 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,688 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,688 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,688 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,688 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,688 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,689 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,689 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,689 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,689 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,689 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,689 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,689 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,689 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,689 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,689 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,689 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,689 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,689 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,689 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,689 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,689 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,689 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,689 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,689 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,689 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,690 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,690 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,690 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,690 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,690 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,690 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,690 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,690 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,690 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,690 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,690 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,690 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,690 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,690 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,690 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,690 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,690 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,690 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,690 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,690 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,691 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,691 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,691 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,691 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,691 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,691 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,691 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,691 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,691 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,691 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,691 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,691 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,691 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,691 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,691 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,691 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,691 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,691 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,691 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,691 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:42,691 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,692 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,692 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,692 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,692 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,692 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,692 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,692 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,692 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,692 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,692 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,692 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,692 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,692 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,692 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,692 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,692 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,692 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,692 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,692 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,693 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,693 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,693 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,693 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,693 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,693 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,693 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,693 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,693 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,693 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,693 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,693 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,693 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,693 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,693 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,693 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,693 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,693 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,694 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,694 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,694 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,694 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,694 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,694 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,694 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,694 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,694 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,694 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,694 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,694 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,694 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,694 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,694 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,694 find_def var='XD_S' stmt=f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,694 replaced with: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,695 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,695 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,695 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,695 find_def var='XD_S' stmt=f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,695 replaced with: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,695 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,695 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,695 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,695 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,695 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,695 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,695 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,695 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,695 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,695 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,695 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,695 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,696 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,696 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,696 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,696 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,696 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,696 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,696 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,696 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,696 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,696 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,696 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,696 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,696 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,696 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,696 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,696 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,696 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,696 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,696 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,696 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,696 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,697 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,697 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,697 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,697 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,697 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,697 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,697 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,697 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,697 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,697 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,697 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,697 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,697 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,697 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,697 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,697 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,697 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,697 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,697 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,697 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,698 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,698 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,698 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,698 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,698 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,698 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,698 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,698 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,698 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,698 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,698 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,698 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,698 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,698 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,698 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,698 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,698 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,698 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,698 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,698 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,699 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,699 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,699 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,699 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,699 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,699 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,699 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,699 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,699 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,699 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,699 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,699 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,699 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,699 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,699 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,699 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,699 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,699 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,699 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,699 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,699 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,699 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,700 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,700 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,700 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,700 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,700 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,700 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,700 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,700 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,700 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,700 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,700 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,700 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,700 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,700 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,700 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,700 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,700 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,700 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,700 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,700 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,701 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,701 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,701 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b352b0>
DEBUG 2022-02-14 16:45:42,701 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,701 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,701 Fix SSA violator on var delta
DEBUG 2022-02-14 16:45:42,701 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,701 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,701 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,701 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,701 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,701 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,701 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,701 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,701 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,701 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,701 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,701 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,701 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,701 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,701 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,701 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,702 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,702 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,702 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,702 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,702 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,702 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,702 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,702 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,702 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,702 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,702 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,702 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,702 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,702 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,702 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,702 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,702 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,702 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,702 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,702 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,702 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,703 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,703 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,703 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,703 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,703 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,703 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,703 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,703 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,703 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,703 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,703 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,703 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,703 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,703 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,703 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,703 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,703 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,703 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,703 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,703 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,704 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,704 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,704 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,704 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,704 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,704 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,704 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,704 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,704 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,704 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,704 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,704 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,704 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,704 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,704 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,704 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,704 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,704 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,704 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,704 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,704 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,704 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,705 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,705 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,705 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,705 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,705 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,705 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,705 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,705 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,705 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,705 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,705 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,705 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,705 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,705 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,705 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,705 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,705 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,705 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,705 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,705 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,705 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,705 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,706 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,706 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,706 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,706 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,706 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,706 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,706 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,706 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,706 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,706 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,706 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,706 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,706 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,706 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,706 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,706 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,706 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,706 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,706 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,706 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,706 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,706 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,707 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,707 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,707 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,707 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,707 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,707 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,707 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,707 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,707 first assign: delta
DEBUG 2022-02-14 16:45:42,707 replaced with: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,707 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,707 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,707 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,707 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:45:42,707 replaced with: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,707 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,707 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,707 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,707 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,707 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,707 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,707 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,707 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,708 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,708 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,708 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,708 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,708 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,708 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,708 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,708 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,708 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,708 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,708 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,708 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,708 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,708 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,708 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,709 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,709 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,709 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,709 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,709 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,709 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,709 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,709 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,709 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,709 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,709 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,709 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,709 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,709 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,709 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,709 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,709 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,709 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,709 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,709 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,709 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,710 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,710 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,710 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,710 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,710 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,710 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,710 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,710 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,710 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,710 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,710 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,710 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,710 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,710 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,710 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,710 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,710 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,710 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,710 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,710 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,711 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,711 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,711 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,711 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,711 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,711 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,711 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,711 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,711 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,711 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,711 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,711 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,711 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,711 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,711 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,711 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,711 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,711 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,711 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,711 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,711 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,711 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,711 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,712 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,712 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,712 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,712 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,712 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,712 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,712 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,712 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,712 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,712 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,712 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,712 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,712 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,712 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,712 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,712 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,712 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,712 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,712 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,712 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,712 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,712 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,713 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,713 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,713 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,713 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,713 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,713 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,713 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,713 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,713 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,713 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,713 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,713 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,713 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,713 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,713 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,713 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,713 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,713 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,713 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,713 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,713 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,713 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,713 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,714 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,714 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,714 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,714 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,714 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,714 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,714 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,714 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,714 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,714 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,714 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,714 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,714 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,714 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,714 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,714 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,714 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,714 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,714 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,714 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,714 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,714 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,715 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,715 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,715 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,715 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,715 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,715 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,715 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,715 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,715 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,715 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,715 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,715 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,715 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,715 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,715 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35d60>
DEBUG 2022-02-14 16:45:42,715 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,715 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,716 Replaced assignments: defaultdict(<class 'list'>,
            {288: [<numba.core.ir.Assign object at 0x7f71b9b35970>],
             302: [<numba.core.ir.Assign object at 0x7f71b9b35610>]})
DEBUG 2022-02-14 16:45:42,716 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,716 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,716 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,716 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,716 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,716 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,716 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,716 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,716 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,716 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,716 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,716 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,716 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,716 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,716 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,716 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,716 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,717 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,717 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,717 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,717 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,717 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,717 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,717 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,717 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,717 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,717 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,717 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,717 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,717 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,717 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,717 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,717 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,717 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,717 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,717 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,718 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,718 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,718 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,718 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,718 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,718 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,718 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,718 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,718 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,718 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,718 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,718 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,718 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,718 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,718 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,719 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,719 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,719 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,719 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,719 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,719 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,719 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,719 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,719 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,719 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,719 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,719 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,719 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,719 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,719 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,719 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,719 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,719 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,719 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,720 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,720 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,720 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,720 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,720 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,720 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,720 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,720 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,720 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,720 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,720 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,720 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,720 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,720 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,720 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,720 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,720 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,720 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,720 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,720 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,720 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,720 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,721 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,721 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,721 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,721 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,721 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,721 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,721 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,721 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,721 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,721 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,721 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,721 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,721 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,721 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,721 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,721 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,721 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,721 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,721 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,721 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,722 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,722 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,722 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,722 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,722 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,722 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,722 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,722 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,722 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,722 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,722 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,722 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,722 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,722 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,722 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,722 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,722 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,722 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,722 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,722 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,723 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,723 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,723 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,723 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,723 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,723 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,723 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,723 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,723 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,723 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,723 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,723 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,723 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,723 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,723 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,723 find_def var='delta' stmt=$328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,723 find_def_from_top label 306
DEBUG 2022-02-14 16:45:42,723 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 306
DEBUG 2022-02-14 16:45:42,723 find_def_from_bottom label 288
DEBUG 2022-02-14 16:45:42,723 incoming_def delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,723 find_def_from_bottom label 302
DEBUG 2022-02-14 16:45:42,724 incoming_def delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,724 replaced with: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,724 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,724 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,724 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,724 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,724 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,724 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,724 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,724 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,724 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,724 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,724 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,724 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,724 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,724 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,724 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,724 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,724 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,724 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,725 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,725 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,725 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,725 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,725 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,725 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,725 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,725 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,725 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,725 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,725 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,725 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,725 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,725 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,725 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,725 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,725 find_def var='delta' stmt=$378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,725 find_def_from_top label 358
DEBUG 2022-02-14 16:45:42,725 idom 356 from label 358
DEBUG 2022-02-14 16:45:42,726 find_def_from_bottom label 356
DEBUG 2022-02-14 16:45:42,726 find_def_from_top label 356
DEBUG 2022-02-14 16:45:42,726 idom 306 from label 356
DEBUG 2022-02-14 16:45:42,726 find_def_from_bottom label 306
DEBUG 2022-02-14 16:45:42,726 replaced with: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,726 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,726 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,726 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,726 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,726 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,726 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,726 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,726 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,726 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,726 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,726 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,727 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,727 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,727 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,727 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,727 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,727 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,727 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,727 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,727 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,727 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,727 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,727 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,727 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,727 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,727 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,727 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,727 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,727 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,727 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,727 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,727 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,727 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,727 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,728 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,728 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,728 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,728 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,728 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,728 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,728 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,728 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,728 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,728 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,728 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,728 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,728 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,728 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,728 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,728 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,728 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,728 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,728 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,728 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,728 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,729 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,729 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,729 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,729 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,729 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,729 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,729 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,729 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,729 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,729 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,729 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,729 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,729 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,729 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,729 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,729 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,729 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,729 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,729 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,729 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,729 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,730 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,730 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,730 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,730 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,730 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,730 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,730 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,730 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,730 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,730 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,730 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,730 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,730 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,730 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,730 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,730 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,730 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,730 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,730 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,731 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,731 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,731 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,731 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,731 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,731 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,731 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,731 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,731 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,731 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,731 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,731 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,731 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,731 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,731 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,731 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,731 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,731 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,731 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,731 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,731 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,732 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,732 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,732 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,732 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,732 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,732 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,732 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,732 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,732 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,732 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,732 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,732 Running <numba.core.ssa._FixSSAVars object at 0x7f71beac2220>
DEBUG 2022-02-14 16:45:42,732 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,732 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,732 Fix SSA violator on var j
DEBUG 2022-02-14 16:45:42,732 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,732 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,732 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,732 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,732 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,733 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,733 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,733 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,733 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,733 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,733 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,733 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,733 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,733 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,733 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,733 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,733 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,734 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,734 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,734 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,734 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,734 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,734 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,734 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,734 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,734 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,734 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,734 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,734 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,734 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,734 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,734 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,734 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,734 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,734 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,734 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,735 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,735 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,735 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,735 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,735 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,735 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,735 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,735 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,735 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,735 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,735 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,735 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,735 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,735 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,735 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,735 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,735 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,735 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,735 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,735 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,735 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,736 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,736 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,736 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,736 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,736 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,736 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,736 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,736 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,736 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,736 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,736 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,736 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,736 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,736 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,736 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,736 first assign: j
DEBUG 2022-02-14 16:45:42,736 replaced with: j = $phi182.1
DEBUG 2022-02-14 16:45:42,736 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,736 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,736 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,736 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,736 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,737 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,737 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,737 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,737 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,737 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,737 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,737 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,737 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,737 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,737 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,737 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,737 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,737 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,737 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,737 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,737 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,737 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,737 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,737 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,737 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,737 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,738 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,738 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,738 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,738 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,738 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,738 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,738 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,738 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,738 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,738 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,738 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,738 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,738 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,738 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,738 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,738 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,738 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,738 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,738 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,739 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,739 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,739 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,739 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,739 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,739 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,739 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,739 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,739 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,739 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,739 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,739 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,739 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,739 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,739 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,739 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,739 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,739 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,739 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,739 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,739 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,739 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,740 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,740 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,740 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,740 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,740 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,740 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,740 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,740 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,740 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,740 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,740 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,740 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,740 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,740 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,740 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,740 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,740 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,740 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,740 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,740 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,740 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,740 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,740 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,740 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,741 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,741 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,741 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,741 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,741 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,741 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,741 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,741 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,741 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,741 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,741 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,741 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,741 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,741 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,742 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,742 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,742 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,742 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,742 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,742 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,742 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,742 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,742 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,742 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,742 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,742 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,742 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,742 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,742 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,742 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,742 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,742 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,742 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,742 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,742 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,743 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,743 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,743 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,743 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,743 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,743 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,743 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,743 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,743 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,743 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,743 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,743 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,743 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,743 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,743 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,743 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,743 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,743 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,743 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,743 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,744 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,744 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,744 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,744 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,744 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,744 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,744 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,744 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,744 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,744 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,744 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,744 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,744 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,744 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,744 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,744 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,744 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,744 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,744 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,744 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,744 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,744 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,745 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,745 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,745 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,745 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,745 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,745 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,745 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,745 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,745 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,745 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,745 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,745 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,745 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,745 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,745 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,745 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,745 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,745 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,745 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,745 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,745 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,745 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,745 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,745 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,746 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,746 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,746 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,746 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,746 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,746 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,746 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,746 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,746 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,746 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,746 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,746 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,746 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,746 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:45:42,746 replaced with: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,746 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,746 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,746 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,746 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,746 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,746 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,746 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,747 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,747 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,747 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,747 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,747 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,747 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,747 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,747 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,747 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c759a0>
DEBUG 2022-02-14 16:45:42,747 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,747 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,747 Replaced assignments: defaultdict(<class 'list'>,
            {182: [<numba.core.ir.Assign object at 0x7f71b9b352e0>],
             632: [<numba.core.ir.Assign object at 0x7f71b9b91ac0>]})
DEBUG 2022-02-14 16:45:42,747 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,747 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,747 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,747 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,747 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,747 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,747 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,747 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,747 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,747 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,748 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,748 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,748 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,748 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,748 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,748 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,748 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,748 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,748 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,748 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,748 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,748 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,748 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,748 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,748 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,748 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,749 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,749 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,749 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,749 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,749 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,749 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,749 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,749 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,749 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,749 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,749 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,749 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,749 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,749 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,749 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,749 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,749 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,749 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,749 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,750 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,750 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,750 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,750 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,750 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,750 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,750 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,750 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,750 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,750 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,750 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,750 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,750 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,750 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,750 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,750 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,750 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,750 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,750 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,750 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,751 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,751 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,751 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,751 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,751 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,751 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,751 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,751 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,751 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,751 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,751 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,751 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,751 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,751 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,751 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,751 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,751 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,751 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,751 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,751 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,751 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,751 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,752 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,752 find_def var='j' stmt=kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,752 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,752 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,752 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,752 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,752 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,752 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,752 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,752 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,752 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,752 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,752 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,752 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,752 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,752 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,752 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,752 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,752 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,752 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,753 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,753 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,753 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,753 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,753 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,753 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,753 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,753 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,753 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,753 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,753 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,753 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,753 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,753 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,753 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,753 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,753 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,753 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,753 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,753 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,753 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,753 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,754 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,754 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,754 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,754 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,754 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,754 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,754 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,754 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,754 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,754 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,754 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,754 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,754 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,754 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,754 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,754 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,754 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,754 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,754 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,754 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,755 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,755 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,755 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,755 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,755 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,755 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,755 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,755 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,755 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,755 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,755 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,755 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,755 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,755 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,755 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,755 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,755 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,755 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,755 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,755 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,755 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,755 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,755 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,756 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,756 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,756 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,756 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,756 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,756 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,756 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,756 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,756 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,756 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,756 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,756 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,756 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,756 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,757 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,757 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,757 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,757 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,757 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,757 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,757 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,757 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,757 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,757 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,757 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,757 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,757 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,757 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,757 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,757 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,757 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,757 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,757 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,757 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,757 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,757 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,757 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,758 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,758 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,758 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,758 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,758 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,758 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,758 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,758 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,758 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,758 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,758 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,758 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,758 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,758 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,758 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,758 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,758 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,758 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,758 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,758 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,759 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,759 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,759 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,759 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,759 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,759 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,759 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,759 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,759 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,759 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,759 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,759 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,759 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,759 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,759 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,759 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,759 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,759 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,760 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,760 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,760 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,760 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,760 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,760 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,760 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,760 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,760 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,760 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,760 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,760 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,760 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,760 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,760 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,760 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,760 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,760 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,760 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,760 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,760 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,760 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,760 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,761 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,761 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,761 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,761 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,761 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,761 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,761 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,761 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,761 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,761 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,761 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,761 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,761 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,761 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,761 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,761 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:45:42,761 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-14 16:45:42,761 replaced with: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,761 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,761 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,761 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,762 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,762 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,762 find_def var='j' stmt=$652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:45:42,762 replaced with: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,762 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,762 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,762 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,762 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,762 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,762 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,762 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,762 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,762 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,762 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,762 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,762 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,762 Fix SSA violator on var binom_prod
DEBUG 2022-02-14 16:45:42,762 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,762 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,762 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,763 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,763 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,763 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,763 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,763 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,763 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,763 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,763 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,763 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,763 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,763 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,763 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,763 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,763 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,764 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,764 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,764 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,764 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,764 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,764 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,764 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,764 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,764 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,764 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,764 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,764 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,764 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,764 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,764 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,764 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,764 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,764 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,764 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,764 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,764 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,765 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,765 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,765 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,765 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,765 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,765 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,765 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,765 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,765 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,765 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,765 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,765 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,765 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,765 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,765 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,765 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,765 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,765 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,765 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,765 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,765 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,766 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,766 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,766 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,766 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,766 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,766 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,766 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,766 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,766 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,766 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,766 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,766 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,766 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,766 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,766 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,766 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,766 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,766 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,766 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,766 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,766 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,766 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,767 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,767 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,767 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,767 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,767 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,767 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,767 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,767 first assign: binom_prod
DEBUG 2022-02-14 16:45:42,767 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,767 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,767 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,767 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,767 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,767 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,767 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,767 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,767 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,767 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,767 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,767 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,767 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,768 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,768 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,768 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,768 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,768 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,768 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,768 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,768 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,768 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,768 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,768 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,768 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,768 replaced with: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,768 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,768 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,768 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,768 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,768 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,768 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,768 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,768 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,768 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,768 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,769 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,769 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,769 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,769 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,769 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,769 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,769 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,769 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,769 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,769 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,769 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,769 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,769 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,769 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,769 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,769 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,769 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,769 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,769 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,769 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,769 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,769 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,770 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,770 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,770 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,770 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,770 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,770 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,770 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,770 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,770 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,770 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,770 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,770 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,770 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,770 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,770 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,770 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,770 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,770 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,770 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,770 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,770 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,770 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,771 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,771 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,771 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,771 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,771 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,771 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,771 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,771 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,771 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,771 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,771 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,771 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,771 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,771 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,771 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,771 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,772 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,772 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,772 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,772 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,772 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,772 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,772 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,772 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,772 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,772 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,772 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,772 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,772 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,772 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,772 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,772 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,772 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,772 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,772 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,772 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,772 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,772 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,772 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,773 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,773 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,773 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,773 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,773 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,773 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,773 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,773 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,773 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,773 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,773 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,773 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,773 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,773 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,773 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,773 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,773 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,773 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,773 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,773 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,773 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,773 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,774 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,774 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,774 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,774 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,774 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,774 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,774 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,774 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,774 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,774 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,774 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,774 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,774 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,774 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,774 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,774 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,774 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,774 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,774 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,774 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,774 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,775 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,775 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,775 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,775 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,775 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,775 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,775 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,775 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,775 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,775 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,775 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,775 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,775 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,775 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,775 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,775 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,775 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,775 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,776 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,776 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,776 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,776 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,776 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,776 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,776 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,776 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,776 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,776 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,776 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,776 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,776 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,776 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,776 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,776 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,776 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,776 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,776 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,776 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,777 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,777 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,777 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,777 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,777 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,777 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,777 Running <numba.core.ssa._FreshVarHandler object at 0x7f71beab1d60>
DEBUG 2022-02-14 16:45:42,777 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,777 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,777 Replaced assignments: defaultdict(<class 'list'>,
            {182: [<numba.core.ir.Assign object at 0x7f71b9b35640>],
             254: [<numba.core.ir.Assign object at 0x7f71b9b35400>]})
DEBUG 2022-02-14 16:45:42,777 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,777 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,777 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,777 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,777 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,777 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,777 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,777 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,777 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,777 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,778 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,778 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,778 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,778 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,778 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,778 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,778 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,778 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,778 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,778 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,778 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,778 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,778 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,778 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,779 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,779 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,779 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,779 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,779 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,779 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,779 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,779 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,779 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,779 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,779 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,779 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,779 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,779 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,779 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,779 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,779 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,779 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,780 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,780 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,780 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,780 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,780 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,780 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,780 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,780 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,780 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,780 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,780 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,780 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,780 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,780 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,780 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,780 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,780 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,780 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,780 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,781 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,781 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,781 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,781 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,781 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,781 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,781 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,781 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,781 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,781 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,781 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,781 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,781 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,781 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,781 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,781 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,781 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,781 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,781 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,781 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,782 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,782 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,782 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,782 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,782 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,782 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,782 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,782 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,782 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,782 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,782 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,782 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,782 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,782 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,782 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,782 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,782 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,782 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,782 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,783 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,783 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,783 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,783 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,783 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,783 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,783 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,783 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,783 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,783 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,783 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,783 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,783 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,783 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,783 find_def var='binom_prod' stmt=$276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,783 find_def_from_top label 254
DEBUG 2022-02-14 16:45:42,783 idom 252 from label 254
DEBUG 2022-02-14 16:45:42,783 find_def_from_bottom label 252
DEBUG 2022-02-14 16:45:42,783 find_def_from_top label 252
DEBUG 2022-02-14 16:45:42,783 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 252
DEBUG 2022-02-14 16:45:42,783 find_def_from_bottom label 182
DEBUG 2022-02-14 16:45:42,784 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,784 find_def_from_bottom label 254
DEBUG 2022-02-14 16:45:42,784 incoming_def binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,784 replaced with: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,784 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,784 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,784 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,784 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,784 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,784 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,784 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,784 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,784 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,784 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,784 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,784 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,784 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,784 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,784 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,784 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,784 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,784 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,784 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,785 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,785 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,785 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,785 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,785 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,785 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,785 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,785 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,785 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,785 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,785 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,785 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,785 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,785 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,785 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,785 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,785 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,785 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,785 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,785 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,786 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,786 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,786 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,786 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,786 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,786 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,786 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,786 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,786 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,786 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,786 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,786 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,786 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,786 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,786 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,786 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,786 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,786 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,787 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,787 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,787 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,787 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,787 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,787 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,787 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,787 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,787 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,787 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,787 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,787 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,787 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,788 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,788 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,788 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,788 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,788 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,788 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,788 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,788 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,788 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,788 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,788 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,788 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,788 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,788 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,788 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,788 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,788 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,788 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,788 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,788 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,789 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,789 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,789 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,789 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,789 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,789 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,789 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,789 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,789 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,789 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,789 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,789 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,789 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,789 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,789 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,789 find_def var='binom_prod' stmt=n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:45:42,789 find_def_from_top label 458
DEBUG 2022-02-14 16:45:42,789 idom 456 from label 458
DEBUG 2022-02-14 16:45:42,789 find_def_from_bottom label 456
DEBUG 2022-02-14 16:45:42,789 find_def_from_top label 456
DEBUG 2022-02-14 16:45:42,789 idom 358 from label 456
DEBUG 2022-02-14 16:45:42,790 find_def_from_bottom label 358
DEBUG 2022-02-14 16:45:42,790 find_def_from_top label 358
DEBUG 2022-02-14 16:45:42,790 idom 356 from label 358
DEBUG 2022-02-14 16:45:42,790 find_def_from_bottom label 356
DEBUG 2022-02-14 16:45:42,790 find_def_from_top label 356
DEBUG 2022-02-14 16:45:42,790 idom 306 from label 356
DEBUG 2022-02-14 16:45:42,790 find_def_from_bottom label 306
DEBUG 2022-02-14 16:45:42,790 find_def_from_top label 306
DEBUG 2022-02-14 16:45:42,790 idom 282 from label 306
DEBUG 2022-02-14 16:45:42,790 find_def_from_bottom label 282
DEBUG 2022-02-14 16:45:42,790 find_def_from_top label 282
DEBUG 2022-02-14 16:45:42,790 idom 252 from label 282
DEBUG 2022-02-14 16:45:42,790 find_def_from_bottom label 252
DEBUG 2022-02-14 16:45:42,790 replaced with: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:42,790 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,790 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,790 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,790 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,790 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,790 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,790 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,790 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,791 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,791 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,791 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,791 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,791 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,791 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,791 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,791 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,791 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,791 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,791 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,791 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,791 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,791 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,791 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,791 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,791 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,791 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,791 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,792 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,792 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,792 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,792 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,792 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,792 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,792 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,792 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,792 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,792 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,792 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,792 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,792 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,792 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,792 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,792 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,792 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,792 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,793 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,793 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,793 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,793 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,793 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,793 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,793 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,793 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,793 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,793 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,793 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,793 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,793 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,793 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,793 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,793 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,793 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,793 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,793 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,793 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,793 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,794 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,794 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,794 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,794 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,794 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,794 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,794 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,794 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,794 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,794 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,794 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b910a0>
DEBUG 2022-02-14 16:45:42,794 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,794 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,794 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:45:42,794 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,794 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,794 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,794 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,794 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,795 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,795 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,795 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,795 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,795 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,795 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,795 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,795 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,795 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,795 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,795 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,795 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,796 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,796 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,796 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,796 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,796 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,796 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,796 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,796 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,796 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,796 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,796 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,796 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,796 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,796 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,796 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,796 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,796 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,796 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,797 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,797 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,797 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,797 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,797 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,797 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,797 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,797 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,797 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,797 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,797 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,797 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,797 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,797 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,798 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,798 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,798 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,798 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,798 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,798 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,798 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,798 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,798 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,798 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,798 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,798 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,798 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,798 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,798 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,798 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,798 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,799 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,799 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,799 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,799 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,799 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,799 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,799 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,799 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,799 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,799 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,799 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,799 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,799 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,799 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,799 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,799 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,799 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,799 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,799 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,799 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,800 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,800 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,800 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,800 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,800 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,800 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,800 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,800 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,800 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,800 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,800 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,800 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:45:42,800 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,800 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,800 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,800 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,800 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,800 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,800 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,800 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,800 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,800 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,800 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,801 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,801 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,801 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,801 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,801 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,801 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,801 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,801 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,801 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,801 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,801 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,801 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,801 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,801 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,801 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,801 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,801 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,801 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,801 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,801 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,801 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,801 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,802 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,802 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,802 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,802 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,802 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,802 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,802 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,802 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,802 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,802 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,802 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,802 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,802 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,802 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,802 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,802 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,802 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,802 first assign: D_S
DEBUG 2022-02-14 16:45:42,802 replaced with: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,802 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,803 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,803 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,803 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,803 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,803 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,803 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,803 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,803 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,803 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,803 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,803 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,803 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,803 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,803 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,803 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,803 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,803 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,803 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,803 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,803 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,803 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,803 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,804 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,804 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,804 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,804 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,804 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,804 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,804 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,804 replaced with: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,804 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,804 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,804 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,804 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,804 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,804 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,804 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,804 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,804 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,804 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,804 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,804 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,805 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,805 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,805 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,805 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,805 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,805 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,805 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,805 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,805 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,805 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,805 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,805 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,805 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,805 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,805 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,805 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,805 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,805 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,805 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,805 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,805 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,806 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,806 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,806 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,806 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,806 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,806 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,806 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,806 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:42,806 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,806 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,806 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,806 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,806 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,806 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,806 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,806 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,806 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,806 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,806 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,806 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,806 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,807 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,807 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,807 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,807 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,807 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,807 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,807 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,807 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,807 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,807 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,807 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,807 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,807 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,807 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,807 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,807 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,807 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,807 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,807 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,807 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,808 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,808 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,808 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,808 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,808 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,808 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,808 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,808 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,808 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,808 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,808 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,808 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,808 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,808 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,808 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,808 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,808 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,808 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,808 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,808 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,808 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,808 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,808 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,809 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,809 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,809 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,809 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,809 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,809 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,809 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,809 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,809 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,809 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,809 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,809 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,809 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,809 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,809 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,809 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,809 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,809 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,809 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,810 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,810 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,810 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,810 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,810 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,810 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9b35700>
DEBUG 2022-02-14 16:45:42,810 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,810 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,810 Replaced assignments: defaultdict(<class 'list'>,
            {306: [<numba.core.ir.Assign object at 0x7f71b9b355e0>],
             358: [<numba.core.ir.Assign object at 0x7f71b9b35af0>]})
DEBUG 2022-02-14 16:45:42,810 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,810 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,810 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,810 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,810 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,810 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,810 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,810 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,810 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,811 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,811 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,811 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,811 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,811 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,811 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,811 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,811 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,811 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,811 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,811 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,811 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,812 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,812 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,812 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,812 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,812 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,812 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,812 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,812 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,812 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,812 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,812 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,812 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,812 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,812 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,812 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,812 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,812 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,812 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,812 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,812 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,813 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,813 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,813 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,813 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,813 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,813 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,813 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,813 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,813 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,813 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,813 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,813 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,813 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,813 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,813 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,813 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,813 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,813 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,813 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,813 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,814 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,814 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,814 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,814 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,814 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,814 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,814 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,814 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,814 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,814 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,814 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,814 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,814 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,814 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,814 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,814 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,814 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,814 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,814 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,814 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,814 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,815 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,815 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,815 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,815 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,815 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,815 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,815 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,815 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,815 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,815 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,815 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,815 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,815 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,815 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,815 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,815 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,815 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:45:42,815 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,815 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,815 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,815 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,816 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,816 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,816 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,816 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,816 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,816 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,816 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,816 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,816 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,816 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,816 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,816 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,816 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,816 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,816 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,816 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,816 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,816 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,816 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,816 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,816 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,816 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,817 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,817 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,817 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,817 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,817 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,817 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,817 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,817 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,817 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,817 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,817 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,817 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,817 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,817 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,817 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,817 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,817 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,817 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,817 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,817 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,817 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,818 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,818 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,818 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,818 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,818 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,818 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,818 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,818 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,818 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,818 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,818 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,818 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,818 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,818 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,818 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,818 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,818 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,818 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,818 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,818 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,818 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,819 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,819 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,819 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,819 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,819 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,819 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,819 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,819 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,819 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,819 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,819 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,819 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,819 on stmt: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,819 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,819 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,819 find_def var='D_S' stmt=f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,820 replaced with: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S.1, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,820 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,820 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,820 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,820 find_def var='D_S' stmt=f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,820 replaced with: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S.1, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,820 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,820 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,820 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,820 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,820 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,820 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,820 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,820 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,820 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,820 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,820 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,821 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,821 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,821 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,821 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,821 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,821 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,821 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,821 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,821 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,821 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,821 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,821 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,821 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,821 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,821 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,821 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,821 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,821 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,821 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,822 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,822 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,822 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,822 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,822 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,822 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,822 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:42,822 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,822 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,822 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,822 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,822 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,822 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,822 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,822 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,822 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,822 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,822 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,822 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,823 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,823 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,823 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,823 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,823 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,823 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,823 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,823 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,823 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,823 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,823 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,823 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,823 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,823 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,823 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,823 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,823 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,823 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,823 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,823 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,823 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,823 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,824 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,824 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,824 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,824 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,824 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,824 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,824 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,824 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,824 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,824 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,824 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,824 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,824 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,824 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,824 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,824 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,824 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,824 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,824 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,824 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,824 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,824 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,825 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,825 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,825 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,825 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,825 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,825 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,825 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,825 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,825 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,825 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,825 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,825 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,825 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,825 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,825 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,825 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,825 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,825 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,825 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,825 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,825 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,826 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,826 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,826 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,826 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba4d7b20>
DEBUG 2022-02-14 16:45:42,826 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,826 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,826 Fix SSA violator on var H_batch
DEBUG 2022-02-14 16:45:42,826 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,826 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,826 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,826 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,826 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,826 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,826 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,826 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,826 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,826 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,826 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,827 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,827 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,827 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,827 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,827 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,827 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,827 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,827 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,827 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,827 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,827 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,827 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,827 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,827 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,828 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,828 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,828 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,828 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,828 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,828 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,828 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,828 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,828 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,828 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,828 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,828 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,828 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,829 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,829 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,829 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,829 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,829 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,829 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,829 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,829 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,829 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,829 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,829 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,830 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,830 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,830 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,830 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,830 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,830 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,830 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,830 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,830 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,830 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,830 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,830 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,830 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,830 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,830 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,830 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,830 first assign: H_batch
DEBUG 2022-02-14 16:45:42,830 replaced with: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,831 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,831 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,831 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,831 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,831 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,831 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,831 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,831 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,831 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,831 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,831 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,831 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,831 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,831 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,831 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,831 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,831 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,831 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,831 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,832 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,832 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,832 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,832 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,832 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,832 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,832 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,832 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,832 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,832 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,832 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,832 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,832 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,832 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,832 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,832 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,832 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,832 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,832 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,832 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,832 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,833 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,833 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:45:42,833 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,833 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,833 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,833 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,833 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,833 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,833 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,833 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,833 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,833 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,833 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,833 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,833 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,833 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,833 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,833 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,833 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,833 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,833 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,833 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,834 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,834 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,834 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,834 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,834 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,834 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,834 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,834 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,834 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,834 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,834 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,834 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,834 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,834 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,834 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,834 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,834 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,834 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,834 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,834 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,834 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,834 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,835 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,835 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,835 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,835 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,835 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,835 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,835 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,835 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,835 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,835 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,835 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,835 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,835 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,835 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,835 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,835 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,835 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,835 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,835 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,835 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,835 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,835 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,836 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,836 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,836 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,836 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,836 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,836 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,836 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,836 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,836 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,836 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,836 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,836 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,836 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,836 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,836 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,836 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,836 on stmt: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,836 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,836 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S.1, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,836 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,836 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,837 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S.1, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,837 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,837 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,837 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,837 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,837 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,837 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,837 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,837 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,837 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,837 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,837 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,837 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,837 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,837 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,837 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,837 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,837 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,837 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,837 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,837 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,837 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,838 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,838 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,838 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,838 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,838 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,838 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,838 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,838 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,838 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,838 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,838 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,838 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,838 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,838 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,838 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,838 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:42,838 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,838 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,838 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,838 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,838 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,838 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,839 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,839 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,839 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,839 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,839 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,839 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,839 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,839 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,839 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,839 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,839 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,839 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,839 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,839 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,839 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,839 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,839 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,839 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,839 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,840 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,840 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,840 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,840 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,840 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,840 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,840 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,840 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,840 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,840 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,840 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,840 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,840 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,840 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,840 replaced with: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,840 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,840 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,840 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,840 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,840 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,840 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,840 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,840 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,840 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,840 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,841 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,841 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,841 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,841 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,841 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,841 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,841 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,841 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,841 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,841 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,841 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,841 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,841 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,841 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,841 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,841 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,841 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,841 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,841 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,841 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,841 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,841 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,842 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,842 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,842 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,842 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,842 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,842 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,842 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,842 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,842 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,842 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9c659d0>
DEBUG 2022-02-14 16:45:42,842 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,842 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,842 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9c658b0>],
             600: [<numba.core.ir.Assign object at 0x7f71b9b353d0>]})
DEBUG 2022-02-14 16:45:42,842 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,842 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,843 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:45:42,843 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:42,843 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:45:42,843 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:45:42,843 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:45:42,843 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:45:42,843 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,843 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,843 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,843 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,843 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,843 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,843 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,843 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,844 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,844 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,844 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,844 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,844 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:45:42,844 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,844 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:45:42,844 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:45:42,844 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,844 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:45:42,844 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:45:42,844 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,844 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:45:42,844 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,844 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:45:42,844 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:45:42,844 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:45:42,844 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,844 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:45:42,845 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,845 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:45:42,845 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,845 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,845 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:45:42,845 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,845 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,845 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:45:42,845 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:45:42,845 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:45:42,845 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,845 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:45:42,845 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,845 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:45:42,845 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f71beb25280>))
DEBUG 2022-02-14 16:45:42,845 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,845 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:45:42,845 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:45:42,845 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,846 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,846 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:45:42,846 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:45:42,846 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:45:42,846 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:45:42,846 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:45:42,846 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:45:42,846 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:42,846 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,846 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:45:42,846 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,846 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:45:42,846 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,846 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:45:42,846 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:45:42,846 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,846 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:45:42,846 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,846 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:45:42,846 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,847 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:45:42,847 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:45:42,847 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:45:42,847 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:45:42,847 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,847 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:45:42,847 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,847 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:45:42,847 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:42,847 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:45:42,847 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:45:42,847 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:42,847 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:42,847 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:42,847 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,847 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:45:42,847 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,847 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:42,847 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,847 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:45:42,847 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,848 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:42,848 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,848 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:42,848 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:42,848 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:42,848 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,848 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:42,848 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:45:42,848 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,848 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:45:42,848 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,848 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:45:42,848 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:45:42,848 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,848 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:42,848 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:45:42,848 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:45:42,848 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,848 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,848 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:45:42,848 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,848 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,849 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:42,849 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,849 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,849 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:45:42,849 on stmt: jump 252
DEBUG 2022-02-14 16:45:42,849 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:45:42,849 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,849 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,849 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,849 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:45:42,849 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:45:42,849 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,849 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:45:42,849 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:45:42,849 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:45:42,849 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,849 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:45:42,849 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,849 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:45:42,849 on stmt: jump 306
DEBUG 2022-02-14 16:45:42,849 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:45:42,849 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,850 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:45:42,850 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:42,850 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:45:42,850 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,850 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,850 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,850 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,850 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:42,850 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,850 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,850 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:42,850 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,850 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,850 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,850 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,850 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:45:42,850 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:45:42,850 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:45:42,850 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:45:42,850 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:42,851 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,851 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,851 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,851 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:42,851 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:45:42,851 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,851 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:45:42,851 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,851 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:45:42,851 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,851 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:42,851 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:45:42,851 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:45:42,851 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:45:42,851 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,851 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:45:42,851 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:42,851 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,851 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,851 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,851 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,851 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:42,852 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,852 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,852 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:42,852 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,852 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,852 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:45:42,852 on stmt: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:45:42,852 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:42,852 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S.1, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,852 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:42,852 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,852 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S.1, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,852 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,852 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:42,852 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:42,852 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,852 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:42,852 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:42,852 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:45:42,853 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:45:42,853 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:42,853 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:42,853 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,853 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:42,853 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:45:42,853 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,853 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:45:42,853 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,853 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:45:42,853 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,853 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:42,853 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:45:42,853 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:45:42,853 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:45:42,853 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,853 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:45:42,853 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:45:42,853 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:42,854 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:42,854 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:42,854 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:45:42,854 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:42,854 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:42,854 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:45:42,854 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:42,854 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,854 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:42,854 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,854 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:42,854 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:42,854 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:45:42,854 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:42,854 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:42,854 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,854 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,854 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:45:42,854 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:45:42,854 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,854 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,855 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,855 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,855 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:42,855 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:42,855 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,855 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:42,855 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,855 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:42,855 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,855 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:45:42,855 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,855 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:42,855 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,855 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:42,855 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,855 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:42,855 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,856 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:42,856 on stmt: jump 592
DEBUG 2022-02-14 16:45:42,856 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:45:42,856 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,856 on stmt: jump 456
DEBUG 2022-02-14 16:45:42,856 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:45:42,856 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,856 on stmt: jump 356
DEBUG 2022-02-14 16:45:42,856 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:45:42,856 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,856 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,856 find_def var='H_batch' stmt=$604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,856 find_def_from_top label 600
DEBUG 2022-02-14 16:45:42,856 idom 356 from label 600
DEBUG 2022-02-14 16:45:42,856 find_def_from_bottom label 356
DEBUG 2022-02-14 16:45:42,856 find_def_from_top label 356
DEBUG 2022-02-14 16:45:42,856 idom 306 from label 356
DEBUG 2022-02-14 16:45:42,856 find_def_from_bottom label 306
DEBUG 2022-02-14 16:45:42,856 find_def_from_top label 306
DEBUG 2022-02-14 16:45:42,856 idom 282 from label 306
DEBUG 2022-02-14 16:45:42,856 find_def_from_bottom label 282
DEBUG 2022-02-14 16:45:42,856 find_def_from_top label 282
DEBUG 2022-02-14 16:45:42,856 idom 252 from label 282
DEBUG 2022-02-14 16:45:42,856 find_def_from_bottom label 252
DEBUG 2022-02-14 16:45:42,857 find_def_from_top label 252
DEBUG 2022-02-14 16:45:42,857 idom 182 from label 252
DEBUG 2022-02-14 16:45:42,857 find_def_from_bottom label 182
DEBUG 2022-02-14 16:45:42,857 find_def_from_top label 182
DEBUG 2022-02-14 16:45:42,857 idom 178 from label 182
DEBUG 2022-02-14 16:45:42,857 find_def_from_bottom label 178
DEBUG 2022-02-14 16:45:42,857 find_def_from_top label 178
DEBUG 2022-02-14 16:45:42,857 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 178
DEBUG 2022-02-14 16:45:42,857 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:42,857 incoming_def H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,857 find_def_from_bottom label 600
DEBUG 2022-02-14 16:45:42,857 incoming_def H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,857 replaced with: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,857 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:45:42,857 on stmt: jump 178
DEBUG 2022-02-14 16:45:42,857 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:45:42,857 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,857 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,857 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,857 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:45:42,857 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:45:42,857 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,857 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:42,858 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,858 find_def var='H_batch' stmt=$620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:45:42,858 find_def_from_top label 616
DEBUG 2022-02-14 16:45:42,858 idom 610 from label 616
DEBUG 2022-02-14 16:45:42,858 find_def_from_bottom label 610
DEBUG 2022-02-14 16:45:42,858 find_def_from_top label 610
DEBUG 2022-02-14 16:45:42,858 idom 178 from label 610
DEBUG 2022-02-14 16:45:42,858 find_def_from_bottom label 178
DEBUG 2022-02-14 16:45:42,858 replaced with: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:45:42,858 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:45:42,858 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,858 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,858 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:45:42,858 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:45:42,858 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,858 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:45:42,858 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,858 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:45:42,858 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,858 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:45:42,858 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:45:42,858 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:45:42,859 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:45:42,859 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,859 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:45:42,859 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:45:42,859 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,859 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,859 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,859 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,859 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:45:42,859 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,859 find_def var='H_batch' stmt=$656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,859 find_def_from_top label 632
DEBUG 2022-02-14 16:45:42,859 idom 630 from label 632
DEBUG 2022-02-14 16:45:42,859 find_def_from_bottom label 630
DEBUG 2022-02-14 16:45:42,859 find_def_from_top label 630
DEBUG 2022-02-14 16:45:42,859 idom 616 from label 630
DEBUG 2022-02-14 16:45:42,859 find_def_from_bottom label 616
DEBUG 2022-02-14 16:45:42,859 find_def_from_top label 616
DEBUG 2022-02-14 16:45:42,859 idom 610 from label 616
DEBUG 2022-02-14 16:45:42,859 find_def_from_bottom label 610
DEBUG 2022-02-14 16:45:42,860 find_def_from_top label 610
DEBUG 2022-02-14 16:45:42,860 idom 178 from label 610
DEBUG 2022-02-14 16:45:42,860 find_def_from_bottom label 178
DEBUG 2022-02-14 16:45:42,860 replaced with: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,860 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:45:42,860 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,860 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:45:42,860 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:45:42,860 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:42,860 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,860 find_def var='H_batch' stmt=H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,860 find_def_from_top label 632
DEBUG 2022-02-14 16:45:42,860 idom 630 from label 632
DEBUG 2022-02-14 16:45:42,860 find_def_from_bottom label 630
DEBUG 2022-02-14 16:45:42,860 find_def_from_top label 630
DEBUG 2022-02-14 16:45:42,860 idom 616 from label 630
DEBUG 2022-02-14 16:45:42,860 find_def_from_bottom label 616
DEBUG 2022-02-14 16:45:42,860 find_def_from_top label 616
DEBUG 2022-02-14 16:45:42,860 idom 610 from label 616
DEBUG 2022-02-14 16:45:42,860 find_def_from_bottom label 610
DEBUG 2022-02-14 16:45:42,860 find_def_from_top label 610
DEBUG 2022-02-14 16:45:42,861 idom 178 from label 610
DEBUG 2022-02-14 16:45:42,861 find_def_from_bottom label 178
DEBUG 2022-02-14 16:45:42,861 replaced with: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:45:42,861 on stmt: jump 630
DEBUG 2022-02-14 16:45:42,861 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:45:42,861 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9b35b80>
DEBUG 2022-02-14 16:45:42,861 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,861 find_def var='H_batch' stmt=$680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:45:42,861 find_def_from_top label 678
DEBUG 2022-02-14 16:45:42,861 idom 610 from label 678
DEBUG 2022-02-14 16:45:42,861 find_def_from_bottom label 610
DEBUG 2022-02-14 16:45:42,861 find_def_from_top label 610
DEBUG 2022-02-14 16:45:42,861 idom 178 from label 610
DEBUG 2022-02-14 16:45:42,861 find_def_from_bottom label 178
DEBUG 2022-02-14 16:45:42,861 replaced with: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:45:42,861 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:45:42,876 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,877 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,877 stack: []
DEBUG 2022-02-14 16:45:42,877 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack []
DEBUG 2022-02-14 16:45:42,877 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack []
DEBUG 2022-02-14 16:45:42,877 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:42,877 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:42,877 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:42,877 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,877 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:42,877 end state. edges=[]
DEBUG 2022-02-14 16:45:42,877 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:42,877 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:42,877 defmap: {}
DEBUG 2022-02-14 16:45:42,878 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,878 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,878 keep phismap: {}
DEBUG 2022-02-14 16:45:42,878 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:42,878 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:42,878 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:42,878 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:42,879 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:42,879 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9a0e7c0>
DEBUG 2022-02-14 16:45:42,879 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:42,879 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:42,880 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:42,880 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,880 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:42,880 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:42,880 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba4d3a60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba0f9280>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba4d3d90>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71ba0f91f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba0f98e0>]})
DEBUG 2022-02-14 16:45:42,880 SSA violators set()
DEBUG 2022-02-14 16:45:42,919 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_GLOBAL(arg=0, lineno=187)
           4	LOAD_METHOD(arg=1, lineno=187)
           6	LOAD_FAST(arg=0, lineno=187)
           8	LOAD_FAST(arg=0, lineno=187)
          10	BUILD_TUPLE(arg=2, lineno=187)
          12	CALL_METHOD(arg=1, lineno=187)
          14	STORE_FAST(arg=4, lineno=187)
          16	LOAD_GLOBAL(arg=0, lineno=188)
          18	LOAD_METHOD(arg=2, lineno=188)
          20	LOAD_FAST(arg=4, lineno=188)
          22	LOAD_CONST(arg=1, lineno=188)
          24	COMPARE_OP(arg=3, lineno=188)
          26	CALL_METHOD(arg=1, lineno=188)
          28	LOAD_CONST(arg=1, lineno=188)
          30	BINARY_SUBSCR(arg=None, lineno=188)
          32	STORE_FAST(arg=5, lineno=188)
          34	LOAD_GLOBAL(arg=3, lineno=189)
          36	LOAD_FAST(arg=5, lineno=189)
          38	CALL_FUNCTION(arg=1, lineno=189)
          40	LOAD_CONST(arg=2, lineno=189)
          42	BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
          44	STORE_FAST(arg=6, lineno=189)
          46	LOAD_FAST(arg=0, lineno=191)
          48	LOAD_GLOBAL(arg=0, lineno=191)
          50	LOAD_METHOD(arg=2, lineno=191)
          52	LOAD_FAST(arg=0, lineno=191)
          54	LOAD_CONST(arg=1, lineno=191)
          56	COMPARE_OP(arg=3, lineno=191)
          58	CALL_METHOD(arg=1, lineno=191)
          60	BINARY_SUBSCR(arg=None, lineno=191)
          62	STORE_FAST(arg=7, lineno=191)
          64	LOAD_GLOBAL(arg=4, lineno=193)
          66	LOAD_FAST(arg=1, lineno=193)
          68	LOAD_FAST(arg=5, lineno=193)
          70	LOAD_FAST(arg=5, lineno=193)
          72	CALL_FUNCTION(arg=3, lineno=193)
          74	STORE_FAST(arg=8, lineno=193)
          76	LOAD_GLOBAL(arg=0, lineno=195)
          78	LOAD_ATTR(arg=5, lineno=195)
          80	LOAD_FAST(arg=8, lineno=195)
          82	LOAD_GLOBAL(arg=0, lineno=195)
          84	LOAD_ATTR(arg=6, lineno=195)
          86	LOAD_CONST(arg=3, lineno=195)
          88	CALL_FUNCTION_KW(arg=2, lineno=195)
          90	STORE_FAST(arg=9, lineno=195)
          92	LOAD_FAST(arg=7, lineno=196)
          94	LOAD_FAST(arg=8, lineno=196)
          96	LOAD_CONST(arg=0, lineno=196)
          98	LOAD_CONST(arg=0, lineno=196)
         100	BUILD_SLICE(arg=2, lineno=196)
         102	LOAD_FAST(arg=6, lineno=196)
         104	LOAD_CONST(arg=0, lineno=196)
         106	BUILD_SLICE(arg=2, lineno=196)
         108	BUILD_TUPLE(arg=2, lineno=196)
         110	BINARY_SUBSCR(arg=None, lineno=196)
         112	BINARY_MULTIPLY(arg=None, lineno=196)
         114	LOAD_FAST(arg=9, lineno=196)
         116	LOAD_CONST(arg=0, lineno=196)
         118	LOAD_CONST(arg=0, lineno=196)
         120	BUILD_SLICE(arg=2, lineno=196)
         122	LOAD_CONST(arg=0, lineno=196)
         124	LOAD_FAST(arg=6, lineno=196)
         126	BUILD_SLICE(arg=2, lineno=196)
         128	BUILD_TUPLE(arg=2, lineno=196)
         130	STORE_SUBSCR(arg=None, lineno=196)
         132	LOAD_FAST(arg=7, lineno=197)
         134	LOAD_FAST(arg=8, lineno=197)
         136	LOAD_CONST(arg=0, lineno=197)
         138	LOAD_CONST(arg=0, lineno=197)
         140	BUILD_SLICE(arg=2, lineno=197)
         142	LOAD_CONST(arg=0, lineno=197)
         144	LOAD_FAST(arg=6, lineno=197)
         146	BUILD_SLICE(arg=2, lineno=197)
         148	BUILD_TUPLE(arg=2, lineno=197)
         150	BINARY_SUBSCR(arg=None, lineno=197)
         152	BINARY_MULTIPLY(arg=None, lineno=197)
         154	LOAD_FAST(arg=9, lineno=197)
         156	LOAD_CONST(arg=0, lineno=197)
         158	LOAD_CONST(arg=0, lineno=197)
         160	BUILD_SLICE(arg=2, lineno=197)
         162	LOAD_FAST(arg=6, lineno=197)
         164	LOAD_CONST(arg=0, lineno=197)
         166	BUILD_SLICE(arg=2, lineno=197)
         168	BUILD_TUPLE(arg=2, lineno=197)
         170	STORE_SUBSCR(arg=None, lineno=197)
         172	LOAD_FAST(arg=2, lineno=199)
         174	LOAD_FAST(arg=5, lineno=199)
         176	BINARY_SUBSCR(arg=None, lineno=199)
         178	STORE_FAST(arg=10, lineno=199)
         180	LOAD_GLOBAL(arg=0, lineno=201)
         182	LOAD_ATTR(arg=5, lineno=201)
         184	LOAD_FAST(arg=10, lineno=201)
         186	LOAD_GLOBAL(arg=0, lineno=201)
         188	LOAD_ATTR(arg=6, lineno=201)
         190	LOAD_CONST(arg=3, lineno=201)
         192	CALL_FUNCTION_KW(arg=2, lineno=201)
         194	STORE_FAST(arg=11, lineno=201)
         196	LOAD_FAST(arg=7, lineno=202)
         198	LOAD_FAST(arg=10, lineno=202)
         200	LOAD_FAST(arg=6, lineno=202)
         202	LOAD_CONST(arg=0, lineno=202)
         204	BUILD_SLICE(arg=2, lineno=202)
         206	BINARY_SUBSCR(arg=None, lineno=202)
         208	BINARY_MULTIPLY(arg=None, lineno=202)
         210	LOAD_FAST(arg=11, lineno=202)
         212	LOAD_CONST(arg=0, lineno=202)
         214	LOAD_FAST(arg=6, lineno=202)
         216	BUILD_SLICE(arg=2, lineno=202)
         218	STORE_SUBSCR(arg=None, lineno=202)
         220	LOAD_FAST(arg=7, lineno=203)
         222	LOAD_FAST(arg=10, lineno=203)
         224	LOAD_CONST(arg=0, lineno=203)
         226	LOAD_FAST(arg=6, lineno=203)
         228	BUILD_SLICE(arg=2, lineno=203)
         230	BINARY_SUBSCR(arg=None, lineno=203)
         232	BINARY_MULTIPLY(arg=None, lineno=203)
         234	LOAD_FAST(arg=11, lineno=203)
         236	LOAD_FAST(arg=6, lineno=203)
         238	LOAD_CONST(arg=0, lineno=203)
         240	BUILD_SLICE(arg=2, lineno=203)
         242	STORE_SUBSCR(arg=None, lineno=203)
         244	LOAD_FAST(arg=3, lineno=205)
         246	LOAD_CONST(arg=0, lineno=205)
         248	IS_OP(arg=1, lineno=205)
         250	POP_JUMP_IF_FALSE(arg=328, lineno=205)
         254	LOAD_FAST(arg=3, lineno=206)
         256	LOAD_FAST(arg=5, lineno=206)
         258	BINARY_SUBSCR(arg=None, lineno=206)
         260	STORE_FAST(arg=12, lineno=206)
         262	LOAD_GLOBAL(arg=0, lineno=207)
         264	LOAD_ATTR(arg=5, lineno=207)
         266	LOAD_FAST(arg=12, lineno=207)
         268	LOAD_GLOBAL(arg=0, lineno=207)
         270	LOAD_ATTR(arg=6, lineno=207)
         272	LOAD_CONST(arg=3, lineno=207)
         274	CALL_FUNCTION_KW(arg=2, lineno=207)
         276	STORE_FAST(arg=13, lineno=207)
         278	LOAD_FAST(arg=7, lineno=208)
         280	LOAD_FAST(arg=12, lineno=208)
         282	LOAD_FAST(arg=6, lineno=208)
         284	LOAD_CONST(arg=0, lineno=208)
         286	BUILD_SLICE(arg=2, lineno=208)
         288	BINARY_SUBSCR(arg=None, lineno=208)
         290	BINARY_MULTIPLY(arg=None, lineno=208)
         292	LOAD_FAST(arg=13, lineno=208)
         294	LOAD_CONST(arg=0, lineno=208)
         296	LOAD_FAST(arg=6, lineno=208)
         298	BUILD_SLICE(arg=2, lineno=208)
         300	STORE_SUBSCR(arg=None, lineno=208)
         302	LOAD_FAST(arg=7, lineno=209)
         304	LOAD_FAST(arg=12, lineno=209)
         306	LOAD_CONST(arg=0, lineno=209)
         308	LOAD_FAST(arg=6, lineno=209)
         310	BUILD_SLICE(arg=2, lineno=209)
         312	BINARY_SUBSCR(arg=None, lineno=209)
         314	BINARY_MULTIPLY(arg=None, lineno=209)
         316	LOAD_FAST(arg=13, lineno=209)
         318	LOAD_FAST(arg=6, lineno=209)
         320	LOAD_CONST(arg=0, lineno=209)
         322	BUILD_SLICE(arg=2, lineno=209)
         324	STORE_SUBSCR(arg=None, lineno=209)
         326	JUMP_FORWARD(arg=4, lineno=209)
>        328	LOAD_CONST(arg=0, lineno=211)
         330	STORE_FAST(arg=13, lineno=211)
>        332	LOAD_FAST(arg=9, lineno=213)
         334	LOAD_FAST(arg=11, lineno=213)
         336	LOAD_FAST(arg=10, lineno=213)
         338	LOAD_FAST(arg=13, lineno=213)
         340	BUILD_TUPLE(arg=4, lineno=213)
         342	RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-14 16:45:42,919 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,919 stack: []
DEBUG 2022-02-14 16:45:42,919 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack []
DEBUG 2022-02-14 16:45:42,920 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack []
DEBUG 2022-02-14 16:45:42,920 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$4load_method.1', '$kept_edges6.2']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$4load_method.1', '$kept_edges6.2', '$kept_edges8.3']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=14, inst=STORE_FAST(arg=4, lineno=187)
DEBUG 2022-02-14 16:45:42,920 stack ['$12call_method.5']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=188)
DEBUG 2022-02-14 16:45:42,920 stack []
DEBUG 2022-02-14 16:45:42,920 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=188)
DEBUG 2022-02-14 16:45:42,920 stack ['$16load_global.6']
DEBUG 2022-02-14 16:45:42,920 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=188)
DEBUG 2022-02-14 16:45:42,920 stack ['$18load_method.7']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$18load_method.7', '$z20.8']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$18load_method.7', '$z20.8', '$const22.9']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$18load_method.7', '$24compare_op.10']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$26call_method.11']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$26call_method.11', '$const28.12']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=32, inst=STORE_FAST(arg=5, lineno=188)
DEBUG 2022-02-14 16:45:42,921 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=189)
DEBUG 2022-02-14 16:45:42,921 stack []
DEBUG 2022-02-14 16:45:42,921 dispatch pc=36, inst=LOAD_FAST(arg=5, lineno=189)
DEBUG 2022-02-14 16:45:42,921 stack ['$34load_global.14']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=189)
DEBUG 2022-02-14 16:45:42,921 stack ['$34load_global.14', '$nonzero_rows36.15']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=189)
DEBUG 2022-02-14 16:45:42,921 stack ['$38call_function.16']
DEBUG 2022-02-14 16:45:42,921 dispatch pc=42, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
DEBUG 2022-02-14 16:45:42,921 stack ['$38call_function.16', '$const40.17']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=44, inst=STORE_FAST(arg=6, lineno=189)
DEBUG 2022-02-14 16:45:42,922 stack ['$42binary_floor_divide.18']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack []
DEBUG 2022-02-14 16:45:42,922 dispatch pc=48, inst=LOAD_GLOBAL(arg=0, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$48load_global.20']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$50load_method.21']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22', '$const54.23']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$50load_method.21', '$56compare_op.24']
DEBUG 2022-02-14 16:45:42,922 dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:42,922 stack ['$kept_edges46.19', '$58call_method.25']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=62, inst=STORE_FAST(arg=7, lineno=191)
DEBUG 2022-02-14 16:45:42,923 stack ['$60binary_subscr.26']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=64, inst=LOAD_GLOBAL(arg=4, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack []
DEBUG 2022-02-14 16:45:42,923 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack ['$64load_global.27']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack ['$64load_global.27', '$A66.28']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=72, inst=CALL_FUNCTION(arg=3, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=74, inst=STORE_FAST(arg=8, lineno=193)
DEBUG 2022-02-14 16:45:42,923 stack ['$72call_function.31']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=76, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-14 16:45:42,923 stack []
DEBUG 2022-02-14 16:45:42,923 dispatch pc=78, inst=LOAD_ATTR(arg=5, lineno=195)
DEBUG 2022-02-14 16:45:42,923 stack ['$76load_global.32']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=80, inst=LOAD_FAST(arg=8, lineno=195)
DEBUG 2022-02-14 16:45:42,923 stack ['$78load_attr.33']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-14 16:45:42,923 stack ['$78load_attr.33', '$A_nonzero80.34']
DEBUG 2022-02-14 16:45:42,923 dispatch pc=84, inst=LOAD_ATTR(arg=6, lineno=195)
DEBUG 2022-02-14 16:45:42,924 stack ['$78load_attr.33', '$A_nonzero80.34', '$82load_global.35']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=195)
DEBUG 2022-02-14 16:45:42,924 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=88, inst=CALL_FUNCTION_KW(arg=2, lineno=195)
DEBUG 2022-02-14 16:45:42,924 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36', '$const86.37']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=90, inst=STORE_FAST(arg=9, lineno=195)
DEBUG 2022-02-14 16:45:42,924 stack ['$88call_function_kw.38']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack []
DEBUG 2022-02-14 16:45:42,924 dispatch pc=94, inst=LOAD_FAST(arg=8, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=96, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=100, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41', '$const98.42']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=104, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,924 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45']
DEBUG 2022-02-14 16:45:42,924 dispatch pc=106, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45', '$const104.46']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=108, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$106build_slice.48']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$108build_tuple.49']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=112, inst=BINARY_MULTIPLY(arg=None, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$kept_edges_nonzero92.39', '$110binary_subscr.50']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=114, inst=LOAD_FAST(arg=9, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=116, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51', '$AX_nonzero114.52']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=120, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53', '$const118.54']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=122, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-14 16:45:42,925 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57']
DEBUG 2022-02-14 16:45:42,925 dispatch pc=126, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,926 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57', '$n_nonzero_edges124.58']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=128, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-14 16:45:42,926 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$126build_slice.60']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=130, inst=STORE_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-14 16:45:42,926 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$128build_tuple.61']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack []
DEBUG 2022-02-14 16:45:42,926 dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack ['$kept_edges_nonzero132.62']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=136, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=138, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=140, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64', '$const138.65']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=142, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,926 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67']
DEBUG 2022-02-14 16:45:42,926 dispatch pc=144, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68', '$n_nonzero_edges144.69']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=148, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$146build_slice.71']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$148build_tuple.72']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$kept_edges_nonzero132.62', '$150binary_subscr.73']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=154, inst=LOAD_FAST(arg=9, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=156, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74', '$AX_nonzero154.75']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=158, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=160, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76', '$const158.77']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=162, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:42,927 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80']
DEBUG 2022-02-14 16:45:42,927 dispatch pc=166, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,928 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80', '$const164.81']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=168, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-14 16:45:42,928 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$166build_slice.83']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=170, inst=STORE_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-14 16:45:42,928 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$168build_tuple.84']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=199)
DEBUG 2022-02-14 16:45:42,928 stack []
DEBUG 2022-02-14 16:45:42,928 dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=199)
DEBUG 2022-02-14 16:45:42,928 stack ['$D172.85']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=176, inst=BINARY_SUBSCR(arg=None, lineno=199)
DEBUG 2022-02-14 16:45:42,928 stack ['$D172.85', '$nonzero_rows174.86']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=178, inst=STORE_FAST(arg=10, lineno=199)
DEBUG 2022-02-14 16:45:42,928 stack ['$176binary_subscr.87']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=180, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-14 16:45:42,928 stack []
DEBUG 2022-02-14 16:45:42,928 dispatch pc=182, inst=LOAD_ATTR(arg=5, lineno=201)
DEBUG 2022-02-14 16:45:42,928 stack ['$180load_global.88']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=184, inst=LOAD_FAST(arg=10, lineno=201)
DEBUG 2022-02-14 16:45:42,928 stack ['$182load_attr.89']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=186, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-14 16:45:42,928 stack ['$182load_attr.89', '$D_nonzero184.90']
DEBUG 2022-02-14 16:45:42,928 dispatch pc=188, inst=LOAD_ATTR(arg=6, lineno=201)
DEBUG 2022-02-14 16:45:42,928 stack ['$182load_attr.89', '$D_nonzero184.90', '$186load_global.91']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=190, inst=LOAD_CONST(arg=3, lineno=201)
DEBUG 2022-02-14 16:45:42,929 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=192, inst=CALL_FUNCTION_KW(arg=2, lineno=201)
DEBUG 2022-02-14 16:45:42,929 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92', '$const190.93']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=194, inst=STORE_FAST(arg=11, lineno=201)
DEBUG 2022-02-14 16:45:42,929 stack ['$192call_function_kw.94']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=196, inst=LOAD_FAST(arg=7, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack []
DEBUG 2022-02-14 16:45:42,929 dispatch pc=198, inst=LOAD_FAST(arg=10, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=200, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=202, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97', '$const202.98']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$204build_slice.100']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=208, inst=BINARY_MULTIPLY(arg=None, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$kept_edges_nonzero196.95', '$206binary_subscr.101']
DEBUG 2022-02-14 16:45:42,929 dispatch pc=210, inst=LOAD_FAST(arg=11, lineno=202)
DEBUG 2022-02-14 16:45:42,929 stack ['$208binary_multiply.102']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=212, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-14 16:45:42,930 stack ['$208binary_multiply.102', '$XD_nonzero210.103']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-14 16:45:42,930 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-14 16:45:42,930 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104', '$n_nonzero_edges214.105']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=218, inst=STORE_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-14 16:45:42,930 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$216build_slice.107']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=220, inst=LOAD_FAST(arg=7, lineno=203)
DEBUG 2022-02-14 16:45:42,930 stack []
DEBUG 2022-02-14 16:45:42,930 dispatch pc=222, inst=LOAD_FAST(arg=10, lineno=203)
DEBUG 2022-02-14 16:45:42,930 stack ['$kept_edges_nonzero220.108']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=224, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-14 16:45:42,930 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=226, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-14 16:45:42,930 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-14 16:45:42,930 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110', '$n_nonzero_edges226.111']
DEBUG 2022-02-14 16:45:42,930 dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$228build_slice.113']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=232, inst=BINARY_MULTIPLY(arg=None, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$kept_edges_nonzero220.108', '$230binary_subscr.114']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=234, inst=LOAD_FAST(arg=11, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$232binary_multiply.115']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=236, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$232binary_multiply.115', '$XD_nonzero234.116']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=238, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=240, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117', '$const238.118']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=242, inst=STORE_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-14 16:45:42,931 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$240build_slice.120']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=244, inst=LOAD_FAST(arg=3, lineno=205)
DEBUG 2022-02-14 16:45:42,931 stack []
DEBUG 2022-02-14 16:45:42,931 dispatch pc=246, inst=LOAD_CONST(arg=0, lineno=205)
DEBUG 2022-02-14 16:45:42,931 stack ['$oddV244.121']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=248, inst=IS_OP(arg=1, lineno=205)
DEBUG 2022-02-14 16:45:42,931 stack ['$oddV244.121', '$const246.122']
DEBUG 2022-02-14 16:45:42,931 dispatch pc=250, inst=POP_JUMP_IF_FALSE(arg=328, lineno=205)
DEBUG 2022-02-14 16:45:42,931 stack ['$248is_op.123']
DEBUG 2022-02-14 16:45:42,931 end state. edges=[Edge(pc=254, stack=(), blockstack=(), npush=0), Edge(pc=328, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,932 pending: deque([State(pc_initial=254 nstack_initial=0), State(pc_initial=328 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,932 stack: []
DEBUG 2022-02-14 16:45:42,932 dispatch pc=254, inst=LOAD_FAST(arg=3, lineno=206)
DEBUG 2022-02-14 16:45:42,932 stack []
DEBUG 2022-02-14 16:45:42,932 dispatch pc=256, inst=LOAD_FAST(arg=5, lineno=206)
DEBUG 2022-02-14 16:45:42,932 stack ['$oddV254.0']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=206)
DEBUG 2022-02-14 16:45:42,932 stack ['$oddV254.0', '$nonzero_rows256.1']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=260, inst=STORE_FAST(arg=12, lineno=206)
DEBUG 2022-02-14 16:45:42,932 stack ['$258binary_subscr.2']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=262, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack []
DEBUG 2022-02-14 16:45:42,932 dispatch pc=264, inst=LOAD_ATTR(arg=5, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack ['$262load_global.3']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=266, inst=LOAD_FAST(arg=12, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack ['$264load_attr.4']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=268, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack ['$264load_attr.4', '$oddV_nonzero266.5']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=270, inst=LOAD_ATTR(arg=6, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$268load_global.6']
DEBUG 2022-02-14 16:45:42,932 dispatch pc=272, inst=LOAD_CONST(arg=3, lineno=207)
DEBUG 2022-02-14 16:45:42,932 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=274, inst=CALL_FUNCTION_KW(arg=2, lineno=207)
DEBUG 2022-02-14 16:45:42,933 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7', '$const272.8']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=276, inst=STORE_FAST(arg=13, lineno=207)
DEBUG 2022-02-14 16:45:42,933 stack ['$274call_function_kw.9']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=278, inst=LOAD_FAST(arg=7, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack []
DEBUG 2022-02-14 16:45:42,933 dispatch pc=280, inst=LOAD_FAST(arg=12, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=282, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=284, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=286, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12', '$const284.13']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$286build_slice.15']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$kept_edges_nonzero278.10', '$288binary_subscr.16']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=292, inst=LOAD_FAST(arg=13, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$290binary_multiply.17']
DEBUG 2022-02-14 16:45:42,933 dispatch pc=294, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-14 16:45:42,933 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=296, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-14 16:45:42,934 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=298, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-14 16:45:42,934 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19', '$n_nonzero_edges296.20']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=300, inst=STORE_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-14 16:45:42,934 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$298build_slice.22']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=302, inst=LOAD_FAST(arg=7, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack []
DEBUG 2022-02-14 16:45:42,934 dispatch pc=304, inst=LOAD_FAST(arg=12, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=308, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25', '$n_nonzero_edges308.26']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=312, inst=BINARY_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$310build_slice.28']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=314, inst=BINARY_MULTIPLY(arg=None, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$kept_edges_nonzero302.23', '$312binary_subscr.29']
DEBUG 2022-02-14 16:45:42,934 dispatch pc=316, inst=LOAD_FAST(arg=13, lineno=209)
DEBUG 2022-02-14 16:45:42,934 stack ['$314binary_multiply.30']
DEBUG 2022-02-14 16:45:42,935 dispatch pc=318, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-14 16:45:42,935 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31']
DEBUG 2022-02-14 16:45:42,935 dispatch pc=320, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-14 16:45:42,935 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32']
DEBUG 2022-02-14 16:45:42,935 dispatch pc=322, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-14 16:45:42,935 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32', '$const320.33']
DEBUG 2022-02-14 16:45:42,935 dispatch pc=324, inst=STORE_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-14 16:45:42,935 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$322build_slice.35']
DEBUG 2022-02-14 16:45:42,935 dispatch pc=326, inst=JUMP_FORWARD(arg=4, lineno=209)
DEBUG 2022-02-14 16:45:42,935 stack []
DEBUG 2022-02-14 16:45:42,935 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,935 pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,935 stack: []
DEBUG 2022-02-14 16:45:42,935 dispatch pc=328, inst=LOAD_CONST(arg=0, lineno=211)
DEBUG 2022-02-14 16:45:42,935 stack []
DEBUG 2022-02-14 16:45:42,935 dispatch pc=330, inst=STORE_FAST(arg=13, lineno=211)
DEBUG 2022-02-14 16:45:42,935 stack ['$const328.0']
DEBUG 2022-02-14 16:45:42,935 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:42,935 pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,935 stack: []
DEBUG 2022-02-14 16:45:42,935 dispatch pc=332, inst=LOAD_FAST(arg=9, lineno=213)
DEBUG 2022-02-14 16:45:42,935 stack []
DEBUG 2022-02-14 16:45:42,936 dispatch pc=334, inst=LOAD_FAST(arg=11, lineno=213)
DEBUG 2022-02-14 16:45:42,936 stack ['$AX_nonzero332.0']
DEBUG 2022-02-14 16:45:42,936 dispatch pc=336, inst=LOAD_FAST(arg=10, lineno=213)
DEBUG 2022-02-14 16:45:42,936 stack ['$AX_nonzero332.0', '$XD_nonzero334.1']
DEBUG 2022-02-14 16:45:42,936 dispatch pc=338, inst=LOAD_FAST(arg=13, lineno=213)
DEBUG 2022-02-14 16:45:42,936 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2']
DEBUG 2022-02-14 16:45:42,936 dispatch pc=340, inst=BUILD_TUPLE(arg=4, lineno=213)
DEBUG 2022-02-14 16:45:42,936 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3']
DEBUG 2022-02-14 16:45:42,936 dispatch pc=342, inst=RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-14 16:45:42,936 stack ['$340build_tuple.4']
DEBUG 2022-02-14 16:45:42,936 end state. edges=[]
DEBUG 2022-02-14 16:45:42,936 pending: deque([State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,936 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:42,936 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:42,936 defmap: {}
DEBUG 2022-02-14 16:45:42,936 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,936 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,936 keep phismap: {}
DEBUG 2022-02-14 16:45:42,936 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:42,937 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:42,937 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$kept_edges6.2'}), (8, {'res': '$kept_edges8.3'}), (10, {'items': ['$kept_edges6.2', '$kept_edges8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_method.7'}), (20, {'res': '$z20.8'}), (22, {'res': '$const22.9'}), (24, {'lhs': '$z20.8', 'rhs': '$const22.9', 'res': '$24compare_op.10'}), (26, {'func': '$18load_method.7', 'args': ['$24compare_op.10'], 'res': '$26call_method.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$26call_method.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$34load_global.14'}), (36, {'res': '$nonzero_rows36.15'}), (38, {'func': '$34load_global.14', 'args': ['$nonzero_rows36.15'], 'res': '$38call_function.16'}), (40, {'res': '$const40.17'}), (42, {'lhs': '$38call_function.16', 'rhs': '$const40.17', 'res': '$42binary_floor_divide.18'}), (44, {'value': '$42binary_floor_divide.18'}), (46, {'res': '$kept_edges46.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_method.21'}), (52, {'res': '$kept_edges52.22'}), (54, {'res': '$const54.23'}), (56, {'lhs': '$kept_edges52.22', 'rhs': '$const54.23', 'res': '$56compare_op.24'}), (58, {'func': '$50load_method.21', 'args': ['$56compare_op.24'], 'res': '$58call_method.25'}), (60, {'index': '$58call_method.25', 'target': '$kept_edges46.19', 'res': '$60binary_subscr.26'}), (62, {'value': '$60binary_subscr.26'}), (64, {'res': '$64load_global.27'}), (66, {'res': '$A66.28'}), (68, {'res': '$nonzero_rows68.29'}), (70, {'res': '$nonzero_rows70.30'}), (72, {'func': '$64load_global.27', 'args': ['$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30'], 'res': '$72call_function.31'}), (74, {'value': '$72call_function.31'}), (76, {'res': '$76load_global.32'}), (78, {'item': '$76load_global.32', 'res': '$78load_attr.33'}), (80, {'res': '$A_nonzero80.34'}), (82, {'res': '$82load_global.35'}), (84, {'item': '$82load_global.35', 'res': '$84load_attr.36'}), (86, {'res': '$const86.37'}), (88, {'func': '$78load_attr.33', 'args': ['$A_nonzero80.34', '$84load_attr.36'], 'names': '$const86.37', 'res': '$88call_function_kw.38'}), (90, {'value': '$88call_function_kw.38'}), (92, {'res': '$kept_edges_nonzero92.39'}), (94, {'res': '$A_nonzero94.40'}), (96, {'res': '$const96.41'}), (98, {'res': '$const98.42'}), (100, {'start': '$const96.41', 'stop': '$const98.42', 'step': None, 'res': '$100build_slice.44', 'slicevar': '$100build_slice.43'}), (102, {'res': '$n_nonzero_edges102.45'}), (104, {'res': '$const104.46'}), (106, {'start': '$n_nonzero_edges102.45', 'stop': '$const104.46', 'step': None, 'res': '$106build_slice.48', 'slicevar': '$106build_slice.47'}), (108, {'items': ['$100build_slice.44', '$106build_slice.48'], 'res': '$108build_tuple.49'}), (110, {'index': '$108build_tuple.49', 'target': '$A_nonzero94.40', 'res': '$110binary_subscr.50'}), (112, {'lhs': '$kept_edges_nonzero92.39', 'rhs': '$110binary_subscr.50', 'res': '$112binary_multiply.51'}), (114, {'res': '$AX_nonzero114.52'}), (116, {'res': '$const116.53'}), (118, {'res': '$const118.54'}), (120, {'start': '$const116.53', 'stop': '$const118.54', 'step': None, 'res': '$120build_slice.56', 'slicevar': '$120build_slice.55'}), (122, {'res': '$const122.57'}), (124, {'res': '$n_nonzero_edges124.58'}), (126, {'start': '$const122.57', 'stop': '$n_nonzero_edges124.58', 'step': None, 'res': '$126build_slice.60', 'slicevar': '$126build_slice.59'}), (128, {'items': ['$120build_slice.56', '$126build_slice.60'], 'res': '$128build_tuple.61'}), (130, {'target': '$AX_nonzero114.52', 'index': '$128build_tuple.61', 'value': '$112binary_multiply.51'}), (132, {'res': '$kept_edges_nonzero132.62'}), (134, {'res': '$A_nonzero134.63'}), (136, {'res': '$const136.64'}), (138, {'res': '$const138.65'}), (140, {'start': '$const136.64', 'stop': '$const138.65', 'step': None, 'res': '$140build_slice.67', 'slicevar': '$140build_slice.66'}), (142, {'res': '$const142.68'}), (144, {'res': '$n_nonzero_edges144.69'}), (146, {'start': '$const142.68', 'stop': '$n_nonzero_edges144.69', 'step': None, 'res': '$146build_slice.71', 'slicevar': '$146build_slice.70'}), (148, {'items': ['$140build_slice.67', '$146build_slice.71'], 'res': '$148build_tuple.72'}), (150, {'index': '$148build_tuple.72', 'target': '$A_nonzero134.63', 'res': '$150binary_subscr.73'}), (152, {'lhs': '$kept_edges_nonzero132.62', 'rhs': '$150binary_subscr.73', 'res': '$152binary_multiply.74'}), (154, {'res': '$AX_nonzero154.75'}), (156, {'res': '$const156.76'}), (158, {'res': '$const158.77'}), (160, {'start': '$const156.76', 'stop': '$const158.77', 'step': None, 'res': '$160build_slice.79', 'slicevar': '$160build_slice.78'}), (162, {'res': '$n_nonzero_edges162.80'}), (164, {'res': '$const164.81'}), (166, {'start': '$n_nonzero_edges162.80', 'stop': '$const164.81', 'step': None, 'res': '$166build_slice.83', 'slicevar': '$166build_slice.82'}), (168, {'items': ['$160build_slice.79', '$166build_slice.83'], 'res': '$168build_tuple.84'}), (170, {'target': '$AX_nonzero154.75', 'index': '$168build_tuple.84', 'value': '$152binary_multiply.74'}), (172, {'res': '$D172.85'}), (174, {'res': '$nonzero_rows174.86'}), (176, {'index': '$nonzero_rows174.86', 'target': '$D172.85', 'res': '$176binary_subscr.87'}), (178, {'value': '$176binary_subscr.87'}), (180, {'res': '$180load_global.88'}), (182, {'item': '$180load_global.88', 'res': '$182load_attr.89'}), (184, {'res': '$D_nonzero184.90'}), (186, {'res': '$186load_global.91'}), (188, {'item': '$186load_global.91', 'res': '$188load_attr.92'}), (190, {'res': '$const190.93'}), (192, {'func': '$182load_attr.89', 'args': ['$D_nonzero184.90', '$188load_attr.92'], 'names': '$const190.93', 'res': '$192call_function_kw.94'}), (194, {'value': '$192call_function_kw.94'}), (196, {'res': '$kept_edges_nonzero196.95'}), (198, {'res': '$D_nonzero198.96'}), (200, {'res': '$n_nonzero_edges200.97'}), (202, {'res': '$const202.98'}), (204, {'start': '$n_nonzero_edges200.97', 'stop': '$const202.98', 'step': None, 'res': '$204build_slice.100', 'slicevar': '$204build_slice.99'}), (206, {'index': '$204build_slice.100', 'target': '$D_nonzero198.96', 'res': '$206binary_subscr.101'}), (208, {'lhs': '$kept_edges_nonzero196.95', 'rhs': '$206binary_subscr.101', 'res': '$208binary_multiply.102'}), (210, {'res': '$XD_nonzero210.103'}), (212, {'res': '$const212.104'}), (214, {'res': '$n_nonzero_edges214.105'}), (216, {'start': '$const212.104', 'stop': '$n_nonzero_edges214.105', 'step': None, 'res': '$216build_slice.107', 'slicevar': '$216build_slice.106'}), (218, {'target': '$XD_nonzero210.103', 'index': '$216build_slice.107', 'value': '$208binary_multiply.102'}), (220, {'res': '$kept_edges_nonzero220.108'}), (222, {'res': '$D_nonzero222.109'}), (224, {'res': '$const224.110'}), (226, {'res': '$n_nonzero_edges226.111'}), (228, {'start': '$const224.110', 'stop': '$n_nonzero_edges226.111', 'step': None, 'res': '$228build_slice.113', 'slicevar': '$228build_slice.112'}), (230, {'index': '$228build_slice.113', 'target': '$D_nonzero222.109', 'res': '$230binary_subscr.114'}), (232, {'lhs': '$kept_edges_nonzero220.108', 'rhs': '$230binary_subscr.114', 'res': '$232binary_multiply.115'}), (234, {'res': '$XD_nonzero234.116'}), (236, {'res': '$n_nonzero_edges236.117'}), (238, {'res': '$const238.118'}), (240, {'start': '$n_nonzero_edges236.117', 'stop': '$const238.118', 'step': None, 'res': '$240build_slice.120', 'slicevar': '$240build_slice.119'}), (242, {'target': '$XD_nonzero234.116', 'index': '$240build_slice.120', 'value': '$232binary_multiply.115'}), (244, {'res': '$oddV244.121'}), (246, {'res': '$const246.122'}), (248, {'lhs': '$oddV244.121', 'rhs': '$const246.122', 'res': '$248is_op.123'}), (250, {'pred': '$248is_op.123'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={254: (), 328: ()})
DEBUG 2022-02-14 16:45:42,937 block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$oddV254.0'}), (256, {'res': '$nonzero_rows256.1'}), (258, {'index': '$nonzero_rows256.1', 'target': '$oddV254.0', 'res': '$258binary_subscr.2'}), (260, {'value': '$258binary_subscr.2'}), (262, {'res': '$262load_global.3'}), (264, {'item': '$262load_global.3', 'res': '$264load_attr.4'}), (266, {'res': '$oddV_nonzero266.5'}), (268, {'res': '$268load_global.6'}), (270, {'item': '$268load_global.6', 'res': '$270load_attr.7'}), (272, {'res': '$const272.8'}), (274, {'func': '$264load_attr.4', 'args': ['$oddV_nonzero266.5', '$270load_attr.7'], 'names': '$const272.8', 'res': '$274call_function_kw.9'}), (276, {'value': '$274call_function_kw.9'}), (278, {'res': '$kept_edges_nonzero278.10'}), (280, {'res': '$oddV_nonzero280.11'}), (282, {'res': '$n_nonzero_edges282.12'}), (284, {'res': '$const284.13'}), (286, {'start': '$n_nonzero_edges282.12', 'stop': '$const284.13', 'step': None, 'res': '$286build_slice.15', 'slicevar': '$286build_slice.14'}), (288, {'index': '$286build_slice.15', 'target': '$oddV_nonzero280.11', 'res': '$288binary_subscr.16'}), (290, {'lhs': '$kept_edges_nonzero278.10', 'rhs': '$288binary_subscr.16', 'res': '$290binary_multiply.17'}), (292, {'res': '$oddVX_nonzero292.18'}), (294, {'res': '$const294.19'}), (296, {'res': '$n_nonzero_edges296.20'}), (298, {'start': '$const294.19', 'stop': '$n_nonzero_edges296.20', 'step': None, 'res': '$298build_slice.22', 'slicevar': '$298build_slice.21'}), (300, {'target': '$oddVX_nonzero292.18', 'index': '$298build_slice.22', 'value': '$290binary_multiply.17'}), (302, {'res': '$kept_edges_nonzero302.23'}), (304, {'res': '$oddV_nonzero304.24'}), (306, {'res': '$const306.25'}), (308, {'res': '$n_nonzero_edges308.26'}), (310, {'start': '$const306.25', 'stop': '$n_nonzero_edges308.26', 'step': None, 'res': '$310build_slice.28', 'slicevar': '$310build_slice.27'}), (312, {'index': '$310build_slice.28', 'target': '$oddV_nonzero304.24', 'res': '$312binary_subscr.29'}), (314, {'lhs': '$kept_edges_nonzero302.23', 'rhs': '$312binary_subscr.29', 'res': '$314binary_multiply.30'}), (316, {'res': '$oddVX_nonzero316.31'}), (318, {'res': '$n_nonzero_edges318.32'}), (320, {'res': '$const320.33'}), (322, {'start': '$n_nonzero_edges318.32', 'stop': '$const320.33', 'step': None, 'res': '$322build_slice.35', 'slicevar': '$322build_slice.34'}), (324, {'target': '$oddVX_nonzero316.31', 'index': '$322build_slice.35', 'value': '$314binary_multiply.30'}), (326, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-14 16:45:42,937 block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'value': '$const328.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-14 16:45:42,937 block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$AX_nonzero332.0'}), (334, {'res': '$XD_nonzero334.1'}), (336, {'res': '$D_nonzero336.2'}), (338, {'res': '$oddVX_nonzero338.3'}), (340, {'items': ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3'], 'res': '$340build_tuple.4'}), (342, {'retval': '$340build_tuple.4', 'castval': '$342return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:42,940 label 0:
    kept_edges = arg(0, name=kept_edges)     ['kept_edges']
    A = arg(1, name=A)                       ['A']
    D = arg(2, name=D)                       ['D']
    oddV = arg(3, name=oddV)                 ['oddV']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)]) ['$10build_tuple.4', 'kept_edges', 'kept_edges']
    z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'z']
    $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.6']
    $18load_method.7 = getattr(value=$16load_global.6, attr=where) ['$16load_global.6', '$18load_method.7']
    $const22.9 = const(int, 0)               ['$const22.9']
    $24compare_op.10 = z != $const22.9       ['$24compare_op.10', '$const22.9', 'z']
    $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$18load_method.7', '$24compare_op.10', '$26call_method.11']
    $const28.12 = const(int, 0)              ['$const28.12']
    nonzero_rows = getitem(value=$26call_method.11, index=$const28.12, fn=<built-in function getitem>) ['$26call_method.11', '$const28.12', 'nonzero_rows']
    $34load_global.14 = global(len: <built-in function len>) ['$34load_global.14']
    $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$34load_global.14', '$38call_function.16', 'nonzero_rows']
    $const40.17 = const(int, 2)              ['$const40.17']
    n_nonzero_edges = $38call_function.16 // $const40.17 ['$38call_function.16', '$const40.17', 'n_nonzero_edges']
    $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$48load_global.20']
    $50load_method.21 = getattr(value=$48load_global.20, attr=where) ['$48load_global.20', '$50load_method.21']
    $const54.23 = const(int, 0)              ['$const54.23']
    $56compare_op.24 = kept_edges != $const54.23 ['$56compare_op.24', '$const54.23', 'kept_edges']
    $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None) ['$50load_method.21', '$56compare_op.24', '$58call_method.25']
    kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>) ['$58call_method.25', 'kept_edges', 'kept_edges_nonzero']
    $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7f71beb254c0>)) ['$64load_global.27']
    A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$64load_global.27', 'A', 'A_nonzero', 'nonzero_rows', 'nonzero_rows']
    $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$76load_global.32']
    $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like) ['$76load_global.32', '$78load_attr.33']
    $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$82load_global.35']
    $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128) ['$82load_global.35', '$84load_attr.36']
    AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None) ['$78load_attr.33', '$84load_attr.36', 'AX_nonzero', 'A_nonzero']
    $const96.41 = const(NoneType, None)      ['$const96.41']
    $const98.42 = const(NoneType, None)      ['$const98.42']
    $100build_slice.43 = global(slice: <class 'slice'>) ['$100build_slice.43']
    $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$100build_slice.43', '$100build_slice.44', '$const96.41', '$const98.42']
    $const104.46 = const(NoneType, None)     ['$const104.46']
    $106build_slice.47 = global(slice: <class 'slice'>) ['$106build_slice.47']
    $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$106build_slice.47', '$106build_slice.48', '$const104.46', 'n_nonzero_edges']
    $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)]) ['$100build_slice.44', '$106build_slice.48', '$108build_tuple.49']
    $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>) ['$108build_tuple.49', '$110binary_subscr.50', 'A_nonzero']
    $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50 ['$110binary_subscr.50', '$112binary_multiply.51', 'kept_edges_nonzero']
    $const116.53 = const(NoneType, None)     ['$const116.53']
    $const118.54 = const(NoneType, None)     ['$const118.54']
    $120build_slice.55 = global(slice: <class 'slice'>) ['$120build_slice.55']
    $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$120build_slice.55', '$120build_slice.56', '$const116.53', '$const118.54']
    $const122.57 = const(NoneType, None)     ['$const122.57']
    $126build_slice.59 = global(slice: <class 'slice'>) ['$126build_slice.59']
    $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$126build_slice.59', '$126build_slice.60', '$const122.57', 'n_nonzero_edges']
    $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)]) ['$120build_slice.56', '$126build_slice.60', '$128build_tuple.61']
    AX_nonzero[$128build_tuple.61] = $112binary_multiply.51 ['$112binary_multiply.51', '$128build_tuple.61', 'AX_nonzero']
    $const136.64 = const(NoneType, None)     ['$const136.64']
    $const138.65 = const(NoneType, None)     ['$const138.65']
    $140build_slice.66 = global(slice: <class 'slice'>) ['$140build_slice.66']
    $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$140build_slice.66', '$140build_slice.67', '$const136.64', '$const138.65']
    $const142.68 = const(NoneType, None)     ['$const142.68']
    $146build_slice.70 = global(slice: <class 'slice'>) ['$146build_slice.70']
    $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$146build_slice.70', '$146build_slice.71', '$const142.68', 'n_nonzero_edges']
    $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)]) ['$140build_slice.67', '$146build_slice.71', '$148build_tuple.72']
    $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>) ['$148build_tuple.72', '$150binary_subscr.73', 'A_nonzero']
    $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73 ['$150binary_subscr.73', '$152binary_multiply.74', 'kept_edges_nonzero']
    $const156.76 = const(NoneType, None)     ['$const156.76']
    $const158.77 = const(NoneType, None)     ['$const158.77']
    $160build_slice.78 = global(slice: <class 'slice'>) ['$160build_slice.78']
    $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$160build_slice.78', '$160build_slice.79', '$const156.76', '$const158.77']
    $const164.81 = const(NoneType, None)     ['$const164.81']
    $166build_slice.82 = global(slice: <class 'slice'>) ['$166build_slice.82']
    $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$166build_slice.82', '$166build_slice.83', '$const164.81', 'n_nonzero_edges']
    $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)]) ['$160build_slice.79', '$166build_slice.83', '$168build_tuple.84']
    AX_nonzero[$168build_tuple.84] = $152binary_multiply.74 ['$152binary_multiply.74', '$168build_tuple.84', 'AX_nonzero']
    D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>) ['D', 'D_nonzero', 'nonzero_rows']
    $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$180load_global.88']
    $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like) ['$180load_global.88', '$182load_attr.89']
    $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$186load_global.91']
    $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128) ['$186load_global.91', '$188load_attr.92']
    XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None) ['$182load_attr.89', '$188load_attr.92', 'D_nonzero', 'XD_nonzero']
    $const202.98 = const(NoneType, None)     ['$const202.98']
    $204build_slice.99 = global(slice: <class 'slice'>) ['$204build_slice.99']
    $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None) ['$204build_slice.100', '$204build_slice.99', '$const202.98', 'n_nonzero_edges']
    $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>) ['$204build_slice.100', '$206binary_subscr.101', 'D_nonzero']
    $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101 ['$206binary_subscr.101', '$208binary_multiply.102', 'kept_edges_nonzero']
    $const212.104 = const(NoneType, None)    ['$const212.104']
    $216build_slice.106 = global(slice: <class 'slice'>) ['$216build_slice.106']
    $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$216build_slice.106', '$216build_slice.107', '$const212.104', 'n_nonzero_edges']
    XD_nonzero[$216build_slice.107] = $208binary_multiply.102 ['$208binary_multiply.102', '$216build_slice.107', 'XD_nonzero']
    $const224.110 = const(NoneType, None)    ['$const224.110']
    $228build_slice.112 = global(slice: <class 'slice'>) ['$228build_slice.112']
    $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$228build_slice.112', '$228build_slice.113', '$const224.110', 'n_nonzero_edges']
    $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>) ['$228build_slice.113', '$230binary_subscr.114', 'D_nonzero']
    $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114 ['$230binary_subscr.114', '$232binary_multiply.115', 'kept_edges_nonzero']
    $const238.118 = const(NoneType, None)    ['$const238.118']
    $240build_slice.119 = global(slice: <class 'slice'>) ['$240build_slice.119']
    $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None) ['$240build_slice.119', '$240build_slice.120', '$const238.118', 'n_nonzero_edges']
    XD_nonzero[$240build_slice.120] = $232binary_multiply.115 ['$232binary_multiply.115', '$240build_slice.120', 'XD_nonzero']
    $const246.122 = const(NoneType, None)    ['$const246.122']
    $248is_op.123 = oddV is not $const246.122 ['$248is_op.123', '$const246.122', 'oddV']
    bool250 = global(bool: <class 'bool'>)   ['bool250']
    $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None) ['$248is_op.123', '$250pred', 'bool250']
    branch $250pred, 254, 328                ['$250pred']
label 254:
    oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>) ['nonzero_rows', 'oddV', 'oddV_nonzero']
    $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$262load_global.3']
    $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like) ['$262load_global.3', '$264load_attr.4']
    $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$268load_global.6']
    $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128) ['$268load_global.6', '$270load_attr.7']
    oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None) ['$264load_attr.4', '$270load_attr.7', 'oddVX_nonzero', 'oddV_nonzero']
    $const284.13 = const(NoneType, None)     ['$const284.13']
    $286build_slice.14 = global(slice: <class 'slice'>) ['$286build_slice.14']
    $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None) ['$286build_slice.14', '$286build_slice.15', '$const284.13', 'n_nonzero_edges']
    $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>) ['$286build_slice.15', '$288binary_subscr.16', 'oddV_nonzero']
    $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16 ['$288binary_subscr.16', '$290binary_multiply.17', 'kept_edges_nonzero']
    $const294.19 = const(NoneType, None)     ['$const294.19']
    $298build_slice.21 = global(slice: <class 'slice'>) ['$298build_slice.21']
    $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$298build_slice.21', '$298build_slice.22', '$const294.19', 'n_nonzero_edges']
    oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17 ['$290binary_multiply.17', '$298build_slice.22', 'oddVX_nonzero']
    $const306.25 = const(NoneType, None)     ['$const306.25']
    $310build_slice.27 = global(slice: <class 'slice'>) ['$310build_slice.27']
    $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$310build_slice.27', '$310build_slice.28', '$const306.25', 'n_nonzero_edges']
    $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>) ['$310build_slice.28', '$312binary_subscr.29', 'oddV_nonzero']
    $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29 ['$312binary_subscr.29', '$314binary_multiply.30', 'kept_edges_nonzero']
    $const320.33 = const(NoneType, None)     ['$const320.33']
    $322build_slice.34 = global(slice: <class 'slice'>) ['$322build_slice.34']
    $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None) ['$322build_slice.34', '$322build_slice.35', '$const320.33', 'n_nonzero_edges']
    oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30 ['$314binary_multiply.30', '$322build_slice.35', 'oddVX_nonzero']
    jump 332                                 []
label 328:
    oddVX_nonzero = const(NoneType, None)    ['oddVX_nonzero']
    jump 332                                 []
label 332:
    $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)]) ['$340build_tuple.4', 'AX_nonzero', 'D_nonzero', 'XD_nonzero', 'oddVX_nonzero']
    $342return_value.5 = cast(value=$340build_tuple.4) ['$340build_tuple.4', '$342return_value.5']
    return $342return_value.5                ['$342return_value.5']

DEBUG 2022-02-14 16:45:42,949 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:42,949 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9910e20>
DEBUG 2022-02-14 16:45:42,949 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:45:42,949 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:45:42,949 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:45:42,949 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:45:42,949 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,949 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:45:42,949 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:45:42,949 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,949 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,949 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:45:42,950 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,950 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:45:42,950 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,950 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:45:42,950 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,950 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:42,950 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,950 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,950 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:45:42,950 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,950 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:45:42,950 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:45:42,950 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:45:42,950 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,950 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,950 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7f71beb254c0>))
DEBUG 2022-02-14 16:45:42,950 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,950 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,950 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:45:42,951 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:45:42,951 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,951 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:45:42,951 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,951 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,951 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,952 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:45:42,952 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,952 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,952 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,952 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,952 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:45:42,952 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,952 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,952 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,952 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,952 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:45:42,952 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:45:42,953 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:45:42,953 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:45:42,953 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,953 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:45:42,953 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,953 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,953 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:45:42,954 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,954 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,954 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:45:42,954 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,954 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:45:42,954 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,954 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:45:42,954 ==== SSA block analysis pass on 254
DEBUG 2022-02-14 16:45:42,954 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9910e20>
DEBUG 2022-02-14 16:45:42,954 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:45:42,954 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:45:42,954 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,954 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,954 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,954 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,954 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,955 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:45:42,955 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,955 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,955 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,955 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:45:42,955 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,955 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,955 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,955 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,955 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:45:42,955 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,955 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,955 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,955 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:45:42,955 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,955 ==== SSA block analysis pass on 328
DEBUG 2022-02-14 16:45:42,955 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9910e20>
DEBUG 2022-02-14 16:45:42,955 on stmt: oddVX_nonzero = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,955 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,955 ==== SSA block analysis pass on 332
DEBUG 2022-02-14 16:45:42,955 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9910e20>
DEBUG 2022-02-14 16:45:42,955 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:45:42,956 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:45:42,956 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:45:42,956 defs defaultdict(<class 'list'>,
            {'$100build_slice.43': [<numba.core.ir.Assign object at 0x7f71b94a8c10>],
             '$100build_slice.44': [<numba.core.ir.Assign object at 0x7f71b94a8d30>],
             '$106build_slice.47': [<numba.core.ir.Assign object at 0x7f71b94a6190>],
             '$106build_slice.48': [<numba.core.ir.Assign object at 0x7f71b94a62b0>],
             '$108build_tuple.49': [<numba.core.ir.Assign object at 0x7f71b94a6460>],
             '$10build_tuple.4': [<numba.core.ir.Assign object at 0x7f71b94c8d30>],
             '$110binary_subscr.50': [<numba.core.ir.Assign object at 0x7f71b94a65e0>],
             '$112binary_multiply.51': [<numba.core.ir.Assign object at 0x7f71b94a6760>],
             '$120build_slice.55': [<numba.core.ir.Assign object at 0x7f71b94a6cd0>],
             '$120build_slice.56': [<numba.core.ir.Assign object at 0x7f71b94a6df0>],
             '$126build_slice.59': [<numba.core.ir.Assign object at 0x7f71b94a2250>],
             '$126build_slice.60': [<numba.core.ir.Assign object at 0x7f71b94a2370>],
             '$128build_tuple.61': [<numba.core.ir.Assign object at 0x7f71b94a2520>],
             '$140build_slice.66': [<numba.core.ir.Assign object at 0x7f71b94a2c70>],
             '$140build_slice.67': [<numba.core.ir.Assign object at 0x7f71b94a2d90>],
             '$146build_slice.70': [<numba.core.ir.Assign object at 0x7f71b94a11f0>],
             '$146build_slice.71': [<numba.core.ir.Assign object at 0x7f71b94a1310>],
             '$148build_tuple.72': [<numba.core.ir.Assign object at 0x7f71b94a14c0>],
             '$150binary_subscr.73': [<numba.core.ir.Assign object at 0x7f71b94a1640>],
             '$152binary_multiply.74': [<numba.core.ir.Assign object at 0x7f71b94a17c0>],
             '$160build_slice.78': [<numba.core.ir.Assign object at 0x7f71b94a1d30>],
             '$160build_slice.79': [<numba.core.ir.Assign object at 0x7f71b94a1e50>],
             '$166build_slice.82': [<numba.core.ir.Assign object at 0x7f71b949f2b0>],
             '$166build_slice.83': [<numba.core.ir.Assign object at 0x7f71b949f3d0>],
             '$168build_tuple.84': [<numba.core.ir.Assign object at 0x7f71b949f580>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x7f71b94b1190>],
             '$180load_global.88': [<numba.core.ir.Assign object at 0x7f71b949fc70>],
             '$182load_attr.89': [<numba.core.ir.Assign object at 0x7f71b949fdf0>],
             '$186load_global.91': [<numba.core.ir.Assign object at 0x7f71b98ffee0>],
             '$188load_attr.92': [<numba.core.ir.Assign object at 0x7f71b98ffb20>],
             '$18load_method.7': [<numba.core.ir.Assign object at 0x7f71b94b1310>],
             '$204build_slice.100': [<numba.core.ir.Assign object at 0x7f71b98ff0a0>],
             '$204build_slice.99': [<numba.core.ir.Assign object at 0x7f71b98ffa90>],
             '$206binary_subscr.101': [<numba.core.ir.Assign object at 0x7f71b98fb2e0>],
             '$208binary_multiply.102': [<numba.core.ir.Assign object at 0x7f71b98fb790>],
             '$216build_slice.106': [<numba.core.ir.Assign object at 0x7f71b98fb6a0>],
             '$216build_slice.107': [<numba.core.ir.Assign object at 0x7f71b98fb520>],
             '$228build_slice.112': [<numba.core.ir.Assign object at 0x7f71b98fba30>],
             '$228build_slice.113': [<numba.core.ir.Assign object at 0x7f71b98f1070>],
             '$230binary_subscr.114': [<numba.core.ir.Assign object at 0x7f71b98f1220>],
             '$232binary_multiply.115': [<numba.core.ir.Assign object at 0x7f71b98f13a0>],
             '$240build_slice.119': [<numba.core.ir.Assign object at 0x7f71b98f18b0>],
             '$240build_slice.120': [<numba.core.ir.Assign object at 0x7f71b98f19d0>],
             '$248is_op.123': [<numba.core.ir.Assign object at 0x7f71b98f1ee0>],
             '$24compare_op.10': [<numba.core.ir.Assign object at 0x7f71b94b1760>],
             '$250pred': [<numba.core.ir.Assign object at 0x7f71b98ebe50>],
             '$262load_global.3': [<numba.core.ir.Assign object at 0x7f71b94a8e50>],
             '$264load_attr.4': [<numba.core.ir.Assign object at 0x7f71b94a27f0>],
             '$268load_global.6': [<numba.core.ir.Assign object at 0x7f71b949ff10>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x7f71b94b1940>],
             '$270load_attr.7': [<numba.core.ir.Assign object at 0x7f71b98ff7c0>],
             '$286build_slice.14': [<numba.core.ir.Assign object at 0x7f71b98ebc40>],
             '$286build_slice.15': [<numba.core.ir.Assign object at 0x7f71b98eb3a0>],
             '$288binary_subscr.16': [<numba.core.ir.Assign object at 0x7f71b98eb130>],
             '$290binary_multiply.17': [<numba.core.ir.Assign object at 0x7f71b98eb940>],
             '$298build_slice.21': [<numba.core.ir.Assign object at 0x7f71b9920370>],
             '$298build_slice.22': [<numba.core.ir.Assign object at 0x7f71b9920490>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b94c8bb0>],
             '$310build_slice.27': [<numba.core.ir.Assign object at 0x7f71b9920bb0>],
             '$310build_slice.28': [<numba.core.ir.Assign object at 0x7f71b9920cd0>],
             '$312binary_subscr.29': [<numba.core.ir.Assign object at 0x7f71b9920e80>],
             '$314binary_multiply.30': [<numba.core.ir.Assign object at 0x7f71b990f040>],
             '$322build_slice.34': [<numba.core.ir.Assign object at 0x7f71b990f550>],
             '$322build_slice.35': [<numba.core.ir.Assign object at 0x7f71b990f670>],
             '$340build_tuple.4': [<numba.core.ir.Assign object at 0x7f71b990fbe0>],
             '$342return_value.5': [<numba.core.ir.Assign object at 0x7f71b990fd30>],
             '$34load_global.14': [<numba.core.ir.Assign object at 0x7f71b94b1e50>],
             '$38call_function.16': [<numba.core.ir.Assign object at 0x7f71b94b2190>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x7f71b94b27f0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71b94c8a30>],
             '$50load_method.21': [<numba.core.ir.Assign object at 0x7f71b94b2970>],
             '$56compare_op.24': [<numba.core.ir.Assign object at 0x7f71b94b2dc0>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7f71b94b2fa0>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x7f71b94b5370>],
             '$76load_global.32': [<numba.core.ir.Assign object at 0x7f71b94b5af0>],
             '$78load_attr.33': [<numba.core.ir.Assign object at 0x7f71b94b5c70>],
             '$82load_global.35': [<numba.core.ir.Assign object at 0x7f71b94b5f10>],
             '$84load_attr.36': [<numba.core.ir.Assign object at 0x7f71b94a80d0>],
             '$const104.46': [<numba.core.ir.Assign object at 0x7f71b94a8fd0>],
             '$const116.53': [<numba.core.ir.Assign object at 0x7f71b94a69d0>],
             '$const118.54': [<numba.core.ir.Assign object at 0x7f71b94a6b50>],
             '$const122.57': [<numba.core.ir.Assign object at 0x7f71b94a6f70>],
             '$const136.64': [<numba.core.ir.Assign object at 0x7f71b94a2970>],
             '$const138.65': [<numba.core.ir.Assign object at 0x7f71b94a2af0>],
             '$const142.68': [<numba.core.ir.Assign object at 0x7f71b94a2f10>],
             '$const156.76': [<numba.core.ir.Assign object at 0x7f71b94a1a30>],
             '$const158.77': [<numba.core.ir.Assign object at 0x7f71b94a1bb0>],
             '$const164.81': [<numba.core.ir.Assign object at 0x7f71b949f130>],
             '$const202.98': [<numba.core.ir.Assign object at 0x7f71b98ff940>],
             '$const212.104': [<numba.core.ir.Assign object at 0x7f71b98fbe20>],
             '$const22.9': [<numba.core.ir.Assign object at 0x7f71b94b15b0>],
             '$const224.110': [<numba.core.ir.Assign object at 0x7f71b98fbfa0>],
             '$const238.118': [<numba.core.ir.Assign object at 0x7f71b98f1730>],
             '$const246.122': [<numba.core.ir.Assign object at 0x7f71b98f1d30>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7f71b94b1a30>],
             '$const284.13': [<numba.core.ir.Assign object at 0x7f71b98eb850>],
             '$const294.19': [<numba.core.ir.Assign object at 0x7f71b99200d0>],
             '$const306.25': [<numba.core.ir.Assign object at 0x7f71b9920910>],
             '$const320.33': [<numba.core.ir.Assign object at 0x7f71b990f3d0>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7f71b94b22b0>],
             '$const54.23': [<numba.core.ir.Assign object at 0x7f71b94b2c10>],
             '$const96.41': [<numba.core.ir.Assign object at 0x7f71b94a8910>],
             '$const98.42': [<numba.core.ir.Assign object at 0x7f71b94a8a90>],
             'A': [<numba.core.ir.Assign object at 0x7f71b94c8cd0>],
             'AX_nonzero': [<numba.core.ir.Assign object at 0x7f71b94a8550>],
             'A_nonzero': [<numba.core.ir.Assign object at 0x7f71b94b58b0>],
             'D': [<numba.core.ir.Assign object at 0x7f71b9291be0>],
             'D_nonzero': [<numba.core.ir.Assign object at 0x7f71b949fa00>],
             'XD_nonzero': [<numba.core.ir.Assign object at 0x7f71b98ff2e0>],
             'bool250': [<numba.core.ir.Assign object at 0x7f71b98eb4f0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71b94c8250>],
             'kept_edges_nonzero': [<numba.core.ir.Assign object at 0x7f71b94b5100>],
             'n_nonzero_edges': [<numba.core.ir.Assign object at 0x7f71b94b2460>],
             'nonzero_rows': [<numba.core.ir.Assign object at 0x7f71b94c87c0>],
             'oddV': [<numba.core.ir.Assign object at 0x7f71b9291e50>],
             'oddVX_nonzero': [<numba.core.ir.Assign object at 0x7f71b98ebcd0>,
                               <numba.core.ir.Assign object at 0x7f71b98ebc70>],
             'oddV_nonzero': [<numba.core.ir.Assign object at 0x7f71b94b5640>],
             'z': [<numba.core.ir.Assign object at 0x7f71b94c8f40>]})
DEBUG 2022-02-14 16:45:42,957 SSA violators {'oddVX_nonzero'}
DEBUG 2022-02-14 16:45:42,957 Fix SSA violator on var oddVX_nonzero
DEBUG 2022-02-14 16:45:42,957 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,957 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,957 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:45:42,957 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:45:42,957 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:45:42,957 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:45:42,957 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,957 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:45:42,957 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:45:42,957 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,957 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,957 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:45:42,957 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,957 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:45:42,957 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,957 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:45:42,957 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,957 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:42,957 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,958 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,958 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:45:42,958 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,958 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:45:42,958 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:45:42,958 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:45:42,958 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,958 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,958 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7f71beb254c0>))
DEBUG 2022-02-14 16:45:42,958 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,958 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,958 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:45:42,958 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,958 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:45:42,958 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,958 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,958 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,958 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,958 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,959 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,959 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,959 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:45:42,959 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,959 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,959 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,959 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:45:42,959 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,959 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,959 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,960 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:45:42,960 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,960 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,960 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:45:42,960 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:45:42,960 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,960 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:45:42,961 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:45:42,961 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,961 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:45:42,961 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:45:42,961 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,961 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,961 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:45:42,961 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,961 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:45:42,962 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,962 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:45:42,962 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,962 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,962 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:45:42,962 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:45:42,962 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,962 first assign: oddVX_nonzero
DEBUG 2022-02-14 16:45:42,962 replaced with: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,962 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,962 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,962 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,962 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:45:42,962 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,962 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,963 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,963 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:45:42,963 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,963 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,963 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,963 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,963 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:45:42,963 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,963 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,963 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,963 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:45:42,963 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,963 ==== SSA block rewrite pass on 328
DEBUG 2022-02-14 16:45:42,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,963 on stmt: oddVX_nonzero = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,963 replaced with: oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,963 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,963 ==== SSA block rewrite pass on 332
DEBUG 2022-02-14 16:45:42,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,963 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:45:42,963 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:45:42,963 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:45:42,964 Replaced assignments: defaultdict(<class 'list'>,
            {254: [<numba.core.ir.Assign object at 0x7f71b99106a0>],
             328: [<numba.core.ir.Assign object at 0x7f71b9910070>]})
DEBUG 2022-02-14 16:45:42,964 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:42,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,964 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:45:42,964 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:45:42,964 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:45:42,964 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:45:42,964 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,964 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:45:42,964 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:45:42,964 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,964 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,964 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:45:42,964 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:45:42,964 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:45:42,964 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,964 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:45:42,964 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,964 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:42,964 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,965 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:45:42,965 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:45:42,965 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,965 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:45:42,965 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:45:42,965 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:45:42,965 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,965 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,965 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7f71beb254c0>))
DEBUG 2022-02-14 16:45:42,965 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,965 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,965 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:45:42,965 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,965 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:45:42,965 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,965 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,965 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,965 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,965 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,966 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,966 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,966 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:45:42,966 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,966 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,966 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:45:42,966 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:45:42,966 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,966 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,966 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,967 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:45:42,967 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,967 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:45:42,967 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:45:42,967 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,967 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:45:42,967 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:45:42,968 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:45:42,968 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,968 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:45:42,968 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:45:42,968 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,968 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,968 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,969 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:45:42,969 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,969 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:45:42,969 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,969 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:45:42,969 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:45:42,969 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,969 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:45:42,969 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:45:42,969 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,969 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,969 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,969 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,969 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:45:42,970 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,970 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,970 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,970 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:45:42,970 find_def var='oddVX_nonzero' stmt=oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:45:42,970 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,970 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,970 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,970 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:42,970 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:45:42,970 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,970 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:42,970 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,970 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:45:42,970 find_def var='oddVX_nonzero' stmt=oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:45:42,970 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,970 ==== SSA block rewrite pass on 328
DEBUG 2022-02-14 16:45:42,970 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,970 on stmt: oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,970 on stmt: jump 332
DEBUG 2022-02-14 16:45:42,971 ==== SSA block rewrite pass on 332
DEBUG 2022-02-14 16:45:42,971 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9910280>
DEBUG 2022-02-14 16:45:42,971 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:45:42,971 find_def var='oddVX_nonzero' stmt=$340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:45:42,971 find_def_from_top label 332
DEBUG 2022-02-14 16:45:42,971 insert phi node oddVX_nonzero.2 = phi(incoming_values=[], incoming_blocks=[]) at 332
DEBUG 2022-02-14 16:45:42,971 find_def_from_bottom label 328
DEBUG 2022-02-14 16:45:42,971 incoming_def oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:45:42,971 find_def_from_bottom label 254
DEBUG 2022-02-14 16:45:42,971 incoming_def oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,971 replaced with: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero.2, _loop_hafnian_subroutines.py:213)])
DEBUG 2022-02-14 16:45:42,971 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:45:42,971 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:45:42,976 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,976 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:42,976 stack: []
DEBUG 2022-02-14 16:45:42,976 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,976 stack []
DEBUG 2022-02-14 16:45:42,976 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:42,976 stack []
DEBUG 2022-02-14 16:45:42,976 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:42,976 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:42,976 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:42,976 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:42,977 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:42,977 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:42,977 end state. edges=[]
DEBUG 2022-02-14 16:45:42,977 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:42,977 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:42,977 defmap: {}
DEBUG 2022-02-14 16:45:42,977 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,977 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:42,977 keep phismap: {}
DEBUG 2022-02-14 16:45:42,977 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:42,977 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:42,977 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:42,977 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:42,978 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:42,979 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b990abb0>
DEBUG 2022-02-14 16:45:42,979 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:42,979 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:42,979 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:42,979 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:42,979 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:42,979 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b99073a0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71b9907ac0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b9907be0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b990fe50>]})
DEBUG 2022-02-14 16:45:42,979 SSA violators set()
DEBUG 2022-02-14 16:45:43,044 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,044 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,044 stack: []
DEBUG 2022-02-14 16:45:43,044 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,045 stack []
DEBUG 2022-02-14 16:45:43,045 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,045 stack []
DEBUG 2022-02-14 16:45:43,045 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,045 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:43,045 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:43,045 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:43,045 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,045 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:43,045 end state. edges=[]
DEBUG 2022-02-14 16:45:43,045 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,045 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,045 defmap: {}
DEBUG 2022-02-14 16:45:43,045 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,045 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,045 keep phismap: {}
DEBUG 2022-02-14 16:45:43,045 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,045 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,045 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,046 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,047 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,047 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba1995e0>
DEBUG 2022-02-14 16:45:43,047 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:43,047 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:43,047 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,047 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:43,047 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,047 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba1a6940>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71ba378ca0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71ba378040>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba1a6250>]})
DEBUG 2022-02-14 16:45:43,047 SSA violators set()
DEBUG 2022-02-14 16:45:43,100 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,100 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,101 stack: []
DEBUG 2022-02-14 16:45:43,101 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack []
DEBUG 2022-02-14 16:45:43,101 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack []
DEBUG 2022-02-14 16:45:43,101 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:43,101 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:43,101 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:43,101 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,101 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:43,101 end state. edges=[]
DEBUG 2022-02-14 16:45:43,101 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,101 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,101 defmap: {}
DEBUG 2022-02-14 16:45:43,101 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,101 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,101 keep phismap: {}
DEBUG 2022-02-14 16:45:43,102 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,102 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,102 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,102 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:43,103 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,103 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b96125e0>
DEBUG 2022-02-14 16:45:43,103 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:43,103 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:43,103 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:43,103 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,103 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:43,103 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:43,104 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b96051f0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9612c70>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b96050d0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9612190>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9612130>]})
DEBUG 2022-02-14 16:45:43,104 SSA violators set()
DEBUG 2022-02-14 16:45:43,136 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,136 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,136 stack: []
DEBUG 2022-02-14 16:45:43,136 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,136 stack []
DEBUG 2022-02-14 16:45:43,136 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,136 stack []
DEBUG 2022-02-14 16:45:43,136 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:43,136 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:43,136 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:43,137 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:43,137 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:43,137 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:43,137 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:43,137 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:43,137 end state. edges=[]
DEBUG 2022-02-14 16:45:43,137 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,137 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,137 defmap: {}
DEBUG 2022-02-14 16:45:43,137 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,137 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,137 keep phismap: {}
DEBUG 2022-02-14 16:45:43,137 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,137 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,137 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,137 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:43,139 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,139 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9663850>
DEBUG 2022-02-14 16:45:43,139 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:43,139 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:43,139 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:43,139 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,139 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:43,139 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:43,139 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b9671700>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b96711c0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b96715e0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b96631f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9663190>]})
DEBUG 2022-02-14 16:45:43,139 SSA violators set()
DEBUG 2022-02-14 16:45:43,206 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,206 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,206 stack: []
DEBUG 2022-02-14 16:45:43,206 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:45:43,206 stack []
DEBUG 2022-02-14 16:45:43,206 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:45:43,206 stack []
DEBUG 2022-02-14 16:45:43,206 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:45:43,207 stack ['$z_12.0']
DEBUG 2022-02-14 16:45:43,207 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:45:43,207 stack ['$z_12.0', '$const4.1']
DEBUG 2022-02-14 16:45:43,207 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,207 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:43,207 end state. edges=[]
DEBUG 2022-02-14 16:45:43,207 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,207 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,207 defmap: {}
DEBUG 2022-02-14 16:45:43,207 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,207 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,207 keep phismap: {}
DEBUG 2022-02-14 16:45:43,207 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,207 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,207 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$z_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,207 label 0:
    z_1 = arg(0, name=z_1)                   ['z_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = z_1 != $const4.1        ['$6compare_op.2', '$const4.1', 'z_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,208 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,208 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b95f66d0>
DEBUG 2022-02-14 16:45:43,208 on stmt: z_1 = arg(0, name=z_1)
DEBUG 2022-02-14 16:45:43,208 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:43,209 on stmt: $6compare_op.2 = z_1 != $const4.1
DEBUG 2022-02-14 16:45:43,209 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:45:43,209 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,209 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b95f6fd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b95e8160>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b95f6e20>],
             'z_1': [<numba.core.ir.Assign object at 0x7f71b95f63d0>]})
DEBUG 2022-02-14 16:45:43,209 SSA violators set()
DEBUG 2022-02-14 16:45:43,219 bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:45:43,219 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,219 stack: []
DEBUG 2022-02-14 16:45:43,219 dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG 2022-02-14 16:45:43,219 stack []
DEBUG 2022-02-14 16:45:43,219 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG 2022-02-14 16:45:43,219 stack []
DEBUG 2022-02-14 16:45:43,219 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG 2022-02-14 16:45:43,219 stack ['$src_ndim2.0']
DEBUG 2022-02-14 16:45:43,219 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG 2022-02-14 16:45:43,219 stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG 2022-02-14 16:45:43,219 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG 2022-02-14 16:45:43,220 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:43,220 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,220 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,220 stack: []
DEBUG 2022-02-14 16:45:43,220 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG 2022-02-14 16:45:43,220 stack []
DEBUG 2022-02-14 16:45:43,220 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG 2022-02-14 16:45:43,220 stack ['$const10.0']
DEBUG 2022-02-14 16:45:43,220 end state. edges=[]
DEBUG 2022-02-14 16:45:43,220 pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,220 stack: []
DEBUG 2022-02-14 16:45:43,220 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG 2022-02-14 16:45:43,220 stack []
DEBUG 2022-02-14 16:45:43,220 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG 2022-02-14 16:45:43,220 stack ['$const14.0']
DEBUG 2022-02-14 16:45:43,220 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG 2022-02-14 16:45:43,220 stack []
DEBUG 2022-02-14 16:45:43,220 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG 2022-02-14 16:45:43,220 stack ['$dest_ndim18.1']
DEBUG 2022-02-14 16:45:43,220 dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG 2022-02-14 16:45:43,220 stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG 2022-02-14 16:45:43,220 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG 2022-02-14 16:45:43,221 stack ['$22binary_subtract.3']
DEBUG 2022-02-14 16:45:43,221 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,221 pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,221 stack: []
DEBUG 2022-02-14 16:45:43,221 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG 2022-02-14 16:45:43,221 stack []
DEBUG 2022-02-14 16:45:43,221 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG 2022-02-14 16:45:43,221 stack ['$src_index26.0']
DEBUG 2022-02-14 16:45:43,221 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG 2022-02-14 16:45:43,221 stack ['$src_index26.0', '$src_ndim28.1']
DEBUG 2022-02-14 16:45:43,221 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG 2022-02-14 16:45:43,221 stack ['$30compare_op.2']
DEBUG 2022-02-14 16:45:43,221 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,221 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,221 stack: []
DEBUG 2022-02-14 16:45:43,221 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG 2022-02-14 16:45:43,221 stack []
DEBUG 2022-02-14 16:45:43,221 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG 2022-02-14 16:45:43,221 stack ['$src_shape34.0']
DEBUG 2022-02-14 16:45:43,221 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG 2022-02-14 16:45:43,221 stack ['$src_shape34.0', '$src_index36.1']
DEBUG 2022-02-14 16:45:43,221 dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG 2022-02-14 16:45:43,221 stack ['$38binary_subscr.2']
DEBUG 2022-02-14 16:45:43,221 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG 2022-02-14 16:45:43,221 stack []
DEBUG 2022-02-14 16:45:43,221 dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG 2022-02-14 16:45:43,221 stack ['$dest_shape42.3']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG 2022-02-14 16:45:43,222 stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG 2022-02-14 16:45:43,222 stack ['$46binary_subscr.5']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG 2022-02-14 16:45:43,222 stack []
DEBUG 2022-02-14 16:45:43,222 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG 2022-02-14 16:45:43,222 stack ['$dest_dim_size50.6']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG 2022-02-14 16:45:43,222 stack ['$dest_dim_size50.6', '$const52.7']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG 2022-02-14 16:45:43,222 stack ['$54compare_op.8']
DEBUG 2022-02-14 16:45:43,222 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,222 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,222 stack: []
DEBUG 2022-02-14 16:45:43,222 dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG 2022-02-14 16:45:43,222 stack []
DEBUG 2022-02-14 16:45:43,222 dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:45:43,222 stack ['$dest_index120.0']
DEBUG 2022-02-14 16:45:43,222 end state. edges=[]
DEBUG 2022-02-14 16:45:43,222 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,222 stack: []
DEBUG 2022-02-14 16:45:43,222 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:45:43,222 stack []
DEBUG 2022-02-14 16:45:43,222 dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG 2022-02-14 16:45:43,222 stack ['$src_dim_size58.0']
DEBUG 2022-02-14 16:45:43,222 dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG 2022-02-14 16:45:43,223 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack ['$62compare_op.2']
DEBUG 2022-02-14 16:45:43,223 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,223 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,223 stack: []
DEBUG 2022-02-14 16:45:43,223 dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG 2022-02-14 16:45:43,223 stack []
DEBUG 2022-02-14 16:45:43,223 dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG 2022-02-14 16:45:43,223 stack ['$src_dim_size86.0']
DEBUG 2022-02-14 16:45:43,223 dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG 2022-02-14 16:45:43,223 stack ['$src_dim_size86.0', '$const88.1']
DEBUG 2022-02-14 16:45:43,223 dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG 2022-02-14 16:45:43,223 stack ['$90compare_op.2']
DEBUG 2022-02-14 16:45:43,223 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,223 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,223 stack: []
DEBUG 2022-02-14 16:45:43,223 dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack []
DEBUG 2022-02-14 16:45:43,223 dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack ['$src_dim_size66.0']
DEBUG 2022-02-14 16:45:43,223 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack ['$src_dim_size66.0', '$const68.1']
DEBUG 2022-02-14 16:45:43,223 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:45:43,223 stack ['$70compare_op.2']
DEBUG 2022-02-14 16:45:43,223 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,224 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,224 stack: []
DEBUG 2022-02-14 16:45:43,224 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:45:43,224 stack []
DEBUG 2022-02-14 16:45:43,224 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG 2022-02-14 16:45:43,224 stack ['$src_index102.0']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG 2022-02-14 16:45:43,224 stack ['$src_index102.0', '$const104.1']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:45:43,224 stack ['$106inplace_add.2']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:45:43,224 stack []
DEBUG 2022-02-14 16:45:43,224 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG 2022-02-14 16:45:43,224 stack ['$dest_index110.3']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG 2022-02-14 16:45:43,224 stack ['$dest_index110.3', '$const112.4']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:45:43,224 stack ['$114inplace_add.5']
DEBUG 2022-02-14 16:45:43,224 dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG 2022-02-14 16:45:43,224 stack []
DEBUG 2022-02-14 16:45:43,224 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,224 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,224 stack: []
DEBUG 2022-02-14 16:45:43,224 dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2022-02-14 16:45:43,224 stack []
DEBUG 2022-02-14 16:45:43,224 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG 2022-02-14 16:45:43,224 stack ['$src_dim_size94.0']
DEBUG 2022-02-14 16:45:43,225 dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2022-02-14 16:45:43,225 stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG 2022-02-14 16:45:43,225 dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-14 16:45:43,225 stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG 2022-02-14 16:45:43,225 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:43,225 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,225 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,225 stack: []
DEBUG 2022-02-14 16:45:43,225 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG 2022-02-14 16:45:43,225 stack []
DEBUG 2022-02-14 16:45:43,225 dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:45:43,225 stack ['$dest_index74.0']
DEBUG 2022-02-14 16:45:43,225 dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG 2022-02-14 16:45:43,225 stack ['$dest_index74.0', '$const76.1']
DEBUG 2022-02-14 16:45:43,225 dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG 2022-02-14 16:45:43,225 stack ['$78binary_add.2']
DEBUG 2022-02-14 16:45:43,225 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG 2022-02-14 16:45:43,225 stack ['$80unary_negative.3']
DEBUG 2022-02-14 16:45:43,225 end state. edges=[]
DEBUG 2022-02-14 16:45:43,225 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,225 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,225 pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,225 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,225 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,226 defmap: {}
DEBUG 2022-02-14 16:45:43,226 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,226 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,226 keep phismap: {}
DEBUG 2022-02-14 16:45:43,226 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,226 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,226 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2022-02-14 16:45:43,226 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,226 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:45:43,226 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG 2022-02-14 16:45:43,226 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:45:43,227 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,228 label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG 2022-02-14 16:45:43,233 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,233 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,233 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:45:43,233 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:45:43,233 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:45:43,233 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:45:43,234 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:45:43,234 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,234 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,234 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:45:43,234 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:45:43,234 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,234 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:45:43,234 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:45:43,234 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:45:43,234 ==== SSA block analysis pass on 14
DEBUG 2022-02-14 16:45:43,234 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,234 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,234 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,234 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,234 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:43,234 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,234 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:45:43,234 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,234 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,234 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:45:43,234 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:45:43,234 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,234 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,234 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,234 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:45:43,234 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:45:43,235 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,235 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,235 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:45:43,235 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:45:43,235 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,235 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:45:43,235 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,235 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,235 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:45:43,235 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:45:43,235 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,235 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,235 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:45:43,235 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,235 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,235 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:45:43,235 ==== SSA block analysis pass on 74
DEBUG 2022-02-14 16:45:43,235 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,235 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,235 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,235 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:45:43,235 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:45:43,235 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:45:43,235 ==== SSA block analysis pass on 86
DEBUG 2022-02-14 16:45:43,235 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,236 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,236 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:45:43,236 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,236 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,236 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:45:43,236 ==== SSA block analysis pass on 94
DEBUG 2022-02-14 16:45:43,236 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,236 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,236 on stmt: jump 102
DEBUG 2022-02-14 16:45:43,236 ==== SSA block analysis pass on 102
DEBUG 2022-02-14 16:45:43,236 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,236 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,236 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,236 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,236 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:45:43,236 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,236 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,236 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,236 ==== SSA block analysis pass on 120
DEBUG 2022-02-14 16:45:43,236 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b94efdf0>
DEBUG 2022-02-14 16:45:43,236 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,236 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:45:43,237 defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x7f71b94ef040>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x7f71b94ef520>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x7f71b94ef910>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f71b94f2af0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x7f71b94f4760>],
             '$32pred': [<numba.core.ir.Assign object at 0x7f71b94f49d0>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x7f71b94e9760>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f71b94e9160>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7f71b94e9250>],
             '$64pred': [<numba.core.ir.Assign object at 0x7f71b94e9280>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b94f2520>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7f71b94eb4c0>],
             '$72pred': [<numba.core.ir.Assign object at 0x7f71b94eb730>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x7f71b94ebc40>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x7f71b94ebd90>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x7f71b94ebf10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f71b94f2790>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x7f71b94e2460>],
             '$92pred': [<numba.core.ir.Assign object at 0x7f71b94e26d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f71b94f2970>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7f71b94e2e50>],
             '$const112.4': [<numba.core.ir.Assign object at 0x7f71b94ef370>],
             '$const52.7': [<numba.core.ir.Assign object at 0x7f71b94e9ca0>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7f71b94eb310>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7f71b94eba90>],
             '$const88.1': [<numba.core.ir.Assign object at 0x7f71b94e22b0>],
             'bool32': [<numba.core.ir.Assign object at 0x7f71b94f48b0>],
             'bool56': [<numba.core.ir.Assign object at 0x7f71b94e9610>],
             'bool64': [<numba.core.ir.Assign object at 0x7f71b94e93d0>],
             'bool72': [<numba.core.ir.Assign object at 0x7f71b94eb610>],
             'bool8': [<numba.core.ir.Assign object at 0x7f71b94f2670>],
             'bool92': [<numba.core.ir.Assign object at 0x7f71b94e25b0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f71b94e9af0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f71b94f42e0>,
                            <numba.core.ir.Assign object at 0x7f71b94ef5e0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f71b9601ee0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f71b94f2130>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f71b94f4e20>],
             'src_index': [<numba.core.ir.Assign object at 0x7f71b94f2d90>,
                           <numba.core.ir.Assign object at 0x7f71b94ef100>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f71b95f37c0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f71b95f3820>]})
DEBUG 2022-02-14 16:45:43,237 SSA violators {'src_index', 'dest_index'}
DEBUG 2022-02-14 16:45:43,237 Fix SSA violator on var src_index
DEBUG 2022-02-14 16:45:43,237 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:43,237 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,237 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:45:43,237 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:45:43,237 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:45:43,237 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:45:43,237 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:45:43,237 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,237 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,237 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:45:43,237 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:45:43,237 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,237 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:45:43,237 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:45:43,237 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:45:43,237 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:45:43,237 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,237 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,237 first assign: src_index
DEBUG 2022-02-14 16:45:43,238 replaced with: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,238 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,238 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,238 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:43,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,238 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:45:43,238 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,238 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,238 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:45:43,238 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:43,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,238 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,238 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,238 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:45:43,238 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:45:43,238 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,238 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,238 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:45:43,238 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:43,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,238 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:45:43,238 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,238 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,238 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:45:43,238 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:45:43,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,239 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,239 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:45:43,239 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,239 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,239 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:45:43,239 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:45:43,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,239 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,239 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,239 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:45:43,239 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:45:43,239 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:45:43,239 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:45:43,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,239 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,239 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:45:43,239 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,239 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,239 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:45:43,239 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:45:43,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,240 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,240 on stmt: jump 102
DEBUG 2022-02-14 16:45:43,240 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:45:43,240 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,240 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,240 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,240 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,240 replaced with: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,240 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:45:43,240 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,240 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,240 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,240 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:45:43,240 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,240 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,240 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:45:43,240 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f71b94efa30>],
             102: [<numba.core.ir.Assign object at 0x7f71b95f3490>]})
DEBUG 2022-02-14 16:45:43,240 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:43,240 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,240 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:45:43,240 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:45:43,240 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:45:43,240 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:45:43,240 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:45:43,240 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,240 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,241 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:45:43,241 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:45:43,241 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,241 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:45:43,241 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:45:43,241 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:45:43,241 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:45:43,241 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,241 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,241 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,241 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,241 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:43,241 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,241 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:45:43,241 find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:45:43,241 find_def_from_top label 26
DEBUG 2022-02-14 16:45:43,241 insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:45:43,241 find_def_from_bottom label 102
DEBUG 2022-02-14 16:45:43,241 incoming_def src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,241 find_def_from_bottom label 14
DEBUG 2022-02-14 16:45:43,241 incoming_def src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,241 replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:45:43,241 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,241 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,242 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:45:43,242 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:43,242 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,242 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,242 find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,242 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,242 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,242 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,242 replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,242 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,242 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:45:43,242 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:45:43,242 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,242 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,242 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:45:43,242 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:43,242 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,242 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:45:43,242 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,242 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,242 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:45:43,242 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:45:43,242 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,243 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,243 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:45:43,243 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,243 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,243 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:45:43,243 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:45:43,243 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,243 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,243 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,243 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:45:43,243 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:45:43,243 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:45:43,243 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:45:43,243 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,243 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,243 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:45:43,243 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,243 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,243 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:45:43,243 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:45:43,243 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,243 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,243 on stmt: jump 102
DEBUG 2022-02-14 16:45:43,244 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:45:43,244 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,244 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,244 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,244 find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,244 find_def_from_top label 102
DEBUG 2022-02-14 16:45:43,244 idom 34 from label 102
DEBUG 2022-02-14 16:45:43,244 find_def_from_bottom label 34
DEBUG 2022-02-14 16:45:43,244 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,244 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,244 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,244 replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,244 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,244 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:45:43,244 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,244 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,244 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,244 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:45:43,245 Running <numba.core.ssa._FixSSAVars object at 0x7f71b94efb80>
DEBUG 2022-02-14 16:45:43,245 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,245 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:45:43,245 Fix SSA violator on var dest_index
DEBUG 2022-02-14 16:45:43,245 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:43,245 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,245 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:45:43,245 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:45:43,245 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:45:43,245 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:45:43,245 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:45:43,245 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,245 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,245 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:45:43,245 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:45:43,245 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,245 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:45:43,245 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:45:43,245 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:45:43,245 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:45:43,245 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,245 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,245 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,245 first assign: dest_index
DEBUG 2022-02-14 16:45:43,245 replaced with: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,245 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,245 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:43,245 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,246 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:45:43,246 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:45:43,246 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,246 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,246 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:45:43,246 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:43,246 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,246 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,246 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,246 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:45:43,246 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:45:43,246 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,246 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,246 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:45:43,246 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:43,246 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,246 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:45:43,246 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,246 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,246 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:45:43,246 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:45:43,246 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,246 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,246 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:45:43,246 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,246 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,247 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:45:43,247 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:45:43,247 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,247 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,247 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,247 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:45:43,247 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:45:43,247 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:45:43,247 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:45:43,247 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,247 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,247 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:45:43,247 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,247 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,247 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:45:43,247 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:45:43,247 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,247 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,247 on stmt: jump 102
DEBUG 2022-02-14 16:45:43,247 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:45:43,247 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,247 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,247 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,247 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,247 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:45:43,247 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,247 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,248 replaced with: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,248 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,248 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:45:43,248 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b94efa60>
DEBUG 2022-02-14 16:45:43,248 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,248 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:45:43,248 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f71b94efbe0>],
             102: [<numba.core.ir.Assign object at 0x7f71b9515550>]})
DEBUG 2022-02-14 16:45:43,248 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:43,248 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,248 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:45:43,248 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:45:43,248 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:45:43,248 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:45:43,248 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:45:43,248 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,248 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,248 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:45:43,248 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:45:43,248 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,248 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:45:43,248 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:45:43,248 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:45:43,248 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:45:43,248 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,248 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:45:43,248 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,249 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,249 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:43,249 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,249 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:45:43,249 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:45:43,249 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,249 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,249 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:45:43,249 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:45:43,249 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,249 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,249 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,249 find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,249 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,249 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,249 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,249 find_def_from_top label 26
DEBUG 2022-02-14 16:45:43,249 insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:45:43,249 find_def_from_bottom label 102
DEBUG 2022-02-14 16:45:43,249 incoming_def dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,249 find_def_from_bottom label 14
DEBUG 2022-02-14 16:45:43,249 incoming_def dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:45:43,249 replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:43,249 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:45:43,250 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:45:43,250 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,250 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,250 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:45:43,250 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:45:43,250 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,250 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:45:43,250 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,250 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,250 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:45:43,250 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:45:43,250 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,250 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,250 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:45:43,250 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,250 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,250 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:45:43,250 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:45:43,250 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,250 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,250 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,250 find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:45:43,250 find_def_from_top label 74
DEBUG 2022-02-14 16:45:43,250 idom 66 from label 74
DEBUG 2022-02-14 16:45:43,251 find_def_from_bottom label 66
DEBUG 2022-02-14 16:45:43,251 find_def_from_top label 66
DEBUG 2022-02-14 16:45:43,251 idom 58 from label 66
DEBUG 2022-02-14 16:45:43,251 find_def_from_bottom label 58
DEBUG 2022-02-14 16:45:43,251 find_def_from_top label 58
DEBUG 2022-02-14 16:45:43,251 idom 34 from label 58
DEBUG 2022-02-14 16:45:43,251 find_def_from_bottom label 34
DEBUG 2022-02-14 16:45:43,251 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,251 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,251 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,251 replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-14 16:45:43,251 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:45:43,251 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:45:43,251 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:45:43,251 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:45:43,251 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,251 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,251 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:45:43,251 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:43,251 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:43,251 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:45:43,251 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:45:43,251 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,251 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,251 find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:45:43,251 find_def_from_top label 94
DEBUG 2022-02-14 16:45:43,251 idom 86 from label 94
DEBUG 2022-02-14 16:45:43,251 find_def_from_bottom label 86
DEBUG 2022-02-14 16:45:43,252 find_def_from_top label 86
DEBUG 2022-02-14 16:45:43,252 idom 34 from label 86
DEBUG 2022-02-14 16:45:43,252 find_def_from_bottom label 34
DEBUG 2022-02-14 16:45:43,252 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,252 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,252 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,252 replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-14 16:45:43,252 on stmt: jump 102
DEBUG 2022-02-14 16:45:43,252 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:45:43,252 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,252 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:45:43,252 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,252 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:45:43,252 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:45:43,252 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,252 find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,252 find_def_from_top label 102
DEBUG 2022-02-14 16:45:43,252 idom 34 from label 102
DEBUG 2022-02-14 16:45:43,252 find_def_from_bottom label 34
DEBUG 2022-02-14 16:45:43,252 find_def_from_top label 34
DEBUG 2022-02-14 16:45:43,252 idom 26 from label 34
DEBUG 2022-02-14 16:45:43,252 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,252 replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:43,252 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:45:43,252 on stmt: jump 26
DEBUG 2022-02-14 16:45:43,252 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:45:43,252 Running <numba.core.ssa._FixSSAVars object at 0x7f71b95f3fa0>
DEBUG 2022-02-14 16:45:43,252 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,253 find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:45:43,253 find_def_from_top label 120
DEBUG 2022-02-14 16:45:43,253 idom 26 from label 120
DEBUG 2022-02-14 16:45:43,253 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:43,253 replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-14 16:45:43,253 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:45:43,309 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,309 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,309 stack: []
DEBUG 2022-02-14 16:45:43,309 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:45:43,310 stack []
DEBUG 2022-02-14 16:45:43,310 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:45:43,310 stack []
DEBUG 2022-02-14 16:45:43,310 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:45:43,310 stack ['$kept_edges_12.0']
DEBUG 2022-02-14 16:45:43,310 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:45:43,310 stack ['$kept_edges_12.0', '$const4.1']
DEBUG 2022-02-14 16:45:43,310 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,310 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:43,310 end state. edges=[]
DEBUG 2022-02-14 16:45:43,310 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,310 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,310 defmap: {}
DEBUG 2022-02-14 16:45:43,310 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,310 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,310 keep phismap: {}
DEBUG 2022-02-14 16:45:43,310 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,310 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,311 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$kept_edges_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,311 label 0:
    kept_edges_1 = arg(0, name=kept_edges_1) ['kept_edges_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = kept_edges_1 != $const4.1 ['$6compare_op.2', '$const4.1', 'kept_edges_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,312 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,312 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b96192b0>
DEBUG 2022-02-14 16:45:43,312 on stmt: kept_edges_1 = arg(0, name=kept_edges_1)
DEBUG 2022-02-14 16:45:43,312 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:43,312 on stmt: $6compare_op.2 = kept_edges_1 != $const4.1
DEBUG 2022-02-14 16:45:43,312 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:45:43,312 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,312 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b969beb0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b969b6a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b9619be0>],
             'kept_edges_1': [<numba.core.ir.Assign object at 0x7f71b9605a60>]})
DEBUG 2022-02-14 16:45:43,312 SSA violators set()
DEBUG 2022-02-14 16:45:43,338 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=196)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,338 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,338 stack: []
DEBUG 2022-02-14 16:45:43,338 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,338 stack []
DEBUG 2022-02-14 16:45:43,338 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,338 stack []
DEBUG 2022-02-14 16:45:43,338 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=196)
DEBUG 2022-02-14 16:45:43,338 stack ['$kept_edges_nonzero_12.0']
DEBUG 2022-02-14 16:45:43,338 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,338 stack ['$kept_edges_nonzero_12.0', '$_110binary_subscr_50_14.1']
DEBUG 2022-02-14 16:45:43,338 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,338 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,338 end state. edges=[]
DEBUG 2022-02-14 16:45:43,338 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,338 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,338 defmap: {}
DEBUG 2022-02-14 16:45:43,338 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,339 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,339 keep phismap: {}
DEBUG 2022-02-14 16:45:43,339 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,339 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,339 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_12.0'}), (4, {'res': '$_110binary_subscr_50_14.1'}), (6, {'lhs': '$kept_edges_nonzero_12.0', 'rhs': '$_110binary_subscr_50_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,339 label 0:
    _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1) ['_110binary_subscr_50_1']
    kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1) ['kept_edges_nonzero_1']
    $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1 ['$6binary_multiply.2', '_110binary_subscr_50_1', 'kept_edges_nonzero_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,340 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,340 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98b0c40>
DEBUG 2022-02-14 16:45:43,340 on stmt: _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1)
DEBUG 2022-02-14 16:45:43,340 on stmt: kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1)
DEBUG 2022-02-14 16:45:43,340 on stmt: $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1
DEBUG 2022-02-14 16:45:43,340 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,340 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,340 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b98af2b0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b98af400>],
             '_110binary_subscr_50_1': [<numba.core.ir.Assign object at 0x7f71b98b02b0>],
             'kept_edges_nonzero_1': [<numba.core.ir.Assign object at 0x7f71b98b06d0>]})
DEBUG 2022-02-14 16:45:43,340 SSA violators set()
DEBUG 2022-02-14 16:45:43,373 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=197)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,373 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,373 stack: []
DEBUG 2022-02-14 16:45:43,373 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,373 stack []
DEBUG 2022-02-14 16:45:43,373 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,373 stack []
DEBUG 2022-02-14 16:45:43,373 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=197)
DEBUG 2022-02-14 16:45:43,373 stack ['$kept_edges_nonzero_22.0']
DEBUG 2022-02-14 16:45:43,373 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,373 stack ['$kept_edges_nonzero_22.0', '$_150binary_subscr_73_14.1']
DEBUG 2022-02-14 16:45:43,373 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,373 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,373 end state. edges=[]
DEBUG 2022-02-14 16:45:43,373 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,373 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,373 defmap: {}
DEBUG 2022-02-14 16:45:43,373 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,373 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,373 keep phismap: {}
DEBUG 2022-02-14 16:45:43,373 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,373 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,374 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_22.0'}), (4, {'res': '$_150binary_subscr_73_14.1'}), (6, {'lhs': '$kept_edges_nonzero_22.0', 'rhs': '$_150binary_subscr_73_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,374 label 0:
    _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1) ['_150binary_subscr_73_1']
    kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2) ['kept_edges_nonzero_2']
    $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1 ['$6binary_multiply.2', '_150binary_subscr_73_1', 'kept_edges_nonzero_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,375 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,375 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b91009a0>
DEBUG 2022-02-14 16:45:43,375 on stmt: _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1)
DEBUG 2022-02-14 16:45:43,375 on stmt: kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2)
DEBUG 2022-02-14 16:45:43,375 on stmt: $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1
DEBUG 2022-02-14 16:45:43,375 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,375 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,375 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b9105550>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b91056a0>],
             '_150binary_subscr_73_1': [<numba.core.ir.Assign object at 0x7f71b91000a0>],
             'kept_edges_nonzero_2': [<numba.core.ir.Assign object at 0x7f71b9100280>]})
DEBUG 2022-02-14 16:45:43,375 SSA violators set()
DEBUG 2022-02-14 16:45:43,413 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=202)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,413 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,413 stack: []
DEBUG 2022-02-14 16:45:43,413 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,413 stack []
DEBUG 2022-02-14 16:45:43,413 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,413 stack []
DEBUG 2022-02-14 16:45:43,413 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=202)
DEBUG 2022-02-14 16:45:43,413 stack ['$kept_edges_nonzero_32.0']
DEBUG 2022-02-14 16:45:43,413 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,413 stack ['$kept_edges_nonzero_32.0', '$_206binary_subscr_101_14.1']
DEBUG 2022-02-14 16:45:43,413 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,413 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,413 end state. edges=[]
DEBUG 2022-02-14 16:45:43,413 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,414 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,414 defmap: {}
DEBUG 2022-02-14 16:45:43,414 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,414 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,414 keep phismap: {}
DEBUG 2022-02-14 16:45:43,414 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,414 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,414 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_32.0'}), (4, {'res': '$_206binary_subscr_101_14.1'}), (6, {'lhs': '$kept_edges_nonzero_32.0', 'rhs': '$_206binary_subscr_101_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,414 label 0:
    _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1) ['_206binary_subscr_101_1']
    kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3) ['kept_edges_nonzero_3']
    $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1 ['$6binary_multiply.2', '_206binary_subscr_101_1', 'kept_edges_nonzero_3']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,415 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,415 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8faaa90>
DEBUG 2022-02-14 16:45:43,416 on stmt: _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1)
DEBUG 2022-02-14 16:45:43,416 on stmt: kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3)
DEBUG 2022-02-14 16:45:43,416 on stmt: $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1
DEBUG 2022-02-14 16:45:43,416 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,416 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,416 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b8fb1880>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8fb19d0>],
             '_206binary_subscr_101_1': [<numba.core.ir.Assign object at 0x7f71b8faa6d0>],
             'kept_edges_nonzero_3': [<numba.core.ir.Assign object at 0x7f71b8fb10d0>]})
DEBUG 2022-02-14 16:45:43,416 SSA violators set()
DEBUG 2022-02-14 16:45:43,444 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=203)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,444 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,444 stack: []
DEBUG 2022-02-14 16:45:43,444 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,444 stack []
DEBUG 2022-02-14 16:45:43,444 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,444 stack []
DEBUG 2022-02-14 16:45:43,444 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=203)
DEBUG 2022-02-14 16:45:43,444 stack ['$kept_edges_nonzero_42.0']
DEBUG 2022-02-14 16:45:43,444 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,444 stack ['$kept_edges_nonzero_42.0', '$_230binary_subscr_114_14.1']
DEBUG 2022-02-14 16:45:43,445 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,445 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,445 end state. edges=[]
DEBUG 2022-02-14 16:45:43,445 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,445 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,445 defmap: {}
DEBUG 2022-02-14 16:45:43,445 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,445 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,445 keep phismap: {}
DEBUG 2022-02-14 16:45:43,445 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,445 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,445 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_42.0'}), (4, {'res': '$_230binary_subscr_114_14.1'}), (6, {'lhs': '$kept_edges_nonzero_42.0', 'rhs': '$_230binary_subscr_114_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,445 label 0:
    _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1) ['_230binary_subscr_114_1']
    kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4) ['kept_edges_nonzero_4']
    $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1 ['$6binary_multiply.2', '_230binary_subscr_114_1', 'kept_edges_nonzero_4']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,446 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,446 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8f5baf0>
DEBUG 2022-02-14 16:45:43,447 on stmt: _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1)
DEBUG 2022-02-14 16:45:43,447 on stmt: kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4)
DEBUG 2022-02-14 16:45:43,447 on stmt: $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1
DEBUG 2022-02-14 16:45:43,447 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,447 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,447 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b8f63730>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8f63880>],
             '_230binary_subscr_114_1': [<numba.core.ir.Assign object at 0x7f71b8fbabb0>],
             'kept_edges_nonzero_4': [<numba.core.ir.Assign object at 0x7f71b8f78610>]})
DEBUG 2022-02-14 16:45:43,447 SSA violators set()
DEBUG 2022-02-14 16:45:43,481 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=208)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,481 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,481 stack: []
DEBUG 2022-02-14 16:45:43,481 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,481 stack []
DEBUG 2022-02-14 16:45:43,481 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,481 stack []
DEBUG 2022-02-14 16:45:43,481 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=208)
DEBUG 2022-02-14 16:45:43,481 stack ['$kept_edges_nonzero_52.0']
DEBUG 2022-02-14 16:45:43,481 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,481 stack ['$kept_edges_nonzero_52.0', '$_288binary_subscr_16_14.1']
DEBUG 2022-02-14 16:45:43,481 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,481 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,481 end state. edges=[]
DEBUG 2022-02-14 16:45:43,481 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,481 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,481 defmap: {}
DEBUG 2022-02-14 16:45:43,481 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,481 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,481 keep phismap: {}
DEBUG 2022-02-14 16:45:43,481 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,482 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,482 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_52.0'}), (4, {'res': '$_288binary_subscr_16_14.1'}), (6, {'lhs': '$kept_edges_nonzero_52.0', 'rhs': '$_288binary_subscr_16_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,482 label 0:
    _288binary_subscr_16_1 = arg(0, name=_288binary_subscr_16_1) ['_288binary_subscr_16_1']
    kept_edges_nonzero_5 = arg(1, name=kept_edges_nonzero_5) ['kept_edges_nonzero_5']
    $6binary_multiply.2 = kept_edges_nonzero_5 * _288binary_subscr_16_1 ['$6binary_multiply.2', '_288binary_subscr_16_1', 'kept_edges_nonzero_5']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,483 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8e45b80>
DEBUG 2022-02-14 16:45:43,483 on stmt: _288binary_subscr_16_1 = arg(0, name=_288binary_subscr_16_1)
DEBUG 2022-02-14 16:45:43,483 on stmt: kept_edges_nonzero_5 = arg(1, name=kept_edges_nonzero_5)
DEBUG 2022-02-14 16:45:43,483 on stmt: $6binary_multiply.2 = kept_edges_nonzero_5 * _288binary_subscr_16_1
DEBUG 2022-02-14 16:45:43,483 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,483 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,483 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b8e4b730>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8e4b880>],
             '_288binary_subscr_16_1': [<numba.core.ir.Assign object at 0x7f71b8e45280>],
             'kept_edges_nonzero_5': [<numba.core.ir.Assign object at 0x7f71b8e45460>]})
DEBUG 2022-02-14 16:45:43,484 SSA violators set()
DEBUG 2022-02-14 16:45:43,511 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=209)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,511 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:43,511 stack: []
DEBUG 2022-02-14 16:45:43,511 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:45:43,512 stack []
DEBUG 2022-02-14 16:45:43,512 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:45:43,512 stack []
DEBUG 2022-02-14 16:45:43,512 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=209)
DEBUG 2022-02-14 16:45:43,512 stack ['$kept_edges_nonzero_62.0']
DEBUG 2022-02-14 16:45:43,512 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,512 stack ['$kept_edges_nonzero_62.0', '$_312binary_subscr_29_14.1']
DEBUG 2022-02-14 16:45:43,512 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:43,512 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:43,512 end state. edges=[]
DEBUG 2022-02-14 16:45:43,512 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:43,512 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:43,512 defmap: {}
DEBUG 2022-02-14 16:45:43,512 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,512 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:43,512 keep phismap: {}
DEBUG 2022-02-14 16:45:43,512 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:43,512 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:43,512 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_62.0'}), (4, {'res': '$_312binary_subscr_29_14.1'}), (6, {'lhs': '$kept_edges_nonzero_62.0', 'rhs': '$_312binary_subscr_29_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:43,513 label 0:
    _312binary_subscr_29_1 = arg(0, name=_312binary_subscr_29_1) ['_312binary_subscr_29_1']
    kept_edges_nonzero_6 = arg(1, name=kept_edges_nonzero_6) ['kept_edges_nonzero_6']
    $6binary_multiply.2 = kept_edges_nonzero_6 * _312binary_subscr_29_1 ['$6binary_multiply.2', '_312binary_subscr_29_1', 'kept_edges_nonzero_6']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:43,514 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:43,514 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8d7cc10>
DEBUG 2022-02-14 16:45:43,514 on stmt: _312binary_subscr_29_1 = arg(0, name=_312binary_subscr_29_1)
DEBUG 2022-02-14 16:45:43,514 on stmt: kept_edges_nonzero_6 = arg(1, name=kept_edges_nonzero_6)
DEBUG 2022-02-14 16:45:43,514 on stmt: $6binary_multiply.2 = kept_edges_nonzero_6 * _312binary_subscr_29_1
DEBUG 2022-02-14 16:45:43,514 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:43,514 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:43,514 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b8d82640>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8d82790>],
             '_312binary_subscr_29_1': [<numba.core.ir.Assign object at 0x7f71b8d7c2e0>],
             'kept_edges_nonzero_6': [<numba.core.ir.Assign object at 0x7f71b8d7c400>]})
DEBUG 2022-02-14 16:45:43,514 SSA violators set()
DEBUG 2022-02-14 16:45:44,487 bytecode dump:
>          0	NOP(arg=None, lineno=233)
           2	LOAD_GLOBAL(arg=0, lineno=233)
           4	LOAD_METHOD(arg=1, lineno=233)
           6	LOAD_FAST(arg=0, lineno=233)
           8	LOAD_FAST(arg=0, lineno=233)
          10	BUILD_TUPLE(arg=2, lineno=233)
          12	CALL_METHOD(arg=1, lineno=233)
          14	STORE_FAST(arg=2, lineno=233)
          16	LOAD_GLOBAL(arg=0, lineno=234)
          18	LOAD_METHOD(arg=2, lineno=234)
          20	LOAD_FAST(arg=2, lineno=234)
          22	LOAD_CONST(arg=1, lineno=234)
          24	COMPARE_OP(arg=3, lineno=234)
          26	CALL_METHOD(arg=1, lineno=234)
          28	LOAD_CONST(arg=1, lineno=234)
          30	BINARY_SUBSCR(arg=None, lineno=234)
          32	STORE_FAST(arg=3, lineno=234)
          34	LOAD_GLOBAL(arg=3, lineno=235)
          36	LOAD_FAST(arg=3, lineno=235)
          38	CALL_FUNCTION(arg=1, lineno=235)
          40	LOAD_CONST(arg=2, lineno=235)
          42	BINARY_FLOOR_DIVIDE(arg=None, lineno=235)
          44	STORE_FAST(arg=4, lineno=235)
          46	LOAD_FAST(arg=0, lineno=237)
          48	LOAD_GLOBAL(arg=0, lineno=237)
          50	LOAD_METHOD(arg=2, lineno=237)
          52	LOAD_FAST(arg=0, lineno=237)
          54	LOAD_CONST(arg=1, lineno=237)
          56	COMPARE_OP(arg=3, lineno=237)
          58	CALL_METHOD(arg=1, lineno=237)
          60	BINARY_SUBSCR(arg=None, lineno=237)
          62	STORE_FAST(arg=5, lineno=237)
          64	LOAD_FAST(arg=1, lineno=239)
          66	LOAD_FAST(arg=3, lineno=239)
          68	BINARY_SUBSCR(arg=None, lineno=239)
          70	STORE_FAST(arg=6, lineno=239)
          72	LOAD_GLOBAL(arg=0, lineno=241)
          74	LOAD_ATTR(arg=4, lineno=241)
          76	LOAD_FAST(arg=6, lineno=241)
          78	LOAD_GLOBAL(arg=0, lineno=241)
          80	LOAD_ATTR(arg=5, lineno=241)
          82	LOAD_CONST(arg=3, lineno=241)
          84	CALL_FUNCTION_KW(arg=2, lineno=241)
          86	STORE_FAST(arg=7, lineno=241)
          88	LOAD_FAST(arg=5, lineno=242)
          90	LOAD_FAST(arg=6, lineno=242)
          92	LOAD_FAST(arg=4, lineno=242)
          94	LOAD_CONST(arg=0, lineno=242)
          96	BUILD_SLICE(arg=2, lineno=242)
          98	BINARY_SUBSCR(arg=None, lineno=242)
         100	BINARY_MULTIPLY(arg=None, lineno=242)
         102	LOAD_FAST(arg=7, lineno=242)
         104	LOAD_CONST(arg=0, lineno=242)
         106	LOAD_FAST(arg=4, lineno=242)
         108	BUILD_SLICE(arg=2, lineno=242)
         110	STORE_SUBSCR(arg=None, lineno=242)
         112	LOAD_FAST(arg=5, lineno=243)
         114	LOAD_FAST(arg=6, lineno=243)
         116	LOAD_CONST(arg=0, lineno=243)
         118	LOAD_FAST(arg=4, lineno=243)
         120	BUILD_SLICE(arg=2, lineno=243)
         122	BINARY_SUBSCR(arg=None, lineno=243)
         124	BINARY_MULTIPLY(arg=None, lineno=243)
         126	LOAD_FAST(arg=7, lineno=243)
         128	LOAD_FAST(arg=4, lineno=243)
         130	LOAD_CONST(arg=0, lineno=243)
         132	BUILD_SLICE(arg=2, lineno=243)
         134	STORE_SUBSCR(arg=None, lineno=243)
         136	LOAD_FAST(arg=7, lineno=245)
         138	LOAD_FAST(arg=6, lineno=245)
         140	BUILD_TUPLE(arg=2, lineno=245)
         142	RETURN_VALUE(arg=None, lineno=245)
DEBUG 2022-02-14 16:45:44,487 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:44,487 stack: []
DEBUG 2022-02-14 16:45:44,487 dispatch pc=0, inst=NOP(arg=None, lineno=233)
DEBUG 2022-02-14 16:45:44,487 stack []
DEBUG 2022-02-14 16:45:44,487 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=233)
DEBUG 2022-02-14 16:45:44,487 stack []
DEBUG 2022-02-14 16:45:44,487 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=233)
DEBUG 2022-02-14 16:45:44,487 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:44,487 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG 2022-02-14 16:45:44,487 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:44,487 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG 2022-02-14 16:45:44,488 stack ['$4load_method.1', '$kept_edges6.2']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=233)
DEBUG 2022-02-14 16:45:44,488 stack ['$4load_method.1', '$kept_edges6.2', '$kept_edges8.3']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=233)
DEBUG 2022-02-14 16:45:44,488 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=14, inst=STORE_FAST(arg=2, lineno=233)
DEBUG 2022-02-14 16:45:44,488 stack ['$12call_method.5']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack []
DEBUG 2022-02-14 16:45:44,488 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$16load_global.6']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$18load_method.7']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$18load_method.7', '$z20.8']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$18load_method.7', '$z20.8', '$const22.9']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$18load_method.7', '$24compare_op.10']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$26call_method.11']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$26call_method.11', '$const28.12']
DEBUG 2022-02-14 16:45:44,488 dispatch pc=32, inst=STORE_FAST(arg=3, lineno=234)
DEBUG 2022-02-14 16:45:44,488 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack []
DEBUG 2022-02-14 16:45:44,489 dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack ['$34load_global.14']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack ['$34load_global.14', '$nonzero_rows36.15']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack ['$38call_function.16']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=42, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack ['$38call_function.16', '$const40.17']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=44, inst=STORE_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:44,489 stack ['$42binary_floor_divide.18']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack []
DEBUG 2022-02-14 16:45:44,489 dispatch pc=48, inst=LOAD_GLOBAL(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19', '$48load_global.20']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19', '$50load_method.21']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22', '$const54.23']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:44,489 stack ['$kept_edges46.19', '$50load_method.21', '$56compare_op.24']
DEBUG 2022-02-14 16:45:44,489 dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:44,490 stack ['$kept_edges46.19', '$58call_method.25']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=62, inst=STORE_FAST(arg=5, lineno=237)
DEBUG 2022-02-14 16:45:44,490 stack ['$60binary_subscr.26']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=239)
DEBUG 2022-02-14 16:45:44,490 stack []
DEBUG 2022-02-14 16:45:44,490 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=239)
DEBUG 2022-02-14 16:45:44,490 stack ['$D64.27']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=239)
DEBUG 2022-02-14 16:45:44,490 stack ['$D64.27', '$nonzero_rows66.28']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=70, inst=STORE_FAST(arg=6, lineno=239)
DEBUG 2022-02-14 16:45:44,490 stack ['$68binary_subscr.29']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=72, inst=LOAD_GLOBAL(arg=0, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack []
DEBUG 2022-02-14 16:45:44,490 dispatch pc=74, inst=LOAD_ATTR(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$72load_global.30']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$74load_attr.31']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=78, inst=LOAD_GLOBAL(arg=0, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$74load_attr.31', '$D_nonzero76.32']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=80, inst=LOAD_ATTR(arg=5, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$74load_attr.31', '$D_nonzero76.32', '$78load_global.33']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$74load_attr.31', '$D_nonzero76.32', '$80load_attr.34']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=84, inst=CALL_FUNCTION_KW(arg=2, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$74load_attr.31', '$D_nonzero76.32', '$80load_attr.34', '$const82.35']
DEBUG 2022-02-14 16:45:44,490 dispatch pc=86, inst=STORE_FAST(arg=7, lineno=241)
DEBUG 2022-02-14 16:45:44,490 stack ['$84call_function_kw.36']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack []
DEBUG 2022-02-14 16:45:44,491 dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37', '$D_nonzero90.38']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=94, inst=LOAD_CONST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37', '$D_nonzero90.38', '$n_nonzero_edges92.39']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=96, inst=BUILD_SLICE(arg=2, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37', '$D_nonzero90.38', '$n_nonzero_edges92.39', '$const94.40']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37', '$D_nonzero90.38', '$96build_slice.42']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$kept_edges_nonzero88.37', '$98binary_subscr.43']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=102, inst=LOAD_FAST(arg=7, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$100binary_multiply.44']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=104, inst=LOAD_CONST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$100binary_multiply.44', '$XD_nonzero102.45']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$100binary_multiply.44', '$XD_nonzero102.45', '$const104.46']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=108, inst=BUILD_SLICE(arg=2, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$100binary_multiply.44', '$XD_nonzero102.45', '$const104.46', '$n_nonzero_edges106.47']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=110, inst=STORE_SUBSCR(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:44,491 stack ['$100binary_multiply.44', '$XD_nonzero102.45', '$108build_slice.49']
DEBUG 2022-02-14 16:45:44,491 dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=243)
DEBUG 2022-02-14 16:45:44,491 stack []
DEBUG 2022-02-14 16:45:44,491 dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=116, inst=LOAD_CONST(arg=0, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50', '$D_nonzero114.51']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50', '$D_nonzero114.51', '$const116.52']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=120, inst=BUILD_SLICE(arg=2, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50', '$D_nonzero114.51', '$const116.52', '$n_nonzero_edges118.53']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50', '$D_nonzero114.51', '$120build_slice.55']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=124, inst=BINARY_MULTIPLY(arg=None, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$kept_edges_nonzero112.50', '$122binary_subscr.56']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=126, inst=LOAD_FAST(arg=7, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$124binary_multiply.57']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=128, inst=LOAD_FAST(arg=4, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$124binary_multiply.57', '$XD_nonzero126.58']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=130, inst=LOAD_CONST(arg=0, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$124binary_multiply.57', '$XD_nonzero126.58', '$n_nonzero_edges128.59']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=132, inst=BUILD_SLICE(arg=2, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$124binary_multiply.57', '$XD_nonzero126.58', '$n_nonzero_edges128.59', '$const130.60']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=134, inst=STORE_SUBSCR(arg=None, lineno=243)
DEBUG 2022-02-14 16:45:44,492 stack ['$124binary_multiply.57', '$XD_nonzero126.58', '$132build_slice.62']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=136, inst=LOAD_FAST(arg=7, lineno=245)
DEBUG 2022-02-14 16:45:44,492 stack []
DEBUG 2022-02-14 16:45:44,492 dispatch pc=138, inst=LOAD_FAST(arg=6, lineno=245)
DEBUG 2022-02-14 16:45:44,492 stack ['$XD_nonzero136.63']
DEBUG 2022-02-14 16:45:44,492 dispatch pc=140, inst=BUILD_TUPLE(arg=2, lineno=245)
DEBUG 2022-02-14 16:45:44,493 stack ['$XD_nonzero136.63', '$D_nonzero138.64']
DEBUG 2022-02-14 16:45:44,493 dispatch pc=142, inst=RETURN_VALUE(arg=None, lineno=245)
DEBUG 2022-02-14 16:45:44,493 stack ['$140build_tuple.65']
DEBUG 2022-02-14 16:45:44,493 end state. edges=[]
DEBUG 2022-02-14 16:45:44,493 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:44,493 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:44,493 defmap: {}
DEBUG 2022-02-14 16:45:44,493 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,493 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,493 keep phismap: {}
DEBUG 2022-02-14 16:45:44,493 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:44,493 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:44,493 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$kept_edges6.2'}), (8, {'res': '$kept_edges8.3'}), (10, {'items': ['$kept_edges6.2', '$kept_edges8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_method.7'}), (20, {'res': '$z20.8'}), (22, {'res': '$const22.9'}), (24, {'lhs': '$z20.8', 'rhs': '$const22.9', 'res': '$24compare_op.10'}), (26, {'func': '$18load_method.7', 'args': ['$24compare_op.10'], 'res': '$26call_method.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$26call_method.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$34load_global.14'}), (36, {'res': '$nonzero_rows36.15'}), (38, {'func': '$34load_global.14', 'args': ['$nonzero_rows36.15'], 'res': '$38call_function.16'}), (40, {'res': '$const40.17'}), (42, {'lhs': '$38call_function.16', 'rhs': '$const40.17', 'res': '$42binary_floor_divide.18'}), (44, {'value': '$42binary_floor_divide.18'}), (46, {'res': '$kept_edges46.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_method.21'}), (52, {'res': '$kept_edges52.22'}), (54, {'res': '$const54.23'}), (56, {'lhs': '$kept_edges52.22', 'rhs': '$const54.23', 'res': '$56compare_op.24'}), (58, {'func': '$50load_method.21', 'args': ['$56compare_op.24'], 'res': '$58call_method.25'}), (60, {'index': '$58call_method.25', 'target': '$kept_edges46.19', 'res': '$60binary_subscr.26'}), (62, {'value': '$60binary_subscr.26'}), (64, {'res': '$D64.27'}), (66, {'res': '$nonzero_rows66.28'}), (68, {'index': '$nonzero_rows66.28', 'target': '$D64.27', 'res': '$68binary_subscr.29'}), (70, {'value': '$68binary_subscr.29'}), (72, {'res': '$72load_global.30'}), (74, {'item': '$72load_global.30', 'res': '$74load_attr.31'}), (76, {'res': '$D_nonzero76.32'}), (78, {'res': '$78load_global.33'}), (80, {'item': '$78load_global.33', 'res': '$80load_attr.34'}), (82, {'res': '$const82.35'}), (84, {'func': '$74load_attr.31', 'args': ['$D_nonzero76.32', '$80load_attr.34'], 'names': '$const82.35', 'res': '$84call_function_kw.36'}), (86, {'value': '$84call_function_kw.36'}), (88, {'res': '$kept_edges_nonzero88.37'}), (90, {'res': '$D_nonzero90.38'}), (92, {'res': '$n_nonzero_edges92.39'}), (94, {'res': '$const94.40'}), (96, {'start': '$n_nonzero_edges92.39', 'stop': '$const94.40', 'step': None, 'res': '$96build_slice.42', 'slicevar': '$96build_slice.41'}), (98, {'index': '$96build_slice.42', 'target': '$D_nonzero90.38', 'res': '$98binary_subscr.43'}), (100, {'lhs': '$kept_edges_nonzero88.37', 'rhs': '$98binary_subscr.43', 'res': '$100binary_multiply.44'}), (102, {'res': '$XD_nonzero102.45'}), (104, {'res': '$const104.46'}), (106, {'res': '$n_nonzero_edges106.47'}), (108, {'start': '$const104.46', 'stop': '$n_nonzero_edges106.47', 'step': None, 'res': '$108build_slice.49', 'slicevar': '$108build_slice.48'}), (110, {'target': '$XD_nonzero102.45', 'index': '$108build_slice.49', 'value': '$100binary_multiply.44'}), (112, {'res': '$kept_edges_nonzero112.50'}), (114, {'res': '$D_nonzero114.51'}), (116, {'res': '$const116.52'}), (118, {'res': '$n_nonzero_edges118.53'}), (120, {'start': '$const116.52', 'stop': '$n_nonzero_edges118.53', 'step': None, 'res': '$120build_slice.55', 'slicevar': '$120build_slice.54'}), (122, {'index': '$120build_slice.55', 'target': '$D_nonzero114.51', 'res': '$122binary_subscr.56'}), (124, {'lhs': '$kept_edges_nonzero112.50', 'rhs': '$122binary_subscr.56', 'res': '$124binary_multiply.57'}), (126, {'res': '$XD_nonzero126.58'}), (128, {'res': '$n_nonzero_edges128.59'}), (130, {'res': '$const130.60'}), (132, {'start': '$n_nonzero_edges128.59', 'stop': '$const130.60', 'step': None, 'res': '$132build_slice.62', 'slicevar': '$132build_slice.61'}), (134, {'target': '$XD_nonzero126.58', 'index': '$132build_slice.62', 'value': '$124binary_multiply.57'}), (136, {'res': '$XD_nonzero136.63'}), (138, {'res': '$D_nonzero138.64'}), (140, {'items': ['$XD_nonzero136.63', '$D_nonzero138.64'], 'res': '$140build_tuple.65'}), (142, {'retval': '$140build_tuple.65', 'castval': '$142return_value.66'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:44,495 label 0:
    kept_edges = arg(0, name=kept_edges)     ['kept_edges']
    D = arg(1, name=D)                       ['D']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:233), Var(kept_edges, _loop_hafnian_subroutines.py:233)]) ['$10build_tuple.4', 'kept_edges', 'kept_edges']
    z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:233)], kws=(), vararg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'z']
    $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.6']
    $18load_method.7 = getattr(value=$16load_global.6, attr=where) ['$16load_global.6', '$18load_method.7']
    $const22.9 = const(int, 0)               ['$const22.9']
    $24compare_op.10 = z != $const22.9       ['$24compare_op.10', '$const22.9', 'z']
    $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:234)], kws=(), vararg=None, target=None) ['$18load_method.7', '$24compare_op.10', '$26call_method.11']
    $const28.12 = const(int, 0)              ['$const28.12']
    nonzero_rows = getitem(value=$26call_method.11, index=$const28.12, fn=<built-in function getitem>) ['$26call_method.11', '$const28.12', 'nonzero_rows']
    $34load_global.14 = global(len: <built-in function len>) ['$34load_global.14']
    $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:234)], kws=(), vararg=None, target=None) ['$34load_global.14', '$38call_function.16', 'nonzero_rows']
    $const40.17 = const(int, 2)              ['$const40.17']
    n_nonzero_edges = $38call_function.16 // $const40.17 ['$38call_function.16', '$const40.17', 'n_nonzero_edges']
    $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$48load_global.20']
    $50load_method.21 = getattr(value=$48load_global.20, attr=where) ['$48load_global.20', '$50load_method.21']
    $const54.23 = const(int, 0)              ['$const54.23']
    $56compare_op.24 = kept_edges != $const54.23 ['$56compare_op.24', '$const54.23', 'kept_edges']
    $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:237)], kws=(), vararg=None, target=None) ['$50load_method.21', '$56compare_op.24', '$58call_method.25']
    kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>) ['$58call_method.25', 'kept_edges', 'kept_edges_nonzero']
    D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>) ['D', 'D_nonzero', 'nonzero_rows']
    $72load_global.30 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$72load_global.30']
    $74load_attr.31 = getattr(value=$72load_global.30, attr=empty_like) ['$72load_global.30', '$74load_attr.31']
    $78load_global.33 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$78load_global.33']
    $80load_attr.34 = getattr(value=$78load_global.33, attr=complex128) ['$78load_global.33', '$80load_attr.34']
    XD_nonzero = call $74load_attr.31(D_nonzero, func=$74load_attr.31, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:239)], kws=[('dtype', Var($80load_attr.34, _loop_hafnian_subroutines.py:241))], vararg=None, target=None) ['$74load_attr.31', '$80load_attr.34', 'D_nonzero', 'XD_nonzero']
    $const94.40 = const(NoneType, None)      ['$const94.40']
    $96build_slice.41 = global(slice: <class 'slice'>) ['$96build_slice.41']
    $96build_slice.42 = call $96build_slice.41(n_nonzero_edges, $const94.40, func=$96build_slice.41, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235), Var($const94.40, _loop_hafnian_subroutines.py:242)), kws=(), vararg=None, target=None) ['$96build_slice.41', '$96build_slice.42', '$const94.40', 'n_nonzero_edges']
    $98binary_subscr.43 = getitem(value=D_nonzero, index=$96build_slice.42, fn=<built-in function getitem>) ['$96build_slice.42', '$98binary_subscr.43', 'D_nonzero']
    $100binary_multiply.44 = kept_edges_nonzero * $98binary_subscr.43 ['$100binary_multiply.44', '$98binary_subscr.43', 'kept_edges_nonzero']
    $const104.46 = const(NoneType, None)     ['$const104.46']
    $108build_slice.48 = global(slice: <class 'slice'>) ['$108build_slice.48']
    $108build_slice.49 = call $108build_slice.48($const104.46, n_nonzero_edges, func=$108build_slice.48, args=(Var($const104.46, _loop_hafnian_subroutines.py:242), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235)), kws=(), vararg=None, target=None) ['$108build_slice.48', '$108build_slice.49', '$const104.46', 'n_nonzero_edges']
    XD_nonzero[$108build_slice.49] = $100binary_multiply.44 ['$100binary_multiply.44', '$108build_slice.49', 'XD_nonzero']
    $const116.52 = const(NoneType, None)     ['$const116.52']
    $120build_slice.54 = global(slice: <class 'slice'>) ['$120build_slice.54']
    $120build_slice.55 = call $120build_slice.54($const116.52, n_nonzero_edges, func=$120build_slice.54, args=(Var($const116.52, _loop_hafnian_subroutines.py:243), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235)), kws=(), vararg=None, target=None) ['$120build_slice.54', '$120build_slice.55', '$const116.52', 'n_nonzero_edges']
    $122binary_subscr.56 = getitem(value=D_nonzero, index=$120build_slice.55, fn=<built-in function getitem>) ['$120build_slice.55', '$122binary_subscr.56', 'D_nonzero']
    $124binary_multiply.57 = kept_edges_nonzero * $122binary_subscr.56 ['$122binary_subscr.56', '$124binary_multiply.57', 'kept_edges_nonzero']
    $const130.60 = const(NoneType, None)     ['$const130.60']
    $132build_slice.61 = global(slice: <class 'slice'>) ['$132build_slice.61']
    $132build_slice.62 = call $132build_slice.61(n_nonzero_edges, $const130.60, func=$132build_slice.61, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235), Var($const130.60, _loop_hafnian_subroutines.py:243)), kws=(), vararg=None, target=None) ['$132build_slice.61', '$132build_slice.62', '$const130.60', 'n_nonzero_edges']
    XD_nonzero[$132build_slice.62] = $124binary_multiply.57 ['$124binary_multiply.57', '$132build_slice.62', 'XD_nonzero']
    $140build_tuple.65 = build_tuple(items=[Var(XD_nonzero, _loop_hafnian_subroutines.py:241), Var(D_nonzero, _loop_hafnian_subroutines.py:239)]) ['$140build_tuple.65', 'D_nonzero', 'XD_nonzero']
    $142return_value.66 = cast(value=$140build_tuple.65) ['$140build_tuple.65', '$142return_value.66']
    return $142return_value.66               ['$142return_value.66']

DEBUG 2022-02-14 16:45:44,499 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:44,499 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b96a6400>
DEBUG 2022-02-14 16:45:44,499 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:45:44,499 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:45:44,499 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:44,499 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:45:44,499 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:233), Var(kept_edges, _loop_hafnian_subroutines.py:233)])
DEBUG 2022-02-14 16:45:44,499 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:233)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,500 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:45:44,500 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:45:44,500 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:45:44,500 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:234)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,500 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:45:44,500 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:234)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,500 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:45:44,500 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:45:44,500 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:45:44,500 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:45:44,500 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:45:44,500 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,500 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:44,500 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $72load_global.30 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $74load_attr.31 = getattr(value=$72load_global.30, attr=empty_like)
DEBUG 2022-02-14 16:45:44,500 on stmt: $78load_global.33 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:44,500 on stmt: $80load_attr.34 = getattr(value=$78load_global.33, attr=complex128)
DEBUG 2022-02-14 16:45:44,500 on stmt: XD_nonzero = call $74load_attr.31(D_nonzero, func=$74load_attr.31, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:239)], kws=[('dtype', Var($80load_attr.34, _loop_hafnian_subroutines.py:241))], vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $const94.40 = const(NoneType, None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $96build_slice.41 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $96build_slice.42 = call $96build_slice.41(n_nonzero_edges, $const94.40, func=$96build_slice.41, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235), Var($const94.40, _loop_hafnian_subroutines.py:242)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $98binary_subscr.43 = getitem(value=D_nonzero, index=$96build_slice.42, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $100binary_multiply.44 = kept_edges_nonzero * $98binary_subscr.43
DEBUG 2022-02-14 16:45:44,501 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $108build_slice.48 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $108build_slice.49 = call $108build_slice.48($const104.46, n_nonzero_edges, func=$108build_slice.48, args=(Var($const104.46, _loop_hafnian_subroutines.py:242), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,501 on stmt: XD_nonzero[$108build_slice.49] = $100binary_multiply.44
DEBUG 2022-02-14 16:45:44,501 on stmt: $const116.52 = const(NoneType, None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $120build_slice.54 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $120build_slice.55 = call $120build_slice.54($const116.52, n_nonzero_edges, func=$120build_slice.54, args=(Var($const116.52, _loop_hafnian_subroutines.py:243), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $122binary_subscr.56 = getitem(value=D_nonzero, index=$120build_slice.55, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $124binary_multiply.57 = kept_edges_nonzero * $122binary_subscr.56
DEBUG 2022-02-14 16:45:44,501 on stmt: $const130.60 = const(NoneType, None)
DEBUG 2022-02-14 16:45:44,501 on stmt: $132build_slice.61 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:44,501 on stmt: $132build_slice.62 = call $132build_slice.61(n_nonzero_edges, $const130.60, func=$132build_slice.61, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:235), Var($const130.60, _loop_hafnian_subroutines.py:243)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:44,501 on stmt: XD_nonzero[$132build_slice.62] = $124binary_multiply.57
DEBUG 2022-02-14 16:45:44,501 on stmt: $140build_tuple.65 = build_tuple(items=[Var(XD_nonzero, _loop_hafnian_subroutines.py:241), Var(D_nonzero, _loop_hafnian_subroutines.py:239)])
DEBUG 2022-02-14 16:45:44,501 on stmt: $142return_value.66 = cast(value=$140build_tuple.65)
DEBUG 2022-02-14 16:45:44,501 on stmt: return $142return_value.66
DEBUG 2022-02-14 16:45:44,502 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.44': [<numba.core.ir.Assign object at 0x7f71b8fffc10>],
             '$108build_slice.48': [<numba.core.ir.Assign object at 0x7f71b912eee0>],
             '$108build_slice.49': [<numba.core.ir.Assign object at 0x7f71b9629790>],
             '$10build_tuple.4': [<numba.core.ir.Assign object at 0x7f71b94e81f0>],
             '$120build_slice.54': [<numba.core.ir.Assign object at 0x7f71b9698400>],
             '$120build_slice.55': [<numba.core.ir.Assign object at 0x7f71b9911520>],
             '$122binary_subscr.56': [<numba.core.ir.Assign object at 0x7f71b99111c0>],
             '$124binary_multiply.57': [<numba.core.ir.Assign object at 0x7f71b9911340>],
             '$132build_slice.61': [<numba.core.ir.Assign object at 0x7f71b9911640>],
             '$132build_slice.62': [<numba.core.ir.Assign object at 0x7f71b9911a00>],
             '$140build_tuple.65': [<numba.core.ir.Assign object at 0x7f71b8a687f0>],
             '$142return_value.66': [<numba.core.ir.Assign object at 0x7f71b8a68df0>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x7f71b94e8880>],
             '$18load_method.7': [<numba.core.ir.Assign object at 0x7f71b94e8490>],
             '$24compare_op.10': [<numba.core.ir.Assign object at 0x7f71b94e8d60>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x7f71b94e89a0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9caa5e0>],
             '$34load_global.14': [<numba.core.ir.Assign object at 0x7f71b9604550>],
             '$38call_function.16': [<numba.core.ir.Assign object at 0x7f71b94783d0>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x7f71b9916dc0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71b98ffd90>],
             '$50load_method.21': [<numba.core.ir.Assign object at 0x7f71b99168e0>],
             '$56compare_op.24': [<numba.core.ir.Assign object at 0x7f71b9caa130>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7f71b9caaa60>],
             '$72load_global.30': [<numba.core.ir.Assign object at 0x7f71b99109d0>],
             '$74load_attr.31': [<numba.core.ir.Assign object at 0x7f71b9910790>],
             '$78load_global.33': [<numba.core.ir.Assign object at 0x7f71b9910250>],
             '$80load_attr.34': [<numba.core.ir.Assign object at 0x7f71b99107f0>],
             '$96build_slice.41': [<numba.core.ir.Assign object at 0x7f71b8e93ee0>],
             '$96build_slice.42': [<numba.core.ir.Assign object at 0x7f71b8e74fa0>],
             '$98binary_subscr.43': [<numba.core.ir.Assign object at 0x7f71b8fbad00>],
             '$const104.46': [<numba.core.ir.Assign object at 0x7f71b90f6b80>],
             '$const116.52': [<numba.core.ir.Assign object at 0x7f71b9601ac0>],
             '$const130.60': [<numba.core.ir.Assign object at 0x7f71b9911970>],
             '$const22.9': [<numba.core.ir.Assign object at 0x7f71b94e8dc0>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7f71b94e8790>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7f71b990a400>],
             '$const54.23': [<numba.core.ir.Assign object at 0x7f71b9916190>],
             '$const94.40': [<numba.core.ir.Assign object at 0x7f71ba0fef40>],
             'D': [<numba.core.ir.Assign object at 0x7f71b9caa910>],
             'D_nonzero': [<numba.core.ir.Assign object at 0x7f71b945fa00>],
             'XD_nonzero': [<numba.core.ir.Assign object at 0x7f71b990fb50>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71b9caafa0>],
             'kept_edges_nonzero': [<numba.core.ir.Assign object at 0x7f71b9caaa90>],
             'n_nonzero_edges': [<numba.core.ir.Assign object at 0x7f71b9916070>],
             'nonzero_rows': [<numba.core.ir.Assign object at 0x7f71b96a38b0>],
             'z': [<numba.core.ir.Assign object at 0x7f71b94e88b0>]})
DEBUG 2022-02-14 16:45:44,502 SSA violators set()
DEBUG 2022-02-14 16:45:44,526 bytecode dump:
>          0	NOP(arg=None, lineno=233)
           2	LOAD_FAST(arg=0, lineno=233)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,526 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:44,526 stack: []
DEBUG 2022-02-14 16:45:44,526 dispatch pc=0, inst=NOP(arg=None, lineno=233)
DEBUG 2022-02-14 16:45:44,526 stack []
DEBUG 2022-02-14 16:45:44,526 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG 2022-02-14 16:45:44,526 stack []
DEBUG 2022-02-14 16:45:44,526 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:45:44,526 stack ['$z_12.0']
DEBUG 2022-02-14 16:45:44,526 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:45:44,526 stack ['$z_12.0', '$const4.1']
DEBUG 2022-02-14 16:45:44,526 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,526 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:44,527 end state. edges=[]
DEBUG 2022-02-14 16:45:44,527 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:44,527 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:44,527 defmap: {}
DEBUG 2022-02-14 16:45:44,527 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,527 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,527 keep phismap: {}
DEBUG 2022-02-14 16:45:44,527 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:44,527 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:44,527 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$z_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:44,527 label 0:
    z_1 = arg(0, name=z_1)                   ['z_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = z_1 != $const4.1        ['$6compare_op.2', '$const4.1', 'z_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:44,528 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:44,528 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8aa85e0>
DEBUG 2022-02-14 16:45:44,529 on stmt: z_1 = arg(0, name=z_1)
DEBUG 2022-02-14 16:45:44,529 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:44,529 on stmt: $6compare_op.2 = z_1 != $const4.1
DEBUG 2022-02-14 16:45:44,529 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:45:44,529 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:44,529 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b8acf550>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8acf6a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b8acf3a0>],
             'z_1': [<numba.core.ir.Assign object at 0x7f71b8aa8b20>]})
DEBUG 2022-02-14 16:45:44,529 SSA violators set()
DEBUG 2022-02-14 16:45:44,545 bytecode dump:
>          0	NOP(arg=None, lineno=233)
           2	LOAD_FAST(arg=0, lineno=233)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,545 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:44,545 stack: []
DEBUG 2022-02-14 16:45:44,545 dispatch pc=0, inst=NOP(arg=None, lineno=233)
DEBUG 2022-02-14 16:45:44,545 stack []
DEBUG 2022-02-14 16:45:44,545 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG 2022-02-14 16:45:44,545 stack []
DEBUG 2022-02-14 16:45:44,545 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:45:44,545 stack ['$kept_edges_12.0']
DEBUG 2022-02-14 16:45:44,545 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:45:44,545 stack ['$kept_edges_12.0', '$const4.1']
DEBUG 2022-02-14 16:45:44,545 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,545 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:45:44,546 end state. edges=[]
DEBUG 2022-02-14 16:45:44,546 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:44,546 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:44,546 defmap: {}
DEBUG 2022-02-14 16:45:44,546 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,546 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,546 keep phismap: {}
DEBUG 2022-02-14 16:45:44,546 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:44,546 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:44,546 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$kept_edges_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:44,546 label 0:
    kept_edges_1 = arg(0, name=kept_edges_1) ['kept_edges_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = kept_edges_1 != $const4.1 ['$6compare_op.2', '$const4.1', 'kept_edges_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:44,547 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:44,547 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8a06d90>
DEBUG 2022-02-14 16:45:44,547 on stmt: kept_edges_1 = arg(0, name=kept_edges_1)
DEBUG 2022-02-14 16:45:44,547 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:45:44,547 on stmt: $6compare_op.2 = kept_edges_1 != $const4.1
DEBUG 2022-02-14 16:45:44,547 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:45:44,548 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:44,548 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f71b8a0aa60>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8a0abb0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b8a0a8b0>],
             'kept_edges_1': [<numba.core.ir.Assign object at 0x7f71b8a0a430>]})
DEBUG 2022-02-14 16:45:44,548 SSA violators set()
DEBUG 2022-02-14 16:45:44,731 bytecode dump:
>          0	NOP(arg=None, lineno=237)
           2	LOAD_FAST(arg=1, lineno=237)
           4	LOAD_FAST(arg=0, lineno=242)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,731 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:44,731 stack: []
DEBUG 2022-02-14 16:45:44,731 dispatch pc=0, inst=NOP(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:44,731 stack []
DEBUG 2022-02-14 16:45:44,731 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:44,732 stack []
DEBUG 2022-02-14 16:45:44,732 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:44,732 stack ['$kept_edges_nonzero_12.0']
DEBUG 2022-02-14 16:45:44,732 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,732 stack ['$kept_edges_nonzero_12.0', '$_98binary_subscr_43_14.1']
DEBUG 2022-02-14 16:45:44,732 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,732 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:44,732 end state. edges=[]
DEBUG 2022-02-14 16:45:44,732 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:44,732 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:44,732 defmap: {}
DEBUG 2022-02-14 16:45:44,732 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,732 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,732 keep phismap: {}
DEBUG 2022-02-14 16:45:44,732 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:44,733 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:44,733 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_12.0'}), (4, {'res': '$_98binary_subscr_43_14.1'}), (6, {'lhs': '$kept_edges_nonzero_12.0', 'rhs': '$_98binary_subscr_43_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:44,733 label 0:
    _98binary_subscr_43_1 = arg(0, name=_98binary_subscr_43_1) ['_98binary_subscr_43_1']
    kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1) ['kept_edges_nonzero_1']
    $6binary_multiply.2 = kept_edges_nonzero_1 * _98binary_subscr_43_1 ['$6binary_multiply.2', '_98binary_subscr_43_1', 'kept_edges_nonzero_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:44,735 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:44,735 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9698880>
DEBUG 2022-02-14 16:45:44,735 on stmt: _98binary_subscr_43_1 = arg(0, name=_98binary_subscr_43_1)
DEBUG 2022-02-14 16:45:44,735 on stmt: kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1)
DEBUG 2022-02-14 16:45:44,735 on stmt: $6binary_multiply.2 = kept_edges_nonzero_1 * _98binary_subscr_43_1
DEBUG 2022-02-14 16:45:44,735 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:44,735 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:44,735 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b9660790>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b96608e0>],
             '_98binary_subscr_43_1': [<numba.core.ir.Assign object at 0x7f71b8d17610>],
             'kept_edges_nonzero_1': [<numba.core.ir.Assign object at 0x7f71b9660190>]})
DEBUG 2022-02-14 16:45:44,735 SSA violators set()
DEBUG 2022-02-14 16:45:44,768 bytecode dump:
>          0	NOP(arg=None, lineno=237)
           2	LOAD_FAST(arg=1, lineno=237)
           4	LOAD_FAST(arg=0, lineno=243)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,768 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:44,768 stack: []
DEBUG 2022-02-14 16:45:44,768 dispatch pc=0, inst=NOP(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:44,768 stack []
DEBUG 2022-02-14 16:45:44,768 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:44,768 stack []
DEBUG 2022-02-14 16:45:44,768 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=243)
DEBUG 2022-02-14 16:45:44,768 stack ['$kept_edges_nonzero_22.0']
DEBUG 2022-02-14 16:45:44,769 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,769 stack ['$kept_edges_nonzero_22.0', '$_122binary_subscr_56_14.1']
DEBUG 2022-02-14 16:45:44,769 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:45:44,769 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:45:44,769 end state. edges=[]
DEBUG 2022-02-14 16:45:44,769 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:44,769 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:44,769 defmap: {}
DEBUG 2022-02-14 16:45:44,769 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,769 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:44,769 keep phismap: {}
DEBUG 2022-02-14 16:45:44,769 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:44,769 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:44,769 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_22.0'}), (4, {'res': '$_122binary_subscr_56_14.1'}), (6, {'lhs': '$kept_edges_nonzero_22.0', 'rhs': '$_122binary_subscr_56_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:44,770 label 0:
    _122binary_subscr_56_1 = arg(0, name=_122binary_subscr_56_1) ['_122binary_subscr_56_1']
    kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2) ['kept_edges_nonzero_2']
    $6binary_multiply.2 = kept_edges_nonzero_2 * _122binary_subscr_56_1 ['$6binary_multiply.2', '_122binary_subscr_56_1', 'kept_edges_nonzero_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:44,771 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:44,771 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8f3c250>
DEBUG 2022-02-14 16:45:44,771 on stmt: _122binary_subscr_56_1 = arg(0, name=_122binary_subscr_56_1)
DEBUG 2022-02-14 16:45:44,771 on stmt: kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2)
DEBUG 2022-02-14 16:45:44,771 on stmt: $6binary_multiply.2 = kept_edges_nonzero_2 * _122binary_subscr_56_1
DEBUG 2022-02-14 16:45:44,771 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:45:44,771 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:44,771 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f71b8f40be0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b8f40ca0>],
             '_122binary_subscr_56_1': [<numba.core.ir.Assign object at 0x7f71b8f3c2e0>],
             'kept_edges_nonzero_2': [<numba.core.ir.Assign object at 0x7f71b8f3c340>]})
DEBUG 2022-02-14 16:45:44,771 SSA violators set()
DEBUG 2022-02-14 16:45:45,256 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:45,256 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:45,256 stack: []
DEBUG 2022-02-14 16:45:45,256 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack []
DEBUG 2022-02-14 16:45:45,256 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack []
DEBUG 2022-02-14 16:45:45,256 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:45,256 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:45:45,256 stack []
DEBUG 2022-02-14 16:45:45,256 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:45:45,256 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:45,256 stack []
DEBUG 2022-02-14 16:45:45,256 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,256 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:45,256 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:45,257 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,257 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,257 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:45,257 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:45:45,257 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:45,257 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,257 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,257 stack: []
DEBUG 2022-02-14 16:45:45,257 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:45:45,258 stack []
DEBUG 2022-02-14 16:45:45,258 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:45,258 stack ['$val54.0']
DEBUG 2022-02-14 16:45:45,258 end state. edges=[]
DEBUG 2022-02-14 16:45:45,258 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,258 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:45:45,258 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:45:45,258 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,258 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,258 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,258 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:45,258 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:45,259 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:45,259 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,259 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,259 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,259 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,260 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:45,260 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:45,260 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:45,260 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:45,260 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:45,260 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:45,260 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:45,263 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:45,269 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:45,269 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:45,269 stack: []
DEBUG 2022-02-14 16:45:45,269 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack []
DEBUG 2022-02-14 16:45:45,269 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack []
DEBUG 2022-02-14 16:45:45,269 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:45:45,269 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:45:45,269 stack []
DEBUG 2022-02-14 16:45:45,269 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:45:45,269 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:45,269 stack []
DEBUG 2022-02-14 16:45:45,269 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,269 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:45,269 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:45,270 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,270 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,270 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:45,270 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:45:45,270 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:45,270 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,270 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,270 stack: []
DEBUG 2022-02-14 16:45:45,270 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:45:45,270 stack []
DEBUG 2022-02-14 16:45:45,270 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:45:45,270 stack ['$val54.0']
DEBUG 2022-02-14 16:45:45,270 end state. edges=[]
DEBUG 2022-02-14 16:45:45,271 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,271 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:45:45,271 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:45:45,271 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,271 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,271 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,271 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:45,271 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:45,271 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:45,272 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,272 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,272 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,272 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,272 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:45,272 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:45,273 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:45,273 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:45,273 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:45,273 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:45,273 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:45,274 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:45,279 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:45:45,279 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:45,279 stack: []
DEBUG 2022-02-14 16:45:45,279 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:45:45,279 stack []
DEBUG 2022-02-14 16:45:45,279 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-02-14 16:45:45,279 stack []
DEBUG 2022-02-14 16:45:45,279 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-02-14 16:45:45,279 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-02-14 16:45:45,280 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-02-14 16:45:45,280 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-02-14 16:45:45,280 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:45:45,280 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-02-14 16:45:45,280 stack []
DEBUG 2022-02-14 16:45:45,280 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-02-14 16:45:45,280 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-02-14 16:45:45,280 stack []
DEBUG 2022-02-14 16:45:45,280 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:45,280 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-02-14 16:45:45,280 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-02-14 16:45:45,280 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-02-14 16:45:45,280 stack ['$24load_method.9']
DEBUG 2022-02-14 16:45:45,280 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$32call_method.13']
DEBUG 2022-02-14 16:45:45,281 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,281 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,281 stack: ['$phi36.0']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$phi36.0']
DEBUG 2022-02-14 16:45:45,281 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,281 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,281 stack: []
DEBUG 2022-02-14 16:45:45,281 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-02-14 16:45:45,281 stack []
DEBUG 2022-02-14 16:45:45,281 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:45:45,281 stack ['$val54.0']
DEBUG 2022-02-14 16:45:45,281 end state. edges=[]
DEBUG 2022-02-14 16:45:45,281 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,281 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-02-14 16:45:45,281 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:45:45,281 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:45:45,281 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-02-14 16:45:45,282 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-02-14 16:45:45,282 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:45,282 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,282 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,282 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:45,282 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:45,282 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:45:45,282 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,283 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,283 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,283 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,283 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:45,283 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:45:45,283 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:45,283 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:45:45,284 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:45:45,284 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:45:45,284 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:45,285 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:45:45,290 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:45,290 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:45,290 stack: []
DEBUG 2022-02-14 16:45:45,290 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:45:45,290 stack []
DEBUG 2022-02-14 16:45:45,291 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack []
DEBUG 2022-02-14 16:45:45,291 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack ['$8load_method.3']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:45:45,291 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack []
DEBUG 2022-02-14 16:45:45,291 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack ['$14load_global.5']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-02-14 16:45:45,291 stack ['$22call_function.9']
DEBUG 2022-02-14 16:45:45,291 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-02-14 16:45:45,291 stack []
DEBUG 2022-02-14 16:45:45,291 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-02-14 16:45:45,291 stack ['$26load_global.10']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$28load_attr.11']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$30load_attr.12']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$32load_method.13']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-02-14 16:45:45,292 stack ['$38call_method.16']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack []
DEBUG 2022-02-14 16:45:45,292 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$42load_global.17']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$44load_attr.18']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$46load_attr.19']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$48load_method.20']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-02-14 16:45:45,292 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-02-14 16:45:45,292 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-02-14 16:45:45,293 stack ['$56call_method.24']
DEBUG 2022-02-14 16:45:45,293 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,293 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,293 stack: ['$phi60.0']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi60.0']
DEBUG 2022-02-14 16:45:45,293 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,293 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,293 stack: []
DEBUG 2022-02-14 16:45:45,293 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-02-14 16:45:45,293 stack []
DEBUG 2022-02-14 16:45:45,293 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:45:45,293 stack ['$val80.0']
DEBUG 2022-02-14 16:45:45,293 end state. edges=[]
DEBUG 2022-02-14 16:45:45,293 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:45,293 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-02-14 16:45:45,293 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-02-14 16:45:45,293 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-02-14 16:45:45,294 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-02-14 16:45:45,294 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-02-14 16:45:45,294 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-02-14 16:45:45,294 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:45:45,294 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-02-14 16:45:45,294 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-02-14 16:45:45,294 stack ['$phi62.0']
DEBUG 2022-02-14 16:45:45,294 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:45,294 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:45:45,294 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:45,294 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:45,294 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:45:45,294 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,295 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,295 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,295 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:45,295 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:45,295 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-02-14 16:45:45,295 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:45,296 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-02-14 16:45:45,296 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:45:45,296 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-02-14 16:45:45,296 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:45,297 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x7f71c176eee0>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-02-14 16:45:45,395 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:45,395 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:45,395 stack: []
DEBUG 2022-02-14 16:45:45,395 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack []
DEBUG 2022-02-14 16:45:45,395 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack []
DEBUG 2022-02-14 16:45:45,395 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:45,395 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:45,395 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:45,395 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:45,395 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:45,395 end state. edges=[]
DEBUG 2022-02-14 16:45:45,395 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:45,395 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:45,396 defmap: {}
DEBUG 2022-02-14 16:45:45,396 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:45,396 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:45,396 keep phismap: {}
DEBUG 2022-02-14 16:45:45,396 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:45,396 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:45,396 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:45,396 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:45,397 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:45,397 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9a1e490>
DEBUG 2022-02-14 16:45:45,397 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:45,397 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:45,397 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:45,397 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:45,398 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:45,398 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:45,398 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b9d9b940>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9dba100>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b9d9b820>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9dbaa60>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71b9dba580>]})
DEBUG 2022-02-14 16:45:45,398 SSA violators set()
DEBUG 2022-02-14 16:45:46,201 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:46,202 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:46,202 stack: []
DEBUG 2022-02-14 16:45:46,202 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,202 stack []
DEBUG 2022-02-14 16:45:46,202 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,202 stack []
DEBUG 2022-02-14 16:45:46,202 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:46,202 stack ['$val_1294__arr2.0']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,202 stack ['$val_1294__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-02-14 16:45:46,202 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,202 stack []
DEBUG 2022-02-14 16:45:46,202 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,202 stack ['$10load_global.3']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,202 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,202 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-02-14 16:45:46,202 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,202 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$34call_function.15']
DEBUG 2022-02-14 16:45:46,203 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,203 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,203 stack: ['$phi38.0']
DEBUG 2022-02-14 16:45:46,203 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:45:46,203 stack ['$phi38.0']
DEBUG 2022-02-14 16:45:46,203 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,204 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,204 stack: []
DEBUG 2022-02-14 16:45:46,204 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-02-14 16:45:46,204 stack []
DEBUG 2022-02-14 16:45:46,204 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:46,204 stack ['$val_129448.0']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:45:46,204 stack ['$val_129448.0', '$val_1294__arr50.1']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:46,204 stack ['$val_129448.0', '$val_1294__arr50.1', '$const52.2']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:45:46,204 stack []
DEBUG 2022-02-14 16:45:46,204 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:46,204 stack ['$const56.3']
DEBUG 2022-02-14 16:45:46,204 end state. edges=[]
DEBUG 2022-02-14 16:45:46,204 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,204 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-02-14 16:45:46,204 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:46,204 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-02-14 16:45:46,204 stack ['$phi40.0', '$const42.2']
DEBUG 2022-02-14 16:45:46,204 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-02-14 16:45:46,204 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:46,204 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,204 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,205 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:46,205 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:46,205 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:45:46,205 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,205 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,205 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,205 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,206 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:46,206 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:45:46,206 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:46,206 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1294__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1294__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-02-14 16:45:46,206 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:45:46,206 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:45:46,206 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_129448.0'}), (50, {'res': '$val_1294__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_1294__arr50.1', 'index': '$const52.2', 'value': '$val_129448.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:46,207 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_1294__arr = arg(2, name=val_1294__arr) ['val_1294__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1294 = getitem(value=val_1294__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1294', 'val_1294__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_1513 = $phi40.1            ['$phi40.1', 'parfor__index_1513']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_1294__arr[$const52.2] = val_1294     ['$const52.2', 'val_1294', 'val_1294__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-02-14 16:45:46,211 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:46,211 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,211 on stmt: sched.2021 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,211 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:46,211 on stmt: val_1294__arr = arg(2, name=val_1294__arr)
DEBUG 2022-02-14 16:45:46,212 on stmt: $const4.1.2022 = const(int, 0)
DEBUG 2022-02-14 16:45:46,212 on stmt: val_1294 = getitem(value=val_1294__arr, index=$const4.1.2022, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,212 on stmt: $10load_global.3.2023 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,212 on stmt: $const14.5.2024 = const(int, 0)
DEBUG 2022-02-14 16:45:46,212 on stmt: $16binary_subscr.6.2025 = getitem(value=sched.2021, index=$const14.5.2024, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,212 on stmt: $const20.8.2026 = const(int, 1)
DEBUG 2022-02-14 16:45:46,212 on stmt: $22binary_subscr.9.2027 = getitem(value=sched.2021, index=$const20.8.2026, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,212 on stmt: $24load_global.10.2028 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,212 on stmt: $26load_method.11.2029 = getattr(value=$24load_global.10.2028, attr=uint8)
DEBUG 2022-02-14 16:45:46,212 on stmt: $const28.12.2030 = const(int, 1)
DEBUG 2022-02-14 16:45:46,212 on stmt: $30call_method.13.2031 = call $26load_method.11.2029($const28.12.2030, func=$26load_method.11.2029, args=[Var($const28.12.2030, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,212 on stmt: $32binary_add.14.2032 = $22binary_subscr.9.2027 + $30call_method.13.2031
DEBUG 2022-02-14 16:45:46,212 on stmt: $34call_function.15.2033 = call $10load_global.3.2023($16binary_subscr.6.2025, $32binary_add.14.2032, func=$10load_global.3.2023, args=[Var($16binary_subscr.6.2025, <string>:3), Var($32binary_add.14.2032, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,212 on stmt: $36get_iter.16.2034 = getiter(value=$34call_function.15.2033)
DEBUG 2022-02-14 16:45:46,212 on stmt: $phi38.0.2035 = $36get_iter.16.2034
DEBUG 2022-02-14 16:45:46,212 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,212 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:45:46,212 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,212 on stmt: $38for_iter.1.2036 = iternext(value=$phi38.0.2035)
DEBUG 2022-02-14 16:45:46,212 on stmt: $38for_iter.2.2037 = pair_first(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,212 on stmt: $38for_iter.3.2038 = pair_second(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,212 on stmt: $phi40.1.2039 = $38for_iter.2.2037
DEBUG 2022-02-14 16:45:46,212 on stmt: branch $38for_iter.3.2038, 40, 232
DEBUG 2022-02-14 16:45:46,212 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:46,212 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,213 on stmt: parfor__index_1513 = $phi40.1.2039
DEBUG 2022-02-14 16:45:46,213 on stmt: jump 48
DEBUG 2022-02-14 16:45:46,213 ==== SSA block analysis pass on 232
DEBUG 2022-02-14 16:45:46,213 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,213 on stmt: $const52.2.2040 = const(int, 0)
DEBUG 2022-02-14 16:45:46,213 on stmt: val_1294__arr[$const52.2.2040] = val_1294
DEBUG 2022-02-14 16:45:46,213 on stmt: $const56.3.2041 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,213 on stmt: $58return_value.4.2042 = cast(value=$const56.3.2041)
DEBUG 2022-02-14 16:45:46,213 on stmt: return $58return_value.4.2042
DEBUG 2022-02-14 16:45:46,213 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:46,213 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,213 on stmt: $46binary_subscr.5.1313 = getitem(value=fixed__edge__reps, index=parfor__index_1513, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,213 on stmt: $val.1294.1970 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1294, rhs=$46binary_subscr.5.1313, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,213 on stmt: val_1294 = $val.1294.1970
DEBUG 2022-02-14 16:45:46,213 on stmt: jump 231
DEBUG 2022-02-14 16:45:46,213 ==== SSA block analysis pass on 231
DEBUG 2022-02-14 16:45:46,213 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba0b0fd0>
DEBUG 2022-02-14 16:45:46,213 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,213 defs defaultdict(<class 'list'>,
            {'$10load_global.3.2023': [<numba.core.ir.Assign object at 0x7f71b9cfe400>],
             '$16binary_subscr.6.2025': [<numba.core.ir.Assign object at 0x7f71b9d01190>],
             '$22binary_subscr.9.2027': [<numba.core.ir.Assign object at 0x7f71b9d015b0>],
             '$24load_global.10.2028': [<numba.core.ir.Assign object at 0x7f71b9d01700>],
             '$26load_method.11.2029': [<numba.core.ir.Assign object at 0x7f71b9d01880>],
             '$30call_method.13.2031': [<numba.core.ir.Assign object at 0x7f71b9d01c10>],
             '$32binary_add.14.2032': [<numba.core.ir.Assign object at 0x7f71b9d01d30>],
             '$34call_function.15.2033': [<numba.core.ir.Assign object at 0x7f71b9d01ee0>],
             '$36get_iter.16.2034': [<numba.core.ir.Assign object at 0x7f71ba0c9100>],
             '$38for_iter.1.2036': [<numba.core.ir.Assign object at 0x7f71ba0c9e50>],
             '$38for_iter.2.2037': [<numba.core.ir.Assign object at 0x7f71ba0c9bb0>],
             '$38for_iter.3.2038': [<numba.core.ir.Assign object at 0x7f71ba0c9d30>],
             '$46binary_subscr.5.1313': [<numba.core.ir.Assign object at 0x7f71b92cc790>],
             '$58return_value.4.2042': [<numba.core.ir.Assign object at 0x7f71ba0b1fa0>],
             '$const14.5.2024': [<numba.core.ir.Assign object at 0x7f71b9cfe040>],
             '$const20.8.2026': [<numba.core.ir.Assign object at 0x7f71b9d01400>],
             '$const28.12.2030': [<numba.core.ir.Assign object at 0x7f71b9d01a00>],
             '$const4.1.2022': [<numba.core.ir.Assign object at 0x7f71b9cfed60>],
             '$const52.2.2040': [<numba.core.ir.Assign object at 0x7f71ba0c9160>],
             '$const56.3.2041': [<numba.core.ir.Assign object at 0x7f71ba0b1eb0>],
             '$phi38.0.2035': [<numba.core.ir.Assign object at 0x7f71b9d01310>],
             '$phi40.1.2039': [<numba.core.ir.Assign object at 0x7f71ba0c9f10>],
             '$val.1294.1970': [<numba.core.ir.Assign object at 0x7f71b92cc940>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x7f71b9cfea30>],
             'parfor__index_1513': [<numba.core.ir.Assign object at 0x7f71ba0c9940>],
             'sched.2021': [<numba.core.ir.Assign object at 0x7f71b9cfe6d0>],
             'val_1294': [<numba.core.ir.Assign object at 0x7f71b9cfef10>,
                          <numba.core.ir.Assign object at 0x7f71b92cc8b0>],
             'val_1294__arr': [<numba.core.ir.Assign object at 0x7f71b9cfe910>]})
DEBUG 2022-02-14 16:45:46,214 SSA violators {'val_1294'}
DEBUG 2022-02-14 16:45:46,214 Fix SSA violator on var val_1294
DEBUG 2022-02-14 16:45:46,214 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,214 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,214 on stmt: sched.2021 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,214 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:46,214 on stmt: val_1294__arr = arg(2, name=val_1294__arr)
DEBUG 2022-02-14 16:45:46,214 on stmt: $const4.1.2022 = const(int, 0)
DEBUG 2022-02-14 16:45:46,214 on stmt: val_1294 = getitem(value=val_1294__arr, index=$const4.1.2022, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,214 first assign: val_1294
DEBUG 2022-02-14 16:45:46,214 replaced with: val_1294 = getitem(value=val_1294__arr, index=$const4.1.2022, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,214 on stmt: $10load_global.3.2023 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,214 on stmt: $const14.5.2024 = const(int, 0)
DEBUG 2022-02-14 16:45:46,214 on stmt: $16binary_subscr.6.2025 = getitem(value=sched.2021, index=$const14.5.2024, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,214 on stmt: $const20.8.2026 = const(int, 1)
DEBUG 2022-02-14 16:45:46,214 on stmt: $22binary_subscr.9.2027 = getitem(value=sched.2021, index=$const20.8.2026, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,214 on stmt: $24load_global.10.2028 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,214 on stmt: $26load_method.11.2029 = getattr(value=$24load_global.10.2028, attr=uint8)
DEBUG 2022-02-14 16:45:46,214 on stmt: $const28.12.2030 = const(int, 1)
DEBUG 2022-02-14 16:45:46,214 on stmt: $30call_method.13.2031 = call $26load_method.11.2029($const28.12.2030, func=$26load_method.11.2029, args=[Var($const28.12.2030, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,214 on stmt: $32binary_add.14.2032 = $22binary_subscr.9.2027 + $30call_method.13.2031
DEBUG 2022-02-14 16:45:46,214 on stmt: $34call_function.15.2033 = call $10load_global.3.2023($16binary_subscr.6.2025, $32binary_add.14.2032, func=$10load_global.3.2023, args=[Var($16binary_subscr.6.2025, <string>:3), Var($32binary_add.14.2032, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,214 on stmt: $36get_iter.16.2034 = getiter(value=$34call_function.15.2033)
DEBUG 2022-02-14 16:45:46,214 on stmt: $phi38.0.2035 = $36get_iter.16.2034
DEBUG 2022-02-14 16:45:46,215 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,215 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:45:46,215 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,215 on stmt: $38for_iter.1.2036 = iternext(value=$phi38.0.2035)
DEBUG 2022-02-14 16:45:46,215 on stmt: $38for_iter.2.2037 = pair_first(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,215 on stmt: $38for_iter.3.2038 = pair_second(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,215 on stmt: $phi40.1.2039 = $38for_iter.2.2037
DEBUG 2022-02-14 16:45:46,215 on stmt: branch $38for_iter.3.2038, 40, 232
DEBUG 2022-02-14 16:45:46,215 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:46,215 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,215 on stmt: parfor__index_1513 = $phi40.1.2039
DEBUG 2022-02-14 16:45:46,215 on stmt: jump 48
DEBUG 2022-02-14 16:45:46,215 ==== SSA block rewrite pass on 232
DEBUG 2022-02-14 16:45:46,215 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,215 on stmt: $const52.2.2040 = const(int, 0)
DEBUG 2022-02-14 16:45:46,215 on stmt: val_1294__arr[$const52.2.2040] = val_1294
DEBUG 2022-02-14 16:45:46,215 on stmt: $const56.3.2041 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,215 on stmt: $58return_value.4.2042 = cast(value=$const56.3.2041)
DEBUG 2022-02-14 16:45:46,215 on stmt: return $58return_value.4.2042
DEBUG 2022-02-14 16:45:46,215 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,215 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,215 on stmt: $46binary_subscr.5.1313 = getitem(value=fixed__edge__reps, index=parfor__index_1513, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,215 on stmt: $val.1294.1970 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1294, rhs=$46binary_subscr.5.1313, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,215 on stmt: val_1294 = $val.1294.1970
DEBUG 2022-02-14 16:45:46,215 replaced with: val_1294.1 = $val.1294.1970
DEBUG 2022-02-14 16:45:46,215 on stmt: jump 231
DEBUG 2022-02-14 16:45:46,215 ==== SSA block rewrite pass on 231
DEBUG 2022-02-14 16:45:46,215 Running <numba.core.ssa._FreshVarHandler object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,216 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,216 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71ba0b0f40>],
             48: [<numba.core.ir.Assign object at 0x7f71ba097130>]})
DEBUG 2022-02-14 16:45:46,216 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,216 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,216 on stmt: sched.2021 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,216 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:45:46,216 on stmt: val_1294__arr = arg(2, name=val_1294__arr)
DEBUG 2022-02-14 16:45:46,216 on stmt: $const4.1.2022 = const(int, 0)
DEBUG 2022-02-14 16:45:46,216 on stmt: val_1294 = getitem(value=val_1294__arr, index=$const4.1.2022, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,216 on stmt: $10load_global.3.2023 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,216 on stmt: $const14.5.2024 = const(int, 0)
DEBUG 2022-02-14 16:45:46,216 on stmt: $16binary_subscr.6.2025 = getitem(value=sched.2021, index=$const14.5.2024, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,216 on stmt: $const20.8.2026 = const(int, 1)
DEBUG 2022-02-14 16:45:46,216 on stmt: $22binary_subscr.9.2027 = getitem(value=sched.2021, index=$const20.8.2026, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,216 on stmt: $24load_global.10.2028 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,216 on stmt: $26load_method.11.2029 = getattr(value=$24load_global.10.2028, attr=uint8)
DEBUG 2022-02-14 16:45:46,216 on stmt: $const28.12.2030 = const(int, 1)
DEBUG 2022-02-14 16:45:46,216 on stmt: $30call_method.13.2031 = call $26load_method.11.2029($const28.12.2030, func=$26load_method.11.2029, args=[Var($const28.12.2030, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,216 on stmt: $32binary_add.14.2032 = $22binary_subscr.9.2027 + $30call_method.13.2031
DEBUG 2022-02-14 16:45:46,216 on stmt: $34call_function.15.2033 = call $10load_global.3.2023($16binary_subscr.6.2025, $32binary_add.14.2032, func=$10load_global.3.2023, args=[Var($16binary_subscr.6.2025, <string>:3), Var($32binary_add.14.2032, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,216 on stmt: $36get_iter.16.2034 = getiter(value=$34call_function.15.2033)
DEBUG 2022-02-14 16:45:46,216 on stmt: $phi38.0.2035 = $36get_iter.16.2034
DEBUG 2022-02-14 16:45:46,216 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,217 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:45:46,217 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,217 on stmt: $38for_iter.1.2036 = iternext(value=$phi38.0.2035)
DEBUG 2022-02-14 16:45:46,217 on stmt: $38for_iter.2.2037 = pair_first(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,217 on stmt: $38for_iter.3.2038 = pair_second(value=$38for_iter.1.2036)
DEBUG 2022-02-14 16:45:46,217 on stmt: $phi40.1.2039 = $38for_iter.2.2037
DEBUG 2022-02-14 16:45:46,217 on stmt: branch $38for_iter.3.2038, 40, 232
DEBUG 2022-02-14 16:45:46,217 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:46,217 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,217 on stmt: parfor__index_1513 = $phi40.1.2039
DEBUG 2022-02-14 16:45:46,217 on stmt: jump 48
DEBUG 2022-02-14 16:45:46,217 ==== SSA block rewrite pass on 232
DEBUG 2022-02-14 16:45:46,217 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,217 on stmt: $const52.2.2040 = const(int, 0)
DEBUG 2022-02-14 16:45:46,217 on stmt: val_1294__arr[$const52.2.2040] = val_1294
DEBUG 2022-02-14 16:45:46,217 find_def var='val_1294' stmt=val_1294__arr[$const52.2.2040] = val_1294
DEBUG 2022-02-14 16:45:46,217 find_def_from_top label 232
DEBUG 2022-02-14 16:45:46,217 idom 38 from label 232
DEBUG 2022-02-14 16:45:46,217 find_def_from_bottom label 38
DEBUG 2022-02-14 16:45:46,217 find_def_from_top label 38
DEBUG 2022-02-14 16:45:46,217 insert phi node val_1294.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:45:46,217 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:46,217 incoming_def val_1294 = getitem(value=val_1294__arr, index=$const4.1.2022, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,217 find_def_from_bottom label 231
DEBUG 2022-02-14 16:45:46,217 find_def_from_top label 231
DEBUG 2022-02-14 16:45:46,217 idom 48 from label 231
DEBUG 2022-02-14 16:45:46,217 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:46,218 incoming_def val_1294.1 = $val.1294.1970
DEBUG 2022-02-14 16:45:46,218 replaced with: val_1294__arr[$const52.2.2040] = val_1294.2
DEBUG 2022-02-14 16:45:46,218 on stmt: $const56.3.2041 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,218 on stmt: $58return_value.4.2042 = cast(value=$const56.3.2041)
DEBUG 2022-02-14 16:45:46,218 on stmt: return $58return_value.4.2042
DEBUG 2022-02-14 16:45:46,218 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,218 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,218 on stmt: $46binary_subscr.5.1313 = getitem(value=fixed__edge__reps, index=parfor__index_1513, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,218 on stmt: $val.1294.1970 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1294, rhs=$46binary_subscr.5.1313, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,218 find_def var='val_1294' stmt=$val.1294.1970 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1294, rhs=$46binary_subscr.5.1313, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,218 find_def_from_top label 48
DEBUG 2022-02-14 16:45:46,218 idom 40 from label 48
DEBUG 2022-02-14 16:45:46,218 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:46,218 find_def_from_top label 40
DEBUG 2022-02-14 16:45:46,218 idom 38 from label 40
DEBUG 2022-02-14 16:45:46,218 find_def_from_bottom label 38
DEBUG 2022-02-14 16:45:46,218 replaced with: $val.1294.1970 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1294.2, rhs=$46binary_subscr.5.1313, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,218 on stmt: val_1294.1 = $val.1294.1970
DEBUG 2022-02-14 16:45:46,218 on stmt: jump 231
DEBUG 2022-02-14 16:45:46,218 ==== SSA block rewrite pass on 231
DEBUG 2022-02-14 16:45:46,218 Running <numba.core.ssa._FixSSAVars object at 0x7f71ba0b0ca0>
DEBUG 2022-02-14 16:45:46,218 on stmt: jump 38
DEBUG 2022-02-14 16:45:46,534 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:45:46,534 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:46,534 stack: []
DEBUG 2022-02-14 16:45:46,534 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,534 stack []
DEBUG 2022-02-14 16:45:46,534 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,534 stack []
DEBUG 2022-02-14 16:45:46,534 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:46,534 stack ['$val_1365__arr2.0']
DEBUG 2022-02-14 16:45:46,534 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,534 stack ['$val_1365__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-02-14 16:45:46,535 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:46,535 stack []
DEBUG 2022-02-14 16:45:46,535 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,535 stack ['$val_1324__arr10.3']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,535 stack ['$val_1324__arr10.3', '$const12.4']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-02-14 16:45:46,535 stack ['$14binary_subscr.5']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack []
DEBUG 2022-02-14 16:45:46,535 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-02-14 16:45:46,535 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:46,535 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$42call_function.18']
DEBUG 2022-02-14 16:45:46,536 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,536 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,536 stack: ['$phi46.0']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-02-14 16:45:46,536 stack ['$phi46.0']
DEBUG 2022-02-14 16:45:46,536 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,536 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,536 stack: []
DEBUG 2022-02-14 16:45:46,536 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-02-14 16:45:46,536 stack []
DEBUG 2022-02-14 16:45:46,536 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-02-14 16:45:46,536 stack ['$val_136556.0']
DEBUG 2022-02-14 16:45:46,536 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-02-14 16:45:46,536 stack ['$val_136556.0', '$val_1365__arr58.1']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:46,537 stack ['$val_136556.0', '$val_1365__arr58.1', '$const60.2']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-02-14 16:45:46,537 stack []
DEBUG 2022-02-14 16:45:46,537 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-02-14 16:45:46,537 stack ['$val_132464.3']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-02-14 16:45:46,537 stack ['$val_132464.3', '$val_1324__arr66.4']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-02-14 16:45:46,537 stack ['$val_132464.3', '$val_1324__arr66.4', '$const68.5']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-02-14 16:45:46,537 stack []
DEBUG 2022-02-14 16:45:46,537 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:45:46,537 stack ['$const72.6']
DEBUG 2022-02-14 16:45:46,537 end state. edges=[]
DEBUG 2022-02-14 16:45:46,537 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,537 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-02-14 16:45:46,537 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:45:46,537 stack ['$phi48.0']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-02-14 16:45:46,537 stack ['$phi48.0', '$const50.2']
DEBUG 2022-02-14 16:45:46,537 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-02-14 16:45:46,537 stack ['$phi48.0']
DEBUG 2022-02-14 16:45:46,537 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,537 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,537 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:46,538 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:46,538 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-02-14 16:45:46,538 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,538 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,538 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,538 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:46,538 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:46,539 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-02-14 16:45:46,539 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:46,539 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1365__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1365__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_1324__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_1324__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-02-14 16:45:46,539 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-02-14 16:45:46,539 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-02-14 16:45:46,539 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_136556.0'}), (58, {'res': '$val_1365__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_1365__arr58.1', 'index': '$const60.2', 'value': '$val_136556.0'}), (64, {'res': '$val_132464.3'}), (66, {'res': '$val_1324__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_1324__arr66.4', 'index': '$const68.5', 'value': '$val_132464.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:46,540 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_1365__arr = arg(2, name=val_1365__arr) ['val_1365__arr']
    val_1324__arr = arg(3, name=val_1324__arr) ['val_1324__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1365 = getitem(value=val_1365__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1365', 'val_1365__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_1324 = getitem(value=val_1324__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_1324', 'val_1324__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_1481 = $phi48.1            ['$phi48.1', 'parfor__index_1481']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_1365__arr[$const60.2] = val_1365     ['$const60.2', 'val_1365', 'val_1365__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_1324__arr[$const68.5] = val_1324     ['$const68.5', 'val_1324', 'val_1324__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-02-14 16:45:46,545 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:46,545 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,545 on stmt: sched.2097 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,545 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:46,545 on stmt: val_1365__arr = arg(2, name=val_1365__arr)
DEBUG 2022-02-14 16:45:46,545 on stmt: val_1324__arr = arg(3, name=val_1324__arr)
DEBUG 2022-02-14 16:45:46,545 on stmt: $const4.1.2098 = const(int, 0)
DEBUG 2022-02-14 16:45:46,545 on stmt: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $const12.4.2099 = const(int, 0)
DEBUG 2022-02-14 16:45:46,546 on stmt: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $18load_global.6.2100 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $const22.8.2101 = const(int, 0)
DEBUG 2022-02-14 16:45:46,546 on stmt: $24binary_subscr.9.2102 = getitem(value=sched.2097, index=$const22.8.2101, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $const28.11.2103 = const(int, 1)
DEBUG 2022-02-14 16:45:46,546 on stmt: $30binary_subscr.12.2104 = getitem(value=sched.2097, index=$const28.11.2103, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $32load_global.13.2105 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,546 on stmt: $34load_method.14.2106 = getattr(value=$32load_global.13.2105, attr=uint8)
DEBUG 2022-02-14 16:45:46,546 on stmt: $const36.15.2107 = const(int, 1)
DEBUG 2022-02-14 16:45:46,546 on stmt: $38call_method.16.2108 = call $34load_method.14.2106($const36.15.2107, func=$34load_method.14.2106, args=[Var($const36.15.2107, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,546 on stmt: $40binary_add.17.2109 = $30binary_subscr.12.2104 + $38call_method.16.2108
DEBUG 2022-02-14 16:45:46,546 on stmt: $42call_function.18.2110 = call $18load_global.6.2100($24binary_subscr.9.2102, $40binary_add.17.2109, func=$18load_global.6.2100, args=[Var($24binary_subscr.9.2102, <string>:4), Var($40binary_add.17.2109, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,546 on stmt: $44get_iter.19.2111 = getiter(value=$42call_function.18.2110)
DEBUG 2022-02-14 16:45:46,546 on stmt: $phi46.0.2112 = $44get_iter.19.2111
DEBUG 2022-02-14 16:45:46,546 on stmt: $arg_out_var.1487 = const(int, 1)
DEBUG 2022-02-14 16:45:46,546 on stmt: $64load_global.2.1381 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:46,546 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,546 ==== SSA block analysis pass on 46
DEBUG 2022-02-14 16:45:46,546 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,546 on stmt: $46for_iter.1.2113 = iternext(value=$phi46.0.2112)
DEBUG 2022-02-14 16:45:46,546 on stmt: $46for_iter.2.2114 = pair_first(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,546 on stmt: $46for_iter.3.2115 = pair_second(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,547 on stmt: $phi48.1.2116 = $46for_iter.2.2114
DEBUG 2022-02-14 16:45:46,547 on stmt: branch $46for_iter.3.2115, 48, 1374
DEBUG 2022-02-14 16:45:46,547 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:46,547 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,547 on stmt: parfor__index_1481 = $phi48.1.2116
DEBUG 2022-02-14 16:45:46,547 on stmt: jump 56
DEBUG 2022-02-14 16:45:46,547 ==== SSA block analysis pass on 1374
DEBUG 2022-02-14 16:45:46,547 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,547 on stmt: $const60.2.2117 = const(int, 0)
DEBUG 2022-02-14 16:45:46,547 on stmt: val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,547 on stmt: $const68.5.2118 = const(int, 0)
DEBUG 2022-02-14 16:45:46,547 on stmt: val_1324__arr[$const68.5.2118] = val_1324
DEBUG 2022-02-14 16:45:46,547 on stmt: $const72.6.2119 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,547 on stmt: $74return_value.7.2120 = cast(value=$const72.6.2119)
DEBUG 2022-02-14 16:45:46,547 on stmt: return $74return_value.7.2120
DEBUG 2022-02-14 16:45:46,547 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:45:46,547 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,547 on stmt: $arg_out_var.1486 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,547 on stmt: $expr_out_var.1485 = $arg_out_var.1486 + $arg_out_var.1487
DEBUG 2022-02-14 16:45:46,547 on stmt: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,547 on stmt: val_1324 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,547 on stmt: $72binary_subscr.6.1385 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,547 on stmt: val_1365 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,547 on stmt: jump 1373
DEBUG 2022-02-14 16:45:46,547 ==== SSA block analysis pass on 1373
DEBUG 2022-02-14 16:45:46,547 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98311f0>
DEBUG 2022-02-14 16:45:46,547 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,548 defs defaultdict(<class 'list'>,
            {'$18load_global.6.2100': [<numba.core.ir.Assign object at 0x7f71b9479610>],
             '$24binary_subscr.9.2102': [<numba.core.ir.Assign object at 0x7f71b9479a60>],
             '$30binary_subscr.12.2104': [<numba.core.ir.Assign object at 0x7f71b9479e80>],
             '$32load_global.13.2105': [<numba.core.ir.Assign object at 0x7f71b9479fd0>],
             '$34load_method.14.2106': [<numba.core.ir.Assign object at 0x7f71b9480190>],
             '$38call_method.16.2108': [<numba.core.ir.Assign object at 0x7f71b9480520>],
             '$40binary_add.17.2109': [<numba.core.ir.Assign object at 0x7f71b9480640>],
             '$42call_function.18.2110': [<numba.core.ir.Assign object at 0x7f71b94807f0>],
             '$44get_iter.19.2111': [<numba.core.ir.Assign object at 0x7f71b9480910>],
             '$46for_iter.1.2113': [<numba.core.ir.Assign object at 0x7f71b9480a60>],
             '$46for_iter.2.2114': [<numba.core.ir.Assign object at 0x7f71b9480b80>],
             '$46for_iter.3.2115': [<numba.core.ir.Assign object at 0x7f71b9480ca0>],
             '$64load_global.2.1381': [<numba.core.ir.Assign object at 0x7f71b979f220>],
             '$72binary_subscr.6.1385': [<numba.core.ir.Assign object at 0x7f71b979f130>],
             '$74return_value.7.2120': [<numba.core.ir.Assign object at 0x7f71b947ef70>],
             '$arg_out_var.1486': [<numba.core.ir.Assign object at 0x7f71ba27f220>],
             '$arg_out_var.1487': [<numba.core.ir.Assign object at 0x7f71ba27f5e0>],
             '$const12.4.2099': [<numba.core.ir.Assign object at 0x7f71b94791f0>],
             '$const22.8.2101': [<numba.core.ir.Assign object at 0x7f71b94798b0>],
             '$const28.11.2103': [<numba.core.ir.Assign object at 0x7f71b9479cd0>],
             '$const36.15.2107': [<numba.core.ir.Assign object at 0x7f71b9480310>],
             '$const4.1.2098': [<numba.core.ir.Assign object at 0x7f71b8a4be20>],
             '$const60.2.2117': [<numba.core.ir.Assign object at 0x7f71b947e730>],
             '$const68.5.2118': [<numba.core.ir.Assign object at 0x7f71b947ebb0>],
             '$const72.6.2119': [<numba.core.ir.Assign object at 0x7f71b947edf0>],
             '$expr_out_var.1485': [<numba.core.ir.Assign object at 0x7f71b9d99910>],
             '$phi46.0.2112': [<numba.core.ir.Assign object at 0x7f71b95932e0>],
             '$phi48.1.2116': [<numba.core.ir.Assign object at 0x7f71b9480970>],
             '$val.1324.1971': [<numba.core.ir.Assign object at 0x7f71b9291970>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7f71b946b850>],
             'parfor__index_1481': [<numba.core.ir.Assign object at 0x7f71b9480f70>],
             'sched.2097': [<numba.core.ir.Assign object at 0x7f71b946b970>],
             'val_1324': [<numba.core.ir.Assign object at 0x7f71b94793a0>,
                          <numba.core.ir.Assign object at 0x7f71b9291310>],
             'val_1324__arr': [<numba.core.ir.Assign object at 0x7f71b946b4f0>],
             'val_1365': [<numba.core.ir.Assign object at 0x7f71b971eaf0>,
                          <numba.core.ir.Assign object at 0x7f71b979f190>],
             'val_1365__arr': [<numba.core.ir.Assign object at 0x7f71b946b730>]})
DEBUG 2022-02-14 16:45:46,548 SSA violators {'val_1324', 'val_1365'}
DEBUG 2022-02-14 16:45:46,548 Fix SSA violator on var val_1324
DEBUG 2022-02-14 16:45:46,548 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,548 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,548 on stmt: sched.2097 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,548 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:46,548 on stmt: val_1365__arr = arg(2, name=val_1365__arr)
DEBUG 2022-02-14 16:45:46,548 on stmt: val_1324__arr = arg(3, name=val_1324__arr)
DEBUG 2022-02-14 16:45:46,548 on stmt: $const4.1.2098 = const(int, 0)
DEBUG 2022-02-14 16:45:46,548 on stmt: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,548 on stmt: $const12.4.2099 = const(int, 0)
DEBUG 2022-02-14 16:45:46,548 on stmt: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,548 first assign: val_1324
DEBUG 2022-02-14 16:45:46,548 replaced with: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,548 on stmt: $18load_global.6.2100 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,548 on stmt: $const22.8.2101 = const(int, 0)
DEBUG 2022-02-14 16:45:46,548 on stmt: $24binary_subscr.9.2102 = getitem(value=sched.2097, index=$const22.8.2101, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,548 on stmt: $const28.11.2103 = const(int, 1)
DEBUG 2022-02-14 16:45:46,549 on stmt: $30binary_subscr.12.2104 = getitem(value=sched.2097, index=$const28.11.2103, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,549 on stmt: $32load_global.13.2105 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,549 on stmt: $34load_method.14.2106 = getattr(value=$32load_global.13.2105, attr=uint8)
DEBUG 2022-02-14 16:45:46,549 on stmt: $const36.15.2107 = const(int, 1)
DEBUG 2022-02-14 16:45:46,549 on stmt: $38call_method.16.2108 = call $34load_method.14.2106($const36.15.2107, func=$34load_method.14.2106, args=[Var($const36.15.2107, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,549 on stmt: $40binary_add.17.2109 = $30binary_subscr.12.2104 + $38call_method.16.2108
DEBUG 2022-02-14 16:45:46,549 on stmt: $42call_function.18.2110 = call $18load_global.6.2100($24binary_subscr.9.2102, $40binary_add.17.2109, func=$18load_global.6.2100, args=[Var($24binary_subscr.9.2102, <string>:4), Var($40binary_add.17.2109, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,549 on stmt: $44get_iter.19.2111 = getiter(value=$42call_function.18.2110)
DEBUG 2022-02-14 16:45:46,549 on stmt: $phi46.0.2112 = $44get_iter.19.2111
DEBUG 2022-02-14 16:45:46,549 on stmt: $arg_out_var.1487 = const(int, 1)
DEBUG 2022-02-14 16:45:46,549 on stmt: $64load_global.2.1381 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:46,549 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,549 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:46,549 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,549 on stmt: $46for_iter.1.2113 = iternext(value=$phi46.0.2112)
DEBUG 2022-02-14 16:45:46,549 on stmt: $46for_iter.2.2114 = pair_first(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,549 on stmt: $46for_iter.3.2115 = pair_second(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,549 on stmt: $phi48.1.2116 = $46for_iter.2.2114
DEBUG 2022-02-14 16:45:46,549 on stmt: branch $46for_iter.3.2115, 48, 1374
DEBUG 2022-02-14 16:45:46,549 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,549 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,549 on stmt: parfor__index_1481 = $phi48.1.2116
DEBUG 2022-02-14 16:45:46,549 on stmt: jump 56
DEBUG 2022-02-14 16:45:46,549 ==== SSA block rewrite pass on 1374
DEBUG 2022-02-14 16:45:46,549 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,549 on stmt: $const60.2.2117 = const(int, 0)
DEBUG 2022-02-14 16:45:46,550 on stmt: val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,550 on stmt: $const68.5.2118 = const(int, 0)
DEBUG 2022-02-14 16:45:46,550 on stmt: val_1324__arr[$const68.5.2118] = val_1324
DEBUG 2022-02-14 16:45:46,550 on stmt: $const72.6.2119 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,550 on stmt: $74return_value.7.2120 = cast(value=$const72.6.2119)
DEBUG 2022-02-14 16:45:46,550 on stmt: return $74return_value.7.2120
DEBUG 2022-02-14 16:45:46,550 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:46,550 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,550 on stmt: $arg_out_var.1486 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,550 on stmt: $expr_out_var.1485 = $arg_out_var.1486 + $arg_out_var.1487
DEBUG 2022-02-14 16:45:46,550 on stmt: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,550 on stmt: val_1324 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,550 replaced with: val_1324.1 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,550 on stmt: $72binary_subscr.6.1385 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,550 on stmt: val_1365 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,550 on stmt: jump 1373
DEBUG 2022-02-14 16:45:46,550 ==== SSA block rewrite pass on 1373
DEBUG 2022-02-14 16:45:46,550 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,550 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,550 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9831910>],
             56: [<numba.core.ir.Assign object at 0x7f71b8e6baf0>]})
DEBUG 2022-02-14 16:45:46,550 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,550 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,551 on stmt: sched.2097 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,551 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:46,551 on stmt: val_1365__arr = arg(2, name=val_1365__arr)
DEBUG 2022-02-14 16:45:46,551 on stmt: val_1324__arr = arg(3, name=val_1324__arr)
DEBUG 2022-02-14 16:45:46,551 on stmt: $const4.1.2098 = const(int, 0)
DEBUG 2022-02-14 16:45:46,551 on stmt: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $const12.4.2099 = const(int, 0)
DEBUG 2022-02-14 16:45:46,551 on stmt: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $18load_global.6.2100 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $const22.8.2101 = const(int, 0)
DEBUG 2022-02-14 16:45:46,551 on stmt: $24binary_subscr.9.2102 = getitem(value=sched.2097, index=$const22.8.2101, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $const28.11.2103 = const(int, 1)
DEBUG 2022-02-14 16:45:46,551 on stmt: $30binary_subscr.12.2104 = getitem(value=sched.2097, index=$const28.11.2103, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $32load_global.13.2105 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,551 on stmt: $34load_method.14.2106 = getattr(value=$32load_global.13.2105, attr=uint8)
DEBUG 2022-02-14 16:45:46,551 on stmt: $const36.15.2107 = const(int, 1)
DEBUG 2022-02-14 16:45:46,551 on stmt: $38call_method.16.2108 = call $34load_method.14.2106($const36.15.2107, func=$34load_method.14.2106, args=[Var($const36.15.2107, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,551 on stmt: $40binary_add.17.2109 = $30binary_subscr.12.2104 + $38call_method.16.2108
DEBUG 2022-02-14 16:45:46,551 on stmt: $42call_function.18.2110 = call $18load_global.6.2100($24binary_subscr.9.2102, $40binary_add.17.2109, func=$18load_global.6.2100, args=[Var($24binary_subscr.9.2102, <string>:4), Var($40binary_add.17.2109, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,551 on stmt: $44get_iter.19.2111 = getiter(value=$42call_function.18.2110)
DEBUG 2022-02-14 16:45:46,551 on stmt: $phi46.0.2112 = $44get_iter.19.2111
DEBUG 2022-02-14 16:45:46,551 on stmt: $arg_out_var.1487 = const(int, 1)
DEBUG 2022-02-14 16:45:46,551 on stmt: $64load_global.2.1381 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:46,551 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,552 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:46,552 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,552 on stmt: $46for_iter.1.2113 = iternext(value=$phi46.0.2112)
DEBUG 2022-02-14 16:45:46,552 on stmt: $46for_iter.2.2114 = pair_first(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,552 on stmt: $46for_iter.3.2115 = pair_second(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,552 on stmt: $phi48.1.2116 = $46for_iter.2.2114
DEBUG 2022-02-14 16:45:46,552 on stmt: branch $46for_iter.3.2115, 48, 1374
DEBUG 2022-02-14 16:45:46,552 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,552 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,552 on stmt: parfor__index_1481 = $phi48.1.2116
DEBUG 2022-02-14 16:45:46,552 on stmt: jump 56
DEBUG 2022-02-14 16:45:46,552 ==== SSA block rewrite pass on 1374
DEBUG 2022-02-14 16:45:46,552 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,552 on stmt: $const60.2.2117 = const(int, 0)
DEBUG 2022-02-14 16:45:46,552 on stmt: val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,552 on stmt: $const68.5.2118 = const(int, 0)
DEBUG 2022-02-14 16:45:46,552 on stmt: val_1324__arr[$const68.5.2118] = val_1324
DEBUG 2022-02-14 16:45:46,552 find_def var='val_1324' stmt=val_1324__arr[$const68.5.2118] = val_1324
DEBUG 2022-02-14 16:45:46,552 find_def_from_top label 1374
DEBUG 2022-02-14 16:45:46,552 idom 46 from label 1374
DEBUG 2022-02-14 16:45:46,552 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:46,552 find_def_from_top label 46
DEBUG 2022-02-14 16:45:46,552 insert phi node val_1324.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:45:46,552 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:46,552 incoming_def val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,552 find_def_from_bottom label 1373
DEBUG 2022-02-14 16:45:46,552 find_def_from_top label 1373
DEBUG 2022-02-14 16:45:46,553 idom 56 from label 1373
DEBUG 2022-02-14 16:45:46,553 find_def_from_bottom label 56
DEBUG 2022-02-14 16:45:46,553 incoming_def val_1324.1 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,553 replaced with: val_1324__arr[$const68.5.2118] = val_1324.2
DEBUG 2022-02-14 16:45:46,553 on stmt: $const72.6.2119 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,553 on stmt: $74return_value.7.2120 = cast(value=$const72.6.2119)
DEBUG 2022-02-14 16:45:46,553 on stmt: return $74return_value.7.2120
DEBUG 2022-02-14 16:45:46,553 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:46,553 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,553 on stmt: $arg_out_var.1486 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,553 on stmt: $expr_out_var.1485 = $arg_out_var.1486 + $arg_out_var.1487
DEBUG 2022-02-14 16:45:46,553 on stmt: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,553 find_def var='val_1324' stmt=$val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,553 find_def_from_top label 56
DEBUG 2022-02-14 16:45:46,553 idom 48 from label 56
DEBUG 2022-02-14 16:45:46,553 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:46,553 find_def_from_top label 48
DEBUG 2022-02-14 16:45:46,553 idom 46 from label 48
DEBUG 2022-02-14 16:45:46,553 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:46,553 replaced with: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324.2, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,553 on stmt: val_1324.1 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,553 on stmt: $72binary_subscr.6.1385 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,553 on stmt: val_1365 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,553 on stmt: jump 1373
DEBUG 2022-02-14 16:45:46,554 ==== SSA block rewrite pass on 1373
DEBUG 2022-02-14 16:45:46,554 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,554 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,554 Fix SSA violator on var val_1365
DEBUG 2022-02-14 16:45:46,554 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,554 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,554 on stmt: sched.2097 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,554 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:46,554 on stmt: val_1365__arr = arg(2, name=val_1365__arr)
DEBUG 2022-02-14 16:45:46,554 on stmt: val_1324__arr = arg(3, name=val_1324__arr)
DEBUG 2022-02-14 16:45:46,554 on stmt: $const4.1.2098 = const(int, 0)
DEBUG 2022-02-14 16:45:46,554 on stmt: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,554 first assign: val_1365
DEBUG 2022-02-14 16:45:46,554 replaced with: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $const12.4.2099 = const(int, 0)
DEBUG 2022-02-14 16:45:46,554 on stmt: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $18load_global.6.2100 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $const22.8.2101 = const(int, 0)
DEBUG 2022-02-14 16:45:46,554 on stmt: $24binary_subscr.9.2102 = getitem(value=sched.2097, index=$const22.8.2101, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $const28.11.2103 = const(int, 1)
DEBUG 2022-02-14 16:45:46,554 on stmt: $30binary_subscr.12.2104 = getitem(value=sched.2097, index=$const28.11.2103, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $32load_global.13.2105 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,554 on stmt: $34load_method.14.2106 = getattr(value=$32load_global.13.2105, attr=uint8)
DEBUG 2022-02-14 16:45:46,554 on stmt: $const36.15.2107 = const(int, 1)
DEBUG 2022-02-14 16:45:46,554 on stmt: $38call_method.16.2108 = call $34load_method.14.2106($const36.15.2107, func=$34load_method.14.2106, args=[Var($const36.15.2107, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,554 on stmt: $40binary_add.17.2109 = $30binary_subscr.12.2104 + $38call_method.16.2108
DEBUG 2022-02-14 16:45:46,555 on stmt: $42call_function.18.2110 = call $18load_global.6.2100($24binary_subscr.9.2102, $40binary_add.17.2109, func=$18load_global.6.2100, args=[Var($24binary_subscr.9.2102, <string>:4), Var($40binary_add.17.2109, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,555 on stmt: $44get_iter.19.2111 = getiter(value=$42call_function.18.2110)
DEBUG 2022-02-14 16:45:46,555 on stmt: $phi46.0.2112 = $44get_iter.19.2111
DEBUG 2022-02-14 16:45:46,555 on stmt: $arg_out_var.1487 = const(int, 1)
DEBUG 2022-02-14 16:45:46,555 on stmt: $64load_global.2.1381 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:46,555 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,555 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:46,555 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,555 on stmt: val_1324.2 = phi(incoming_values=[Var(val_1324, <string>:3), Var(val_1324.1, parfor.py:279)], incoming_blocks=[0, 1373])
DEBUG 2022-02-14 16:45:46,555 on stmt: $46for_iter.1.2113 = iternext(value=$phi46.0.2112)
DEBUG 2022-02-14 16:45:46,555 on stmt: $46for_iter.2.2114 = pair_first(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,555 on stmt: $46for_iter.3.2115 = pair_second(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,555 on stmt: $phi48.1.2116 = $46for_iter.2.2114
DEBUG 2022-02-14 16:45:46,555 on stmt: branch $46for_iter.3.2115, 48, 1374
DEBUG 2022-02-14 16:45:46,555 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,555 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,555 on stmt: parfor__index_1481 = $phi48.1.2116
DEBUG 2022-02-14 16:45:46,555 on stmt: jump 56
DEBUG 2022-02-14 16:45:46,555 ==== SSA block rewrite pass on 1374
DEBUG 2022-02-14 16:45:46,555 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,555 on stmt: $const60.2.2117 = const(int, 0)
DEBUG 2022-02-14 16:45:46,555 on stmt: val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,555 on stmt: $const68.5.2118 = const(int, 0)
DEBUG 2022-02-14 16:45:46,555 on stmt: val_1324__arr[$const68.5.2118] = val_1324.2
DEBUG 2022-02-14 16:45:46,555 on stmt: $const72.6.2119 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,555 on stmt: $74return_value.7.2120 = cast(value=$const72.6.2119)
DEBUG 2022-02-14 16:45:46,555 on stmt: return $74return_value.7.2120
DEBUG 2022-02-14 16:45:46,555 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:46,555 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,556 on stmt: $arg_out_var.1486 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,556 on stmt: $expr_out_var.1485 = $arg_out_var.1486 + $arg_out_var.1487
DEBUG 2022-02-14 16:45:46,556 on stmt: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324.2, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1324.1 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,556 on stmt: $72binary_subscr.6.1385 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1365 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,556 replaced with: val_1365.1 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,556 on stmt: jump 1373
DEBUG 2022-02-14 16:45:46,556 ==== SSA block rewrite pass on 1373
DEBUG 2022-02-14 16:45:46,556 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b98318e0>
DEBUG 2022-02-14 16:45:46,556 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,556 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b9831550>],
             56: [<numba.core.ir.Assign object at 0x7f71b8e6b3d0>]})
DEBUG 2022-02-14 16:45:46,556 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:46,556 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,556 on stmt: sched.2097 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,556 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1365__arr = arg(2, name=val_1365__arr)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1324__arr = arg(3, name=val_1324__arr)
DEBUG 2022-02-14 16:45:46,556 on stmt: $const4.1.2098 = const(int, 0)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,556 on stmt: $const12.4.2099 = const(int, 0)
DEBUG 2022-02-14 16:45:46,556 on stmt: val_1324 = getitem(value=val_1324__arr, index=$const12.4.2099, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,556 on stmt: $18load_global.6.2100 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,556 on stmt: $const22.8.2101 = const(int, 0)
DEBUG 2022-02-14 16:45:46,556 on stmt: $24binary_subscr.9.2102 = getitem(value=sched.2097, index=$const22.8.2101, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,557 on stmt: $const28.11.2103 = const(int, 1)
DEBUG 2022-02-14 16:45:46,557 on stmt: $30binary_subscr.12.2104 = getitem(value=sched.2097, index=$const28.11.2103, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,557 on stmt: $32load_global.13.2105 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,557 on stmt: $34load_method.14.2106 = getattr(value=$32load_global.13.2105, attr=uint8)
DEBUG 2022-02-14 16:45:46,557 on stmt: $const36.15.2107 = const(int, 1)
DEBUG 2022-02-14 16:45:46,557 on stmt: $38call_method.16.2108 = call $34load_method.14.2106($const36.15.2107, func=$34load_method.14.2106, args=[Var($const36.15.2107, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,557 on stmt: $40binary_add.17.2109 = $30binary_subscr.12.2104 + $38call_method.16.2108
DEBUG 2022-02-14 16:45:46,557 on stmt: $42call_function.18.2110 = call $18load_global.6.2100($24binary_subscr.9.2102, $40binary_add.17.2109, func=$18load_global.6.2100, args=[Var($24binary_subscr.9.2102, <string>:4), Var($40binary_add.17.2109, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,557 on stmt: $44get_iter.19.2111 = getiter(value=$42call_function.18.2110)
DEBUG 2022-02-14 16:45:46,557 on stmt: $phi46.0.2112 = $44get_iter.19.2111
DEBUG 2022-02-14 16:45:46,557 on stmt: $arg_out_var.1487 = const(int, 1)
DEBUG 2022-02-14 16:45:46,557 on stmt: $64load_global.2.1381 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:45:46,557 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,557 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:45:46,557 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,557 on stmt: val_1324.2 = phi(incoming_values=[Var(val_1324, <string>:3), Var(val_1324.1, parfor.py:279)], incoming_blocks=[0, 1373])
DEBUG 2022-02-14 16:45:46,557 on stmt: $46for_iter.1.2113 = iternext(value=$phi46.0.2112)
DEBUG 2022-02-14 16:45:46,557 on stmt: $46for_iter.2.2114 = pair_first(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,557 on stmt: $46for_iter.3.2115 = pair_second(value=$46for_iter.1.2113)
DEBUG 2022-02-14 16:45:46,557 on stmt: $phi48.1.2116 = $46for_iter.2.2114
DEBUG 2022-02-14 16:45:46,557 on stmt: branch $46for_iter.3.2115, 48, 1374
DEBUG 2022-02-14 16:45:46,557 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:46,557 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,557 on stmt: parfor__index_1481 = $phi48.1.2116
DEBUG 2022-02-14 16:45:46,557 on stmt: jump 56
DEBUG 2022-02-14 16:45:46,558 ==== SSA block rewrite pass on 1374
DEBUG 2022-02-14 16:45:46,558 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,558 on stmt: $const60.2.2117 = const(int, 0)
DEBUG 2022-02-14 16:45:46,558 on stmt: val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,558 find_def var='val_1365' stmt=val_1365__arr[$const60.2.2117] = val_1365
DEBUG 2022-02-14 16:45:46,558 find_def_from_top label 1374
DEBUG 2022-02-14 16:45:46,558 idom 46 from label 1374
DEBUG 2022-02-14 16:45:46,558 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:46,558 find_def_from_top label 46
DEBUG 2022-02-14 16:45:46,558 insert phi node val_1365.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:45:46,558 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:46,558 incoming_def val_1365 = getitem(value=val_1365__arr, index=$const4.1.2098, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,558 find_def_from_bottom label 1373
DEBUG 2022-02-14 16:45:46,558 find_def_from_top label 1373
DEBUG 2022-02-14 16:45:46,558 idom 56 from label 1373
DEBUG 2022-02-14 16:45:46,558 find_def_from_bottom label 56
DEBUG 2022-02-14 16:45:46,558 incoming_def val_1365.1 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,558 replaced with: val_1365__arr[$const60.2.2117] = val_1365.2
DEBUG 2022-02-14 16:45:46,558 on stmt: $const68.5.2118 = const(int, 0)
DEBUG 2022-02-14 16:45:46,558 on stmt: val_1324__arr[$const68.5.2118] = val_1324.2
DEBUG 2022-02-14 16:45:46,558 on stmt: $const72.6.2119 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,558 on stmt: $74return_value.7.2120 = cast(value=$const72.6.2119)
DEBUG 2022-02-14 16:45:46,558 on stmt: return $74return_value.7.2120
DEBUG 2022-02-14 16:45:46,558 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:45:46,558 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,558 on stmt: $arg_out_var.1486 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,559 on stmt: $expr_out_var.1485 = $arg_out_var.1486 + $arg_out_var.1487
DEBUG 2022-02-14 16:45:46,559 on stmt: $val.1324.1971 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1324.2, rhs=$expr_out_var.1485, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:46,559 on stmt: val_1324.1 = $val.1324.1971
DEBUG 2022-02-14 16:45:46,559 on stmt: $72binary_subscr.6.1385 = getitem(value=edge__reps, index=parfor__index_1481, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,559 on stmt: val_1365.1 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,559 find_def var='val_1365' stmt=val_1365.1 = call $64load_global.2.1381(val_1365, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365, parfor.py:156), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,559 find_def_from_top label 56
DEBUG 2022-02-14 16:45:46,559 idom 48 from label 56
DEBUG 2022-02-14 16:45:46,559 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:46,559 find_def_from_top label 48
DEBUG 2022-02-14 16:45:46,559 idom 46 from label 48
DEBUG 2022-02-14 16:45:46,559 find_def_from_bottom label 46
DEBUG 2022-02-14 16:45:46,559 replaced with: val_1365.1 = call $64load_global.2.1381(val_1365.2, $72binary_subscr.6.1385, func=$64load_global.2.1381, args=[Var(val_1365.2, <string>:6), Var($72binary_subscr.6.1385, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,559 on stmt: jump 1373
DEBUG 2022-02-14 16:45:46,559 ==== SSA block rewrite pass on 1373
DEBUG 2022-02-14 16:45:46,559 Running <numba.core.ssa._FixSSAVars object at 0x7f71b9831670>
DEBUG 2022-02-14 16:45:46,559 on stmt: jump 46
DEBUG 2022-02-14 16:45:46,791 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=3, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=42, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_GLOBAL(arg=0, lineno=3)
          36	LOAD_FAST(arg=0, lineno=3)
          38	LOAD_CONST(arg=3, lineno=3)
          40	BINARY_SUBSCR(arg=None, lineno=3)
          42	LOAD_FAST(arg=0, lineno=3)
          44	LOAD_CONST(arg=4, lineno=3)
          46	BINARY_SUBSCR(arg=None, lineno=3)
          48	LOAD_GLOBAL(arg=1, lineno=3)
          50	LOAD_METHOD(arg=2, lineno=3)
          52	LOAD_CONST(arg=3, lineno=3)
          54	CALL_METHOD(arg=1, lineno=3)
          56	BINARY_ADD(arg=None, lineno=3)
          58	CALL_FUNCTION(arg=2, lineno=3)
          60	GET_ITER(arg=None, lineno=3)
>         62	FOR_ITER(arg=8, lineno=3)
          64	STORE_FAST(arg=3, lineno=3)
          66	LOAD_CONST(arg=1, lineno=4)
          68	STORE_FAST(arg=4, lineno=4)
          70	JUMP_ABSOLUTE(arg=62, lineno=4)
>         72	JUMP_ABSOLUTE(arg=30, lineno=4)
>         74	LOAD_CONST(arg=0, lineno=5)
          76	RETURN_VALUE(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:46,792 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:46,792 stack: []
DEBUG 2022-02-14 16:45:46,792 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack []
DEBUG 2022-02-14 16:45:46,792 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack []
DEBUG 2022-02-14 16:45:46,792 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,792 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-02-14 16:45:46,792 dispatch pc=20, inst=LOAD_CONST(arg=3, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-02-14 16:45:46,793 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-02-14 16:45:46,793 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-02-14 16:45:46,793 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-02-14 16:45:46,793 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$26call_function.12']
DEBUG 2022-02-14 16:45:46,793 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,793 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,793 stack: ['$phi30.0']
DEBUG 2022-02-14 16:45:46,793 dispatch pc=30, inst=FOR_ITER(arg=42, lineno=2)
DEBUG 2022-02-14 16:45:46,793 stack ['$phi30.0']
DEBUG 2022-02-14 16:45:46,793 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,793 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,793 stack: []
DEBUG 2022-02-14 16:45:46,793 dispatch pc=74, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:46,793 stack []
DEBUG 2022-02-14 16:45:46,793 dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:46,793 stack ['$const74.0']
DEBUG 2022-02-14 16:45:46,793 end state. edges=[]
DEBUG 2022-02-14 16:45:46,793 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,793 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$sched36.3']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$sched36.3', '$const38.4']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$sched42.6']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$sched42.6', '$const44.7']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$46binary_subscr.8']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$46binary_subscr.8', '$48load_global.9']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$46binary_subscr.8', '$50load_method.10']
DEBUG 2022-02-14 16:45:46,794 dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:46,794 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$46binary_subscr.8', '$50load_method.10', '$const52.11']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=56, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$46binary_subscr.8', '$54call_method.12']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=58, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi32.0', '$34load_global.2', '$40binary_subscr.5', '$56binary_add.13']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=60, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi32.0', '$58call_function.14']
DEBUG 2022-02-14 16:45:46,795 end state. edges=[Edge(pc=62, stack=('$phi32.0', '$60get_iter.15'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,795 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,795 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=62, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:45:46,795 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$phi62.1', '$62for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,795 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=64 nstack_initial=3)])
DEBUG 2022-02-14 16:45:46,795 stack: ['$phi72.0']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=72, inst=JUMP_ABSOLUTE(arg=30, lineno=4)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi72.0']
DEBUG 2022-02-14 16:45:46,795 end state. edges=[Edge(pc=30, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,795 pending: deque([State(pc_initial=64 nstack_initial=3), State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:46,795 stack: ['$phi64.0', '$phi64.1', '$phi64.2']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=64, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi64.0', '$phi64.1', '$phi64.2']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=66, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:46,795 stack ['$phi64.0', '$phi64.1']
DEBUG 2022-02-14 16:45:46,795 dispatch pc=68, inst=STORE_FAST(arg=4, lineno=4)
DEBUG 2022-02-14 16:45:46,796 stack ['$phi64.0', '$phi64.1', '$const66.3']
DEBUG 2022-02-14 16:45:46,796 dispatch pc=70, inst=JUMP_ABSOLUTE(arg=62, lineno=4)
DEBUG 2022-02-14 16:45:46,796 stack ['$phi64.0', '$phi64.1']
DEBUG 2022-02-14 16:45:46,796 end state. edges=[Edge(pc=62, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:46,796 pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,796 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:45:46,796 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:46,796 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=64 nstack_initial=3): {'$phi64.2'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:46,796 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1),
 '$phi62.1': State(pc_initial=32 nstack_initial=2),
 '$phi64.2': State(pc_initial=62 nstack_initial=2)}
DEBUG 2022-02-14 16:45:46,796 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))},
             '$phi62.0': {('$phi32.0', State(pc_initial=32 nstack_initial=2)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=3))},
             '$phi62.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2)),
                          ('$phi64.1', State(pc_initial=64 nstack_initial=3))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi64.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))}})
DEBUG 2022-02-14 16:45:46,797 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))},
             '$phi62.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi72.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:46,797 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))},
             '$phi62.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2))},
             '$phi64.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi72.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:46,798 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))},
             '$phi62.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2))},
             '$phi64.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.15',
                           State(pc_initial=32 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi72.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:45:46,798 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))},
 '$phi62.1': {('$60get_iter.15', State(pc_initial=32 nstack_initial=2))},
 '$phi64.2': {('$62for_iter.3', State(pc_initial=62 nstack_initial=2))}}
DEBUG 2022-02-14 16:45:46,798 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'},
             State(pc_initial=32 nstack_initial=2): {'$phi62.1': '$60get_iter.15'},
             State(pc_initial=62 nstack_initial=2): {'$phi64.2': '$62for_iter.3'}})
DEBUG 2022-02-14 16:45:46,798 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:46,798 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$34load_global.2'}), (36, {'res': '$sched36.3'}), (38, {'res': '$const38.4'}), (40, {'index': '$const38.4', 'target': '$sched36.3', 'res': '$40binary_subscr.5'}), (42, {'res': '$sched42.6'}), (44, {'res': '$const44.7'}), (46, {'index': '$const44.7', 'target': '$sched42.6', 'res': '$46binary_subscr.8'}), (48, {'res': '$48load_global.9'}), (50, {'item': '$48load_global.9', 'res': '$50load_method.10'}), (52, {'res': '$const52.11'}), (54, {'func': '$50load_method.10', 'args': ['$const52.11'], 'res': '$54call_method.12'}), (56, {'lhs': '$46binary_subscr.8', 'rhs': '$54call_method.12', 'res': '$56binary_add.13'}), (58, {'func': '$34load_global.2', 'args': ['$40binary_subscr.5', '$56binary_add.13'], 'res': '$58call_function.14'}), (60, {'value': '$58call_function.14', 'res': '$60get_iter.15'})), outgoing_phis={'$phi62.1': '$60get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi32.0', '$60get_iter.15')})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.1', 'pair': '$62for_iter.2', 'indval': '$62for_iter.3', 'pred': '$62for_iter.4'}),), outgoing_phis={'$phi64.2': '$62for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 64: ('$phi62.0', '$phi62.1', '$62for_iter.3')})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=64 nstack_initial=3):
AdaptBlockInfo(insts=((64, {'value': '$phi64.2'}), (66, {'res': '$const66.3'}), (68, {'value': '$const66.3'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi64.0', '$phi64.1')})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi72.0',)})
DEBUG 2022-02-14 16:45:46,799 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'retval': '$const74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:46,800 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 2)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 74             ['$30for_iter.3']
label 32:
    parfor__index_1488 = $phi32.1            ['$phi32.1', 'parfor__index_1488']
    $34load_global.2 = global(range: <class 'range'>) ['$34load_global.2']
    $const38.4 = const(int, 1)               ['$const38.4']
    $40binary_subscr.5 = getitem(value=sched, index=$const38.4, fn=<built-in function getitem>) ['$40binary_subscr.5', '$const38.4', 'sched']
    $const44.7 = const(int, 3)               ['$const44.7']
    $46binary_subscr.8 = getitem(value=sched, index=$const44.7, fn=<built-in function getitem>) ['$46binary_subscr.8', '$const44.7', 'sched']
    $48load_global.9 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$48load_global.9']
    $50load_method.10 = getattr(value=$48load_global.9, attr=uint8) ['$48load_global.9', '$50load_method.10']
    $const52.11 = const(int, 1)              ['$const52.11']
    $54call_method.12 = call $50load_method.10($const52.11, func=$50load_method.10, args=[Var($const52.11, <string>:3)], kws=(), vararg=None, target=None) ['$50load_method.10', '$54call_method.12', '$const52.11']
    $56binary_add.13 = $46binary_subscr.8 + $54call_method.12 ['$46binary_subscr.8', '$54call_method.12', '$56binary_add.13']
    $58call_function.14 = call $34load_global.2($40binary_subscr.5, $56binary_add.13, func=$34load_global.2, args=[Var($40binary_subscr.5, <string>:3), Var($56binary_add.13, <string>:3)], kws=(), vararg=None, target=None) ['$34load_global.2', '$40binary_subscr.5', '$56binary_add.13', '$58call_function.14']
    $60get_iter.15 = getiter(value=$58call_function.14) ['$58call_function.14', '$60get_iter.15']
    $phi62.1 = $60get_iter.15                ['$60get_iter.15', '$phi62.1']
    jump 62                                  []
label 62:
    $62for_iter.2 = iternext(value=$phi62.1) ['$62for_iter.2', '$phi62.1']
    $62for_iter.3 = pair_first(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.3']
    $62for_iter.4 = pair_second(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.4']
    $phi64.2 = $62for_iter.3                 ['$62for_iter.3', '$phi64.2']
    branch $62for_iter.4, 64, 72             ['$62for_iter.4']
label 64:
    parfor__index_1489 = $phi64.2            ['$phi64.2', 'parfor__index_1489']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 62                                  []
label 72:
    jump 30                                  []
label 74:
    $const74.0 = const(NoneType, None)       ['$const74.0']
    $76return_value.1 = cast(value=$const74.0) ['$76return_value.1', '$const74.0']
    return $76return_value.1                 ['$76return_value.1']

DEBUG 2022-02-14 16:45:46,806 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:46,806 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,806 on stmt: sched.2167 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:46,806 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-02-14 16:45:46,806 on stmt: $2load_global.0.2168 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,806 on stmt: $const6.2.2169 = const(int, 0)
DEBUG 2022-02-14 16:45:46,806 on stmt: $8binary_subscr.3.2170 = getitem(value=sched.2167, index=$const6.2.2169, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,806 on stmt: $const12.5.2171 = const(int, 2)
DEBUG 2022-02-14 16:45:46,806 on stmt: $14binary_subscr.6.2172 = getitem(value=sched.2167, index=$const12.5.2171, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,806 on stmt: $16load_global.7.2173 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,807 on stmt: $18load_method.8.2174 = getattr(value=$16load_global.7.2173, attr=uint8)
DEBUG 2022-02-14 16:45:46,807 on stmt: $const20.9.2175 = const(int, 1)
DEBUG 2022-02-14 16:45:46,807 on stmt: $22call_method.10.2176 = call $18load_method.8.2174($const20.9.2175, func=$18load_method.8.2174, args=[Var($const20.9.2175, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,807 on stmt: $24binary_add.11.2177 = $14binary_subscr.6.2172 + $22call_method.10.2176
DEBUG 2022-02-14 16:45:46,807 on stmt: $26call_function.12.2178 = call $2load_global.0.2168($8binary_subscr.3.2170, $24binary_add.11.2177, func=$2load_global.0.2168, args=[Var($8binary_subscr.3.2170, <string>:2), Var($24binary_add.11.2177, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,807 on stmt: $28get_iter.13.2179 = getiter(value=$26call_function.12.2178)
DEBUG 2022-02-14 16:45:46,807 on stmt: $phi30.0.2180 = $28get_iter.13.2179
DEBUG 2022-02-14 16:45:46,807 on stmt: $expr_out_var.1494 = const(complex128, 0j)
DEBUG 2022-02-14 16:45:46,807 on stmt: jump 30
DEBUG 2022-02-14 16:45:46,807 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:45:46,807 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,807 on stmt: $30for_iter.1.2181 = iternext(value=$phi30.0.2180)
DEBUG 2022-02-14 16:45:46,807 on stmt: $30for_iter.2.2182 = pair_first(value=$30for_iter.1.2181)
DEBUG 2022-02-14 16:45:46,807 on stmt: $30for_iter.3.2183 = pair_second(value=$30for_iter.1.2181)
DEBUG 2022-02-14 16:45:46,807 on stmt: $phi32.1.2184 = $30for_iter.2.2182
DEBUG 2022-02-14 16:45:46,807 on stmt: branch $30for_iter.3.2183, 32, 1393
DEBUG 2022-02-14 16:45:46,807 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:45:46,807 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,807 on stmt: parfor__index_1488 = $phi32.1.2184
DEBUG 2022-02-14 16:45:46,807 on stmt: $34load_global.2.2185 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:46,807 on stmt: $const38.4.2186 = const(int, 1)
DEBUG 2022-02-14 16:45:46,807 on stmt: $40binary_subscr.5.2187 = getitem(value=sched.2167, index=$const38.4.2186, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,808 on stmt: $const44.7.2188 = const(int, 3)
DEBUG 2022-02-14 16:45:46,808 on stmt: $46binary_subscr.8.2189 = getitem(value=sched.2167, index=$const44.7.2188, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:46,808 on stmt: $48load_global.9.2190 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:46,808 on stmt: $50load_method.10.2191 = getattr(value=$48load_global.9.2190, attr=uint8)
DEBUG 2022-02-14 16:45:46,808 on stmt: $const52.11.2192 = const(int, 1)
DEBUG 2022-02-14 16:45:46,808 on stmt: $54call_method.12.2193 = call $50load_method.10.2191($const52.11.2192, func=$50load_method.10.2191, args=[Var($const52.11.2192, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,808 on stmt: $56binary_add.13.2194 = $46binary_subscr.8.2189 + $54call_method.12.2193
DEBUG 2022-02-14 16:45:46,808 on stmt: $58call_function.14.2195 = call $34load_global.2.2185($40binary_subscr.5.2187, $56binary_add.13.2194, func=$34load_global.2.2185, args=[Var($40binary_subscr.5.2187, <string>:3), Var($56binary_add.13.2194, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:46,808 on stmt: $60get_iter.15.2196 = getiter(value=$58call_function.14.2195)
DEBUG 2022-02-14 16:45:46,808 on stmt: $phi62.1.2197 = $60get_iter.15.2196
DEBUG 2022-02-14 16:45:46,808 on stmt: jump 62
DEBUG 2022-02-14 16:45:46,808 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:45:46,808 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,808 on stmt: $62for_iter.2.2198 = iternext(value=$phi62.1.2197)
DEBUG 2022-02-14 16:45:46,808 on stmt: $62for_iter.3.2199 = pair_first(value=$62for_iter.2.2198)
DEBUG 2022-02-14 16:45:46,808 on stmt: $62for_iter.4.2200 = pair_second(value=$62for_iter.2.2198)
DEBUG 2022-02-14 16:45:46,808 on stmt: $phi64.2.2201 = $62for_iter.3.2199
DEBUG 2022-02-14 16:45:46,808 on stmt: branch $62for_iter.4.2200, 64, 1392
DEBUG 2022-02-14 16:45:46,808 ==== SSA block analysis pass on 64
DEBUG 2022-02-14 16:45:46,808 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,808 on stmt: parfor__index_1489 = $phi64.2.2201
DEBUG 2022-02-14 16:45:46,808 on stmt: jump 72
DEBUG 2022-02-14 16:45:46,808 ==== SSA block analysis pass on 1392
DEBUG 2022-02-14 16:45:46,808 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,808 on stmt: jump 30
DEBUG 2022-02-14 16:45:46,809 ==== SSA block analysis pass on 1393
DEBUG 2022-02-14 16:45:46,809 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,809 on stmt: $const74.0.2202 = const(NoneType, None)
DEBUG 2022-02-14 16:45:46,809 on stmt: $76return_value.1.2203 = cast(value=$const74.0.2202)
DEBUG 2022-02-14 16:45:46,809 on stmt: return $76return_value.1.2203
DEBUG 2022-02-14 16:45:46,809 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:45:46,809 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,809 on stmt: $parfor_index_tuple_var.1495 = build_tuple(items=[Var(parfor__index_1488, loop_hafnian_batch_gamma.py:38), Var(parfor__index_1489, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:45:46,809 on stmt: H__batch[$parfor_index_tuple_var.1495] = $expr_out_var.1494
DEBUG 2022-02-14 16:45:46,809 on stmt: jump 74
DEBUG 2022-02-14 16:45:46,809 ==== SSA block analysis pass on 74
DEBUG 2022-02-14 16:45:46,809 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9622f40>
DEBUG 2022-02-14 16:45:46,809 on stmt: jump 62
DEBUG 2022-02-14 16:45:46,809 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.2172': [<numba.core.ir.Assign object at 0x7f71b8e72d30>],
             '$16load_global.7.2173': [<numba.core.ir.Assign object at 0x7f71b9651070>],
             '$18load_method.8.2174': [<numba.core.ir.Assign object at 0x7f71b96511f0>],
             '$22call_method.10.2176': [<numba.core.ir.Assign object at 0x7f71b9651580>],
             '$24binary_add.11.2177': [<numba.core.ir.Assign object at 0x7f71b96516a0>],
             '$26call_function.12.2178': [<numba.core.ir.Assign object at 0x7f71b9651850>],
             '$28get_iter.13.2179': [<numba.core.ir.Assign object at 0x7f71b9651970>],
             '$2load_global.0.2168': [<numba.core.ir.Assign object at 0x7f71b962c760>],
             '$30for_iter.1.2181': [<numba.core.ir.Assign object at 0x7f71b9651c40>],
             '$30for_iter.2.2182': [<numba.core.ir.Assign object at 0x7f71b9651d60>],
             '$30for_iter.3.2183': [<numba.core.ir.Assign object at 0x7f71b9651e80>],
             '$34load_global.2.2185': [<numba.core.ir.Assign object at 0x7f71b9637c70>],
             '$40binary_subscr.5.2187': [<numba.core.ir.Assign object at 0x7f71b9637af0>],
             '$46binary_subscr.8.2189': [<numba.core.ir.Assign object at 0x7f71b9637040>],
             '$48load_global.9.2190': [<numba.core.ir.Assign object at 0x7f71b96378e0>],
             '$50load_method.10.2191': [<numba.core.ir.Assign object at 0x7f71b96374c0>],
             '$54call_method.12.2193': [<numba.core.ir.Assign object at 0x7f71b9626220>],
             '$56binary_add.13.2194': [<numba.core.ir.Assign object at 0x7f71b9626340>],
             '$58call_function.14.2195': [<numba.core.ir.Assign object at 0x7f71b96264f0>],
             '$60get_iter.15.2196': [<numba.core.ir.Assign object at 0x7f71b9626610>],
             '$62for_iter.2.2198': [<numba.core.ir.Assign object at 0x7f71b96268e0>],
             '$62for_iter.3.2199': [<numba.core.ir.Assign object at 0x7f71b9626a00>],
             '$62for_iter.4.2200': [<numba.core.ir.Assign object at 0x7f71b9626b20>],
             '$76return_value.1.2203': [<numba.core.ir.Assign object at 0x7f71b964f5e0>],
             '$8binary_subscr.3.2170': [<numba.core.ir.Assign object at 0x7f71b962c280>],
             '$const12.5.2171': [<numba.core.ir.Assign object at 0x7f71b952dbe0>],
             '$const20.9.2175': [<numba.core.ir.Assign object at 0x7f71b9651370>],
             '$const38.4.2186': [<numba.core.ir.Assign object at 0x7f71b9637400>],
             '$const44.7.2188': [<numba.core.ir.Assign object at 0x7f71b9637190>],
             '$const52.11.2192': [<numba.core.ir.Assign object at 0x7f71b9637610>],
             '$const6.2.2169': [<numba.core.ir.Assign object at 0x7f71b962c430>],
             '$const74.0.2202': [<numba.core.ir.Assign object at 0x7f71b964f430>],
             '$expr_out_var.1494': [<numba.core.ir.Assign object at 0x7f71b9d99250>],
             '$parfor_index_tuple_var.1495': [<numba.core.ir.Assign object at 0x7f71b9d99580>],
             '$phi30.0.2180': [<numba.core.ir.Assign object at 0x7f71b962c520>],
             '$phi32.1.2184': [<numba.core.ir.Assign object at 0x7f71b9651b80>],
             '$phi62.1.2197': [<numba.core.ir.Assign object at 0x7f71b9637460>],
             '$phi64.2.2201': [<numba.core.ir.Assign object at 0x7f71b9626820>],
             'H__batch': [<numba.core.ir.Assign object at 0x7f71b962c8e0>],
             'parfor__index_1488': [<numba.core.ir.Assign object at 0x7f71b9637a60>],
             'parfor__index_1489': [<numba.core.ir.Assign object at 0x7f71b9626df0>],
             'sched.2167': [<numba.core.ir.Assign object at 0x7f71b962ca00>]})
DEBUG 2022-02-14 16:45:46,809 SSA violators set()
DEBUG 2022-02-14 16:45:47,011 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,011 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,011 stack: []
DEBUG 2022-02-14 16:45:47,011 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack []
DEBUG 2022-02-14 16:45:47,011 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack []
DEBUG 2022-02-14 16:45:47,011 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,011 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:47,011 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:45:47,011 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,011 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:47,011 end state. edges=[]
DEBUG 2022-02-14 16:45:47,011 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,011 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,011 defmap: {}
DEBUG 2022-02-14 16:45:47,011 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,012 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,012 keep phismap: {}
DEBUG 2022-02-14 16:45:47,012 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,012 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,012 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,012 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:47,013 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,013 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cf3be0>
DEBUG 2022-02-14 16:45:47,013 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:47,013 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:45:47,013 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:47,013 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,013 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:47,014 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:47,014 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b8cfcd30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b8cfc7f0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b8cfcc10>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b8cfc0d0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b8cfc1f0>]})
DEBUG 2022-02-14 16:45:47,014 SSA violators set()
DEBUG 2022-02-14 16:45:47,051 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,051 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,051 stack: []
DEBUG 2022-02-14 16:45:47,051 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack []
DEBUG 2022-02-14 16:45:47,051 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack []
DEBUG 2022-02-14 16:45:47,051 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,051 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:47,051 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:47,051 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$dtype8.3']
DEBUG 2022-02-14 16:45:47,051 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,051 stack ['$10call_function.4']
DEBUG 2022-02-14 16:45:47,051 end state. edges=[]
DEBUG 2022-02-14 16:45:47,051 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,051 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,051 defmap: {}
DEBUG 2022-02-14 16:45:47,052 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,052 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,052 keep phismap: {}
DEBUG 2022-02-14 16:45:47,052 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,052 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,052 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$dtype8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,052 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'dtype', 'tmp0', 'tmp1']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:45:47,053 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,053 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b9a45ca0>
DEBUG 2022-02-14 16:45:47,053 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:47,053 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:47,053 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:45:47,053 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:47,053 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,054 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:45:47,054 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:45:47,054 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f71b9a39760>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f71b9a39940>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9a390d0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9a397f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9a399d0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71b9a39a90>]})
DEBUG 2022-02-14 16:45:47,054 SSA violators set()
DEBUG 2022-02-14 16:45:47,059 bytecode dump:
>          0	NOP(arg=None, lineno=3693)
           2	LOAD_GLOBAL(arg=0, lineno=3693)
           4	LOAD_METHOD(arg=1, lineno=3693)
           6	LOAD_FAST(arg=0, lineno=3693)
           8	LOAD_FAST(arg=2, lineno=3693)
          10	CALL_METHOD(arg=2, lineno=3693)
          12	STORE_FAST(arg=3, lineno=3693)
          14	LOAD_GLOBAL(arg=0, lineno=3694)
          16	LOAD_METHOD(arg=2, lineno=3694)
          18	LOAD_FAST(arg=3, lineno=3694)
          20	LOAD_ATTR(arg=3, lineno=3694)
          22	CALL_METHOD(arg=1, lineno=3694)
          24	GET_ITER(arg=None, lineno=3694)
>         26	FOR_ITER(arg=12, lineno=3694)
          28	STORE_FAST(arg=4, lineno=3694)
          30	LOAD_FAST(arg=1, lineno=3695)
          32	LOAD_FAST(arg=3, lineno=3695)
          34	LOAD_FAST(arg=4, lineno=3695)
          36	STORE_SUBSCR(arg=None, lineno=3695)
          38	JUMP_ABSOLUTE(arg=26, lineno=3695)
>         40	LOAD_FAST(arg=3, lineno=3696)
          42	RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:45:47,059 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,059 stack: []
DEBUG 2022-02-14 16:45:47,059 dispatch pc=0, inst=NOP(arg=None, lineno=3693)
DEBUG 2022-02-14 16:45:47,059 stack []
DEBUG 2022-02-14 16:45:47,059 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3693)
DEBUG 2022-02-14 16:45:47,059 stack []
DEBUG 2022-02-14 16:45:47,059 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3693)
DEBUG 2022-02-14 16:45:47,059 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,059 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3693)
DEBUG 2022-02-14 16:45:47,059 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3693)
DEBUG 2022-02-14 16:45:47,060 stack ['$4load_method.1', '$shape6.2']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3693)
DEBUG 2022-02-14 16:45:47,060 stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3693)
DEBUG 2022-02-14 16:45:47,060 stack ['$10call_method.4']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack []
DEBUG 2022-02-14 16:45:47,060 dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$14load_global.5']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$16load_method.6']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$16load_method.6', '$arr18.7']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$16load_method.6', '$20load_attr.8']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=24, inst=GET_ITER(arg=None, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$22call_method.9']
DEBUG 2022-02-14 16:45:47,060 end state. edges=[Edge(pc=26, stack=('$24get_iter.10',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,060 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:45:47,060 stack: ['$phi26.0']
DEBUG 2022-02-14 16:45:47,060 dispatch pc=26, inst=FOR_ITER(arg=12, lineno=3694)
DEBUG 2022-02-14 16:45:47,060 stack ['$phi26.0']
DEBUG 2022-02-14 16:45:47,060 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,060 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:45:47,061 stack: []
DEBUG 2022-02-14 16:45:47,061 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3696)
DEBUG 2022-02-14 16:45:47,061 stack []
DEBUG 2022-02-14 16:45:47,061 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:45:47,061 stack ['$arr40.0']
DEBUG 2022-02-14 16:45:47,061 end state. edges=[]
DEBUG 2022-02-14 16:45:47,061 pending: deque([State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:45:47,061 stack: ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=28, inst=STORE_FAST(arg=4, lineno=3694)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=3695)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=3695)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0', '$value30.2']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=3695)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0', '$value30.2', '$arr32.3']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=3695)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0', '$value30.2', '$arr32.3', '$idx34.4']
DEBUG 2022-02-14 16:45:47,061 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=26, lineno=3695)
DEBUG 2022-02-14 16:45:47,061 stack ['$phi28.0']
DEBUG 2022-02-14 16:45:47,061 end state. edges=[Edge(pc=26, stack=('$phi28.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,061 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:45:47,061 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,061 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,062 defmap: {'$phi26.0': State(pc_initial=0 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1)}
DEBUG 2022-02-14 16:45:47,062 phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=2))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,062 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,062 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,062 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,062 keep phismap: {'$phi26.0': {('$24get_iter.10', State(pc_initial=0 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:47,062 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi26.0': '$24get_iter.10'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'}})
DEBUG 2022-02-14 16:45:47,063 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,063 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$arr18.7'}), (20, {'item': '$arr18.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9', 'res': '$24get_iter.10'})), outgoing_phis={'$phi26.0': '$24get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.10',)})
DEBUG 2022-02-14 16:45:47,064 block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG 2022-02-14 16:45:47,064 block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$value30.2'}), (32, {'res': '$arr32.3'}), (34, {'res': '$idx34.4'}), (36, {'target': '$arr32.3', 'index': '$idx34.4', 'value': '$value30.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$phi28.0',)})
DEBUG 2022-02-14 16:45:47,064 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$arr40.0'}), (42, {'retval': '$arr40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,065 label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex) ['$14load_global.5', '$16load_method.6']
    $20load_attr.8 = getattr(value=arr, attr=shape) ['$20load_attr.8', 'arr']
    $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None) ['$16load_method.6', '$20load_attr.8', '$22call_method.9']
    $24get_iter.10 = getiter(value=$22call_method.9) ['$22call_method.9', '$24get_iter.10']
    $phi26.0 = $24get_iter.10                ['$24get_iter.10', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 40             ['$26for_iter.3']
label 28:
    idx = $phi28.1                           ['$phi28.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 26                                  []
label 40:
    $42return_value.1 = cast(value=arr)      ['$42return_value.1', 'arr']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:45:47,068 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,068 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8d1dcd0>
DEBUG 2022-02-14 16:45:47,068 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:45:47,068 on stmt: value = arg(1, name=value)
DEBUG 2022-02-14 16:45:47,068 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:45:47,068 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,068 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2022-02-14 16:45:47,193 on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,193 on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,193 on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex)
DEBUG 2022-02-14 16:45:47,193 on stmt: $20load_attr.8 = getattr(value=arr, attr=shape)
DEBUG 2022-02-14 16:45:47,193 on stmt: $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,193 on stmt: $24get_iter.10 = getiter(value=$22call_method.9)
DEBUG 2022-02-14 16:45:47,193 on stmt: $phi26.0 = $24get_iter.10
DEBUG 2022-02-14 16:45:47,193 on stmt: jump 26
DEBUG 2022-02-14 16:45:47,193 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:47,193 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8d1dcd0>
DEBUG 2022-02-14 16:45:47,193 on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG 2022-02-14 16:45:47,194 on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG 2022-02-14 16:45:47,194 on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG 2022-02-14 16:45:47,194 on stmt: $phi28.1 = $26for_iter.2
DEBUG 2022-02-14 16:45:47,194 on stmt: branch $26for_iter.3, 28, 40
DEBUG 2022-02-14 16:45:47,194 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:45:47,194 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8d1dcd0>
DEBUG 2022-02-14 16:45:47,194 on stmt: idx = $phi28.1
DEBUG 2022-02-14 16:45:47,194 on stmt: arr[idx] = value
DEBUG 2022-02-14 16:45:47,194 on stmt: jump 26
DEBUG 2022-02-14 16:45:47,194 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:47,194 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8d1dcd0>
DEBUG 2022-02-14 16:45:47,194 on stmt: $42return_value.1 = cast(value=arr)
DEBUG 2022-02-14 16:45:47,194 on stmt: return $42return_value.1
DEBUG 2022-02-14 16:45:47,195 defs defaultdict(<class 'list'>,
            {'$14load_global.5': [<numba.core.ir.Assign object at 0x7f71b8d0c460>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x7f71b8d0c2e0>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0x7f71b8d0c5e0>],
             '$22call_method.9': [<numba.core.ir.Assign object at 0x7f71b8ced220>],
             '$24get_iter.10': [<numba.core.ir.Assign object at 0x7f71b8ceda00>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x7f71b8cedfa0>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x7f71b8cede20>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x7f71b8ced7f0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b8d0c790>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x7f71ba0b2be0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f71b8d0cc70>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x7f71b8d0cb20>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x7f71b8ced820>],
             'arr': [<numba.core.ir.Assign object at 0x7f71b8d0c400>],
             'dtype': [<numba.core.ir.Assign object at 0x7f71b9a388b0>],
             'idx': [<numba.core.ir.Assign object at 0x7f71b8ced6a0>],
             'shape': [<numba.core.ir.Assign object at 0x7f71b9a38520>],
             'value': [<numba.core.ir.Assign object at 0x7f71b9a38940>]})
DEBUG 2022-02-14 16:45:47,195 SSA violators set()
DEBUG 2022-02-14 16:45:47,198 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,199 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,199 stack: []
DEBUG 2022-02-14 16:45:47,199 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,199 stack []
DEBUG 2022-02-14 16:45:47,199 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,199 stack []
DEBUG 2022-02-14 16:45:47,199 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,199 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,199 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,199 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:47,199 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,199 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:47,199 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,200 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:47,200 end state. edges=[]
DEBUG 2022-02-14 16:45:47,200 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,200 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,200 defmap: {}
DEBUG 2022-02-14 16:45:47,200 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,200 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,200 keep phismap: {}
DEBUG 2022-02-14 16:45:47,200 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,200 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,200 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,201 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:47,203 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,203 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71ba2e1340>
DEBUG 2022-02-14 16:45:47,203 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:47,203 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:47,203 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:47,203 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,203 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:47,203 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:47,204 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71ba41b970>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71ba3ffc70>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71ba766f40>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71ba09b850>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71ba410730>]})
DEBUG 2022-02-14 16:45:47,204 SSA violators set()
DEBUG 2022-02-14 16:45:47,367 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=20, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=21, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=22, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=23, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=21, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=20, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:47,367 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,367 stack: []
DEBUG 2022-02-14 16:45:47,367 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:47,367 stack []
DEBUG 2022-02-14 16:45:47,367 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:47,367 stack []
DEBUG 2022-02-14 16:45:47,367 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:47,367 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=6, inst=LOAD_FAST(arg=20, lineno=2)
DEBUG 2022-02-14 16:45:47,368 stack ['$4load_method.1']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:47,368 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=10, inst=STORE_FAST(arg=21, lineno=2)
DEBUG 2022-02-14 16:45:47,368 stack ['$8call_method.3']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack []
DEBUG 2022-02-14 16:45:47,368 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-02-14 16:45:47,368 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,368 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,369 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,369 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,369 stack ['$36call_function.16']
DEBUG 2022-02-14 16:45:47,369 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,369 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:45:47,369 stack: ['$phi40.0']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:45:47,369 stack ['$phi40.0']
DEBUG 2022-02-14 16:45:47,369 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,369 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:45:47,369 stack: []
DEBUG 2022-02-14 16:45:47,369 dispatch pc=50, inst=LOAD_FAST(arg=21, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack []
DEBUG 2022-02-14 16:45:47,369 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack ['$H__batch_250.0']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-02-14 16:45:47,369 dispatch pc=60, inst=LOAD_FAST(arg=20, lineno=5)
DEBUG 2022-02-14 16:45:47,369 stack ['$58binary_subscr.5']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:47,370 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:45:47,370 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:45:47,370 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:45:47,370 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:45:47,370 stack []
DEBUG 2022-02-14 16:45:47,370 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:45:47,370 stack ['$const70.11']
DEBUG 2022-02-14 16:45:47,370 end state. edges=[]
DEBUG 2022-02-14 16:45:47,370 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:45:47,370 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=42, inst=STORE_FAST(arg=22, lineno=3)
DEBUG 2022-02-14 16:45:47,370 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:45:47,370 stack ['$phi42.0']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=46, inst=STORE_FAST(arg=23, lineno=4)
DEBUG 2022-02-14 16:45:47,370 stack ['$phi42.0', '$const44.2']
DEBUG 2022-02-14 16:45:47,370 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-02-14 16:45:47,370 stack ['$phi42.0']
DEBUG 2022-02-14 16:45:47,371 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,371 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:45:47,371 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,371 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,371 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-02-14 16:45:47,371 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,371 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,371 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,371 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:47,372 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:47,372 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-02-14 16:45:47,372 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,372 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-02-14 16:45:47,372 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-02-14 16:45:47,372 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-02-14 16:45:47,372 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,373 label 0:
    sched = arg(0, name=sched)               ['sched']
    _156binary__add_69 = arg(1, name=_156binary__add_69) ['_156binary__add_69']
    _const10_5 = arg(2, name=_const10_5)     ['_const10_5']
    A = arg(3, name=A)                       ['A']
    D = arg(4, name=D)                       ['D']
    D__size0_1403 = arg(5, name=D__size0_1403) ['D__size0_1403']
    D__size1_1404 = arg(6, name=D__size1_1404) ['D__size1_1404']
    D__size1_1646 = arg(7, name=D__size1_1646) ['D__size1_1646']
    N__fixed = arg(8, name=N__fixed)         ['N__fixed']
    N__max = arg(9, name=N__max)             ['N__max']
    batch__max = arg(10, name=batch__max)    ['batch__max']
    binoms = arg(11, name=binoms)            ['binoms']
    edge__reps = arg(12, name=edge__reps)    ['edge__reps']
    edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418) ['edge__reps__size0_1418']
    glynn = arg(14, name=glynn)              ['glynn']
    n = arg(15, name=n)                      ['n']
    n__D = arg(16, name=n__D)                ['n__D']
    oddV = arg(17, name=oddV)                ['oddV']
    odd__cutoff = arg(18, name=odd__cutoff)  ['odd__cutoff']
    oddloop = arg(19, name=oddloop)          ['oddloop']
    H__batch_2__arr = arg(20, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_1521 = $phi42.1            ['$phi42.1', 'parfor__index_1521']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-02-14 16:45:47,400 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,400 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,400 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,400 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,400 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,400 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,400 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,400 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,400 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,400 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,400 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,400 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,400 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,400 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,400 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,401 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,401 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,401 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,401 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,401 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,401 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,401 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,401 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,401 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,401 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,401 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,401 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,401 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,401 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,401 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,401 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,401 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,401 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,401 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,401 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,401 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,401 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,401 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,402 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,402 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,402 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,402 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,402 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,402 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,402 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,402 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,402 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,402 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,402 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,402 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,402 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,402 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,402 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,402 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,402 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,402 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,402 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,402 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,402 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,402 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,402 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,402 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,402 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,403 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,403 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,403 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,403 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,403 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,403 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,403 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,403 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,403 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,403 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,403 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,403 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,403 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,403 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,403 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,404 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,404 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,404 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,404 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,404 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,404 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:47,404 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,404 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,404 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,404 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,404 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,404 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,404 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:45:47,404 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,404 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,404 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,404 ==== SSA block analysis pass on 1371
DEBUG 2022-02-14 16:45:47,404 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,404 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,404 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,404 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,404 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,404 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,404 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,404 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,405 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,405 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,405 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,405 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,405 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,405 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,405 ==== SSA block analysis pass on 1167
DEBUG 2022-02-14 16:45:47,405 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,405 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,405 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,405 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,405 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,405 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,405 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,405 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,405 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,405 ==== SSA block analysis pass on 1206
DEBUG 2022-02-14 16:45:47,405 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,405 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,405 ==== SSA block analysis pass on 1208
DEBUG 2022-02-14 16:45:47,405 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,405 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,405 ==== SSA block analysis pass on 683
DEBUG 2022-02-14 16:45:47,405 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,405 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,405 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,405 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,406 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,406 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,406 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,406 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,406 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,406 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,406 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,406 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,406 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,406 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,406 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,406 ==== SSA block analysis pass on 1224
DEBUG 2022-02-14 16:45:47,406 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,406 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,406 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,406 on stmt: H__batch_2 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,406 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,406 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:45:47,406 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,406 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,406 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,406 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,407 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,407 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,407 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,407 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,407 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,407 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,407 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,407 ==== SSA block analysis pass on 729
DEBUG 2022-02-14 16:45:47,407 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,407 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,407 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,407 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,407 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,407 ==== SSA block analysis pass on 1149
DEBUG 2022-02-14 16:45:47,407 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,407 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,407 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,407 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,407 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,407 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,407 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,407 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,407 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,407 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:47,408 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,408 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,408 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,408 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,408 ==== SSA block analysis pass on 507
DEBUG 2022-02-14 16:45:47,408 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,408 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,408 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,408 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,408 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,408 ==== SSA block analysis pass on 643
DEBUG 2022-02-14 16:45:47,408 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,408 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,408 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,408 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,408 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,408 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,408 on stmt: binom_prod.2 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,408 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,408 ==== SSA block analysis pass on 647
DEBUG 2022-02-14 16:45:47,408 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,408 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,408 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,408 ==== SSA block analysis pass on 1151
DEBUG 2022-02-14 16:45:47,408 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,408 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,409 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,409 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,409 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,409 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,409 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,409 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,409 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,409 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,409 ==== SSA block analysis pass on 651
DEBUG 2022-02-14 16:45:47,409 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,409 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,409 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,409 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,409 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,409 ==== SSA block analysis pass on 661
DEBUG 2022-02-14 16:45:47,409 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,409 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,409 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,409 ==== SSA block analysis pass on 667
DEBUG 2022-02-14 16:45:47,409 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,409 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,409 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,409 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,409 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,409 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,410 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,410 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,410 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,410 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,410 ==== SSA block analysis pass on 681
DEBUG 2022-02-14 16:45:47,410 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,410 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,410 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,410 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,410 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,410 ==== SSA block analysis pass on 1263
DEBUG 2022-02-14 16:45:47,410 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b949da00>
DEBUG 2022-02-14 16:45:47,410 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,412 defs defaultdict(<class 'list'>,
            {'$12load_global.4.2235': [<numba.core.ir.Assign object at 0x7f71b947fc10>],
             '$18binary_subscr.7.2237': [<numba.core.ir.Assign object at 0x7f71b94770a0>],
             '$194binary_multiply.7': [<numba.core.ir.Assign object at 0x7f71b9d058b0>],
             '$198binary_add.9': [<numba.core.ir.Assign object at 0x7f71b9c824c0>],
             '$202binary_add.11': [<numba.core.ir.Assign object at 0x7f71b9c827f0>],
             '$216load_global.17': [<numba.core.ir.Assign object at 0x7f71b9c82310>],
             '$238load_global.25': [<numba.core.ir.Assign object at 0x7f71b9d02970>],
             '$246binary_floor_divide.29': [<numba.core.ir.Assign object at 0x7f71b9d0efd0>],
             '$248call_function.30': [<numba.core.ir.Assign object at 0x7f71b994d370>],
             '$24binary_subscr.10.2239': [<numba.core.ir.Assign object at 0x7f71b94774c0>],
             '$250get_iter.31': [<numba.core.ir.Assign object at 0x7f71b994db80>],
             '$252for_iter.2': [<numba.core.ir.Assign object at 0x7f71b9d02ca0>],
             '$252for_iter.4': [<numba.core.ir.Assign object at 0x7f71b994dcd0>],
             '$264binary_subscr.7': [<numba.core.ir.Assign object at 0x7f71b9949070>],
             '$26load_global.11.2240': [<numba.core.ir.Assign object at 0x7f71b9477610>],
             '$270binary_subscr.10': [<numba.core.ir.Assign object at 0x7f71b9949f70>],
             '$272build_tuple.11': [<numba.core.ir.Assign object at 0x7f71b977c5b0>],
             '$274binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71b977cdc0>],
             '$284pred': [<numba.core.ir.Assign object at 0x7f71b977c4c0>],
             '$28load_method.12.2241': [<numba.core.ir.Assign object at 0x7f71b9477790>],
             '$2load_global.0.2233': [<numba.core.ir.Assign object at 0x7f71b947f550>],
             '$306load_global.1': [<numba.core.ir.Assign object at 0x7f71b97240d0>],
             '$320build_slice.8': [<numba.core.ir.Assign object at 0x7f71b9793490>],
             '$324binary_subscr.11': [<numba.core.ir.Assign object at 0x7f71b9b3ea90>],
             '$328call_function.13': [<numba.core.ir.Assign object at 0x7f71b9b358b0>],
             '$32call_method.14.2243': [<numba.core.ir.Assign object at 0x7f71b9477b20>],
             '$330unpack_sequence.18': [<numba.core.ir.Assign object at 0x7f71b9793c10>],
             '$340load_global.19': [<numba.core.ir.Assign object at 0x7f71b974e7f0>],
             '$348load_global.22': [<numba.core.ir.Assign object at 0x7f71b974e160>],
             '$34binary_add.15.2244': [<numba.core.ir.Assign object at 0x7f71b9477c40>],
             '$352call_function.24': [<numba.core.ir.Assign object at 0x7f71b97b7970>],
             '$354get_iter.25': [<numba.core.ir.Assign object at 0x7f71b97b7a60>],
             '$356for_iter.2': [<numba.core.ir.Assign object at 0x7f71b97b7790>],
             '$356for_iter.4': [<numba.core.ir.Assign object at 0x7f71b97d3460>],
             '$360load_global.3': [<numba.core.ir.Assign object at 0x7f71b9767e50>],
             '$36call_function.16.2245': [<numba.core.ir.Assign object at 0x7f71b9477df0>],
             '$372build_slice.9': [<numba.core.ir.Assign object at 0x7f71b9f20580>],
             '$376binary_subscr.12': [<numba.core.ir.Assign object at 0x7f71b961df40>],
             '$378call_function.13': [<numba.core.ir.Assign object at 0x7f71b9c75b50>],
             '$380unpack_sequence.16': [<numba.core.ir.Assign object at 0x7f71b961d370>],
             '$386load_global.17': [<numba.core.ir.Assign object at 0x7f71b961d6a0>],
             '$38get_iter.17.2246': [<numba.core.ir.Assign object at 0x7f71b9477f10>],
             '$402load_global.24': [<numba.core.ir.Assign object at 0x7f71b99adeb0>],
             '$40for_iter.1.2248': [<numba.core.ir.Assign object at 0x7f71b9460160>],
             '$40for_iter.2.2249': [<numba.core.ir.Assign object at 0x7f71b9460280>],
             '$40for_iter.3.2250': [<numba.core.ir.Assign object at 0x7f71b94603a0>],
             '$418binary_subscr.32': [<numba.core.ir.Assign object at 0x7f71b99ad970>],
             '$426load_global.35': [<numba.core.ir.Assign object at 0x7f71b98740d0>],
             '$434binary_subscr.39': [<numba.core.ir.Assign object at 0x7f71b9b3e430>],
             '$436binary_multiply.40': [<numba.core.ir.Assign object at 0x7f71b9874970>],
             '$442binary_multiply.43': [<numba.core.ir.Assign object at 0x7f71b9a262e0>],
             '$446binary_add.45': [<numba.core.ir.Assign object at 0x7f71b9a26160>],
             '$450binary_add.47': [<numba.core.ir.Assign object at 0x7f71b9a26ee0>],
             '$452call_function.48': [<numba.core.ir.Assign object at 0x7f71b9a268b0>],
             '$454get_iter.49': [<numba.core.ir.Assign object at 0x7f71b9a260a0>],
             '$456for_iter.3': [<numba.core.ir.Assign object at 0x7f71b99adca0>],
             '$456for_iter.5': [<numba.core.ir.Assign object at 0x7f71b99add90>],
             '$474binary_floor_divide.10': [<numba.core.ir.Assign object at 0x7f71b9d3dd60>],
             '$478binary_subtract.12': [<numba.core.ir.Assign object at 0x7f71b9d3d2e0>],
             '$490binary_floor_divide.17': [<numba.core.ir.Assign object at 0x7f71b9655160>],
             '$496binary_subscr.20': [<numba.core.ir.Assign object at 0x7f71b9b3ef70>],
             '$498build_tuple.21': [<numba.core.ir.Assign object at 0x7f71b95f5910>],
             '$4load_method.1.2234': [<numba.core.ir.Assign object at 0x7f71b947f6d0>],
             '$500binary_subscr.22': [<numba.core.ir.Assign object at 0x7f71b95f5850>],
             '$512binary_modulo.27': [<numba.core.ir.Assign object at 0x7f71b95f58b0>],
             '$516compare_op.29': [<numba.core.ir.Assign object at 0x7f71b95f5f70>],
             '$518pred': [<numba.core.ir.Assign object at 0x7f71ba1a1460>],
             '$528build_tuple.6': [<numba.core.ir.Assign object at 0x7f71ba1a1bb0>],
             '$532binary_subscr.9': [<numba.core.ir.Assign object at 0x7f71ba1a1b20>],
             '$538binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71ba1a18b0>],
             '$546binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7f71ba1a1dc0>],
             '$548binary_subscr.17': [<numba.core.ir.Assign object at 0x7f71b9e14520>],
             '$550binary_multiply.18': [<numba.core.ir.Assign object at 0x7f71b9e14d60>],
             '$552inplace_add.19': [<numba.core.ir.Assign object at 0x7f71b9e14c10>],
             '$566build_tuple.6': [<numba.core.ir.Assign object at 0x7f71b9e14730>],
             '$56build_slice.3.2254': [<numba.core.ir.Assign object at 0x7f71b9460c10>],
             '$56build_slice.4.2255': [<numba.core.ir.Assign object at 0x7f71b9460d30>],
             '$570binary_subscr.9': [<numba.core.ir.Assign object at 0x7f71b9e14580>],
             '$576binary_multiply.12': [<numba.core.ir.Assign object at 0x7f71b9e143d0>],
             '$582binary_subscr.15': [<numba.core.ir.Assign object at 0x7f71b9d47a60>],
             '$584binary_multiply.16': [<numba.core.ir.Assign object at 0x7f71b9d47d90>],
             '$586inplace_add.17': [<numba.core.ir.Assign object at 0x7f71b9d47400>],
             '$58binary_subscr.5.2256': [<numba.core.ir.Assign object at 0x7f71b9460ee0>],
             '$66build_slice.10.2260': [<numba.core.ir.Assign object at 0x7f71b94815b0>],
             '$66build_slice.9.2259': [<numba.core.ir.Assign object at 0x7f71b9481490>],
             '$72return_value.12.2262': [<numba.core.ir.Assign object at 0x7f71b9481970>],
             '$AX_S.1543': [<numba.core.ir.Assign object at 0x7f71b9793940>],
             '$D_S.1.1537': [<numba.core.ir.Assign object at 0x7f71b961d730>],
             '$H_batch.2.1972': [<numba.core.ir.Assign object at 0x7f71b9c65cd0>],
             '$N_det.1550': [<numba.core.ir.Assign object at 0x7f71b99ad820>],
             '$XD_S.1.1542': [<numba.core.ir.Assign object at 0x7f71b961d580>],
             '$binom_prod.2.1974': [<numba.core.ir.Assign object at 0x7f71b9c75c70>],
             '$const16.6.2236': [<numba.core.ir.Assign object at 0x7f71b947feb0>],
             '$const190.5': [<numba.core.ir.Assign object at 0x7f71b9d051c0>],
             '$const200.10': [<numba.core.ir.Assign object at 0x7f71b9c82520>],
             '$const22.9.2238': [<numba.core.ir.Assign object at 0x7f71b9477310>],
             '$const240.26': [<numba.core.ir.Assign object at 0x7f71b9d0e9a0>],
             '$const244.28': [<numba.core.ir.Assign object at 0x7f71b9d0e3a0>],
             '$const30.13.2242': [<numba.core.ir.Assign object at 0x7f71b9477910>],
             '$const428.36': [<numba.core.ir.Assign object at 0x7f71b9874310>],
             '$const432.38': [<numba.core.ir.Assign object at 0x7f71b9874700>],
             '$const438.41': [<numba.core.ir.Assign object at 0x7f71b9874f40>],
             '$const448.46': [<numba.core.ir.Assign object at 0x7f71b9a26730>],
             '$const468.7': [<numba.core.ir.Assign object at 0x7f71b9d3d3d0>],
             '$const472.9': [<numba.core.ir.Assign object at 0x7f71b9d3dfd0>],
             '$const488.16': [<numba.core.ir.Assign object at 0x7f71b9655b20>],
             '$const494.19': [<numba.core.ir.Assign object at 0x7f71b9655f70>],
             '$const510.26': [<numba.core.ir.Assign object at 0x7f71b95f51c0>],
             '$const514.28': [<numba.core.ir.Assign object at 0x7f71b95f5c10>],
             '$const52.1.2252': [<numba.core.ir.Assign object at 0x7f71b8ce6bb0>],
             '$const54.2.2253': [<numba.core.ir.Assign object at 0x7f71b8ce6b20>],
             '$const544.15': [<numba.core.ir.Assign object at 0x7f71ba1a16d0>],
             '$const62.7.2257': [<numba.core.ir.Assign object at 0x7f71b9481190>],
             '$const64.8.2258': [<numba.core.ir.Assign object at 0x7f71b9481310>],
             '$const70.11.2261': [<numba.core.ir.Assign object at 0x7f71b94817f0>],
             '$empty_attr_attr.1500': [<numba.core.ir.Assign object at 0x7f71b9b33700>],
             '$empty_attr_attr.1506': [<numba.core.ir.Assign object at 0x7f71b99c06a0>],
             '$i.1551': [<numba.core.ir.Assign object at 0x7f71b994d730>],
             '$k.1547': [<numba.core.ir.Assign object at 0x7f71b97d3250>],
             '$np_g_var.1499': [<numba.core.ir.Assign object at 0x7f71b9b33e20>],
             '$np_g_var.1505': [<numba.core.ir.Assign object at 0x7f71b99c0550>],
             '$np_typ_var.1501': [<numba.core.ir.Assign object at 0x7f71b9b33460>],
             '$np_typ_var.1507': [<numba.core.ir.Assign object at 0x7f71b99c0790>],
             '$oddVX_S.1539': [<numba.core.ir.Assign object at 0x7f71b974e040>],
             '$phi40.0.2247': [<numba.core.ir.Assign object at 0x7f71b947f880>],
             '$phi42.1.2251': [<numba.core.ir.Assign object at 0x7f71b94600a0>],
             '$tuple_var.1498': [<numba.core.ir.Assign object at 0x7f71b9b333a0>],
             'A': [<numba.core.ir.Assign object at 0x7f71b9485730>],
             'D': [<numba.core.ir.Assign object at 0x7f71b9485610>],
             'D__size0_1403': [<numba.core.ir.Assign object at 0x7f71b9485280>],
             'D__size1_1404': [<numba.core.ir.Assign object at 0x7f71b9485160>],
             'D__size1_1646': [<numba.core.ir.Assign object at 0x7f71b9485040>],
             'E': [<numba.core.ir.Assign object at 0x7f71b974e940>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x7f71b947fa00>,
                            <numba.core.ir.Assign object at 0x7f71ba294610>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x7f71b947f3d0>],
             'Hnew': [<numba.core.ir.Assign object at 0x7f71b9b33130>],
             'N': [<numba.core.ir.Assign object at 0x7f71b9a26c10>],
             'N__fixed': [<numba.core.ir.Assign object at 0x7f71ba437c10>],
             'N__max': [<numba.core.ir.Assign object at 0x7f71ba437fd0>],
             '_156binary__add_69': [<numba.core.ir.Assign object at 0x7f71b9485970>],
             '_const10_5': [<numba.core.ir.Assign object at 0x7f71b9485850>],
             'assert.1430': [<numba.core.ir.Assign object at 0x7f71ba6d79d0>],
             'assert.1468': [<numba.core.ir.Assign object at 0x7f71b9bd3040>],
             'batch__max': [<numba.core.ir.Assign object at 0x7f71ba437eb0>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7f71b9b35640>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x7f71ba3c9790>,
                              <numba.core.ir.Assign object at 0x7f71ba3c99d0>],
             'binoms': [<numba.core.ir.Assign object at 0x7f71ba437d90>],
             'bool284': [<numba.core.ir.Assign object at 0x7f71b977c7c0>],
             'bool518': [<numba.core.ir.Assign object at 0x7f71b95f5c40>],
             'delta': [<numba.core.ir.Assign object at 0x7f71b99c0880>],
             'delta.2': [<numba.core.ir.Assign object at 0x7f71ba653d60>,
                         <numba.core.ir.Assign object at 0x7f71ba748550>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7f71ba437b20>],
             'edge__reps__size0_1418': [<numba.core.ir.Assign object at 0x7f71ba437a00>],
             'f_even': [<numba.core.ir.Assign object at 0x7f71b9b35a90>],
             'f_odd': [<numba.core.ir.Assign object at 0x7f71b9b35d30>],
             'glynn': [<numba.core.ir.Assign object at 0x7f71ba4378e0>],
             'j': [<numba.core.ir.Assign object at 0x7f71b9b352e0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f71b9d02460>],
             'kept_edges_shape.1426': [<numba.core.ir.Assign object at 0x7f71ba3addc0>],
             'kept_edges_size0.1427': [<numba.core.ir.Assign object at 0x7f71ba3ad4f0>],
             'msg.1429': [<numba.core.ir.Assign object at 0x7f71b9767ca0>],
             'msg.1467': [<numba.core.ir.Assign object at 0x7f71b9bd39a0>],
             'n': [<numba.core.ir.Assign object at 0x7f71ba437760>],
             'n__D': [<numba.core.ir.Assign object at 0x7f71ba437430>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7f71beab1d60>],
             'oddV': [<numba.core.ir.Assign object at 0x7f71b947f070>],
             'odd__cutoff': [<numba.core.ir.Assign object at 0x7f71b947f190>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f71b947f2b0>],
             'parfor__index_1521': [<numba.core.ir.Assign object at 0x7f71b9460670>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7f71b9d3d0a0>],
             'replacement_build_tuple.1439': [<numba.core.ir.Assign object at 0x7f71ba001670>],
             'replacement_build_tuple.1692': [<numba.core.ir.Assign object at 0x7f71b9c202b0>],
             'replacement_slice.1434': [<numba.core.ir.Assign object at 0x7f71b9d29be0>],
             'replacement_slice.1687': [<numba.core.ir.Assign object at 0x7f71b89f3a00>],
             'ret.1431': [<numba.core.ir.Assign object at 0x7f71ba6d7c40>],
             'ret.1469': [<numba.core.ir.Assign object at 0x7f71b9bd3100>],
             'sched.2232': [<numba.core.ir.Assign object at 0x7f71b9485a90>],
             'zero.1433': [<numba.core.ir.Assign object at 0x7f71ba001b20>],
             'zero.1686': [<numba.core.ir.Assign object at 0x7f71b9c20340>]})
DEBUG 2022-02-14 16:45:47,412 SSA violators {'binom_prod.2', 'H__batch_2', 'delta.2'}
DEBUG 2022-02-14 16:45:47,412 Fix SSA violator on var binom_prod.2
DEBUG 2022-02-14 16:45:47,412 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,412 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,412 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,412 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,412 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,412 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,412 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,412 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,412 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,412 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,412 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,412 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,412 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,412 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,412 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,412 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,412 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,412 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,412 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,412 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,412 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,412 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,412 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,412 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,412 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,413 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,413 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,413 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,413 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,413 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,413 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,413 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,413 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,413 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,413 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,413 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,413 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,413 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,413 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,413 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,413 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,413 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,413 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,413 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,413 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,413 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,414 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,414 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,414 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,414 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,414 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,414 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,414 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,414 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,414 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,414 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,414 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,414 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,414 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,414 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,414 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,414 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,414 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,414 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,414 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,415 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,415 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,415 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,415 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,415 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,415 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,415 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,415 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,415 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,415 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,415 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,415 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,415 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,415 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,415 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,415 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,415 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,415 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,415 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,415 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,416 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,416 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,416 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,416 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,416 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,416 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,416 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,416 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,416 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,416 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,416 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,416 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,416 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,416 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,416 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,416 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,416 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,416 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,416 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,416 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,416 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,416 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,416 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,417 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,417 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,417 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,417 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,417 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,417 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,417 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,417 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,417 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,417 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,417 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,417 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,417 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,417 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,417 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,417 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,417 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,417 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,417 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,418 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,418 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,418 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,418 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,418 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,418 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,418 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,418 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,418 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,418 on stmt: H__batch_2 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,418 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,418 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,418 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,418 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,418 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,418 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,418 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,418 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,418 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,418 first assign: binom_prod.2
DEBUG 2022-02-14 16:45:47,418 replaced with: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,418 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,419 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,419 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,419 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,419 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,419 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,419 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,419 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,419 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,419 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,419 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,419 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,419 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,419 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,419 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,419 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,419 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,419 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,419 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,419 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,419 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:47,419 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,419 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,419 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,419 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,419 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,419 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,420 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,420 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,420 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,420 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,420 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,420 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,420 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,420 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,420 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,420 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,420 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,420 on stmt: binom_prod.2 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,420 replaced with: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,420 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,420 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,420 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,420 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,420 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,420 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,420 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,420 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,420 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,420 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,420 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,420 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,420 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,421 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,421 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,421 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,421 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,421 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,421 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,421 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,421 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,421 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,421 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,421 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,421 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,421 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,421 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,421 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,421 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,421 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,421 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,421 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,421 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,421 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,421 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,421 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,421 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,421 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,422 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,422 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,422 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,422 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,422 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,422 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,422 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,422 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,422 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x7f71b949dac0>],
             643: [<numba.core.ir.Assign object at 0x7f71b8ceb310>]})
DEBUG 2022-02-14 16:45:47,422 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,422 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,422 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,422 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,422 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,422 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,422 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,422 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,422 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,422 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,422 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,422 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,422 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,422 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,422 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,422 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,422 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,422 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,423 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,423 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,423 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,423 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,423 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,423 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,423 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,423 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,423 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,423 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,423 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,423 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,423 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,423 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,423 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,423 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,423 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,423 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,423 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,423 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,423 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,423 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,423 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,423 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,424 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,424 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,424 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,424 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,424 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,424 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,424 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,424 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,424 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,424 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,424 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,424 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,424 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,424 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,424 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,424 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,424 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,424 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,424 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,424 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,424 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,424 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,424 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,424 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,425 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,425 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,425 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,425 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,425 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,425 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,425 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,425 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,425 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,425 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,425 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,425 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,425 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,425 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,425 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,425 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,425 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,425 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,426 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,426 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,426 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,426 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,426 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,426 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,426 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,426 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,426 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,426 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,426 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,426 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,426 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,426 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,426 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,426 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,426 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,426 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,426 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,426 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,426 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,426 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,426 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,426 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,426 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,427 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,427 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,427 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,427 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,427 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,427 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,427 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,427 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,427 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,427 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,427 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,427 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,427 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,427 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,427 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,427 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,427 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,427 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,427 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,427 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,427 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,427 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,427 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,427 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,428 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,428 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,428 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,428 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,428 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,428 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,428 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,428 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,428 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,428 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,428 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,428 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,428 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,428 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,428 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,428 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,428 on stmt: H__batch_2 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,428 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,428 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,428 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,428 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,429 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,429 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,429 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,429 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,429 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,429 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,429 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,429 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,429 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,429 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,429 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,429 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,429 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,429 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,429 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,429 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,429 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,429 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,429 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,429 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,429 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,430 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,430 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,430 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,430 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,430 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:47,430 find_def var='binom_prod.2' stmt=n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 1149
DEBUG 2022-02-14 16:45:47,430 idom 729 from label 1149
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 729
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 729
DEBUG 2022-02-14 16:45:47,430 idom 683 from label 729
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 683
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 683
DEBUG 2022-02-14 16:45:47,430 idom 681 from label 683
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 681
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 681
DEBUG 2022-02-14 16:45:47,430 idom 667 from label 681
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 667
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 667
DEBUG 2022-02-14 16:45:47,430 idom 647 from label 667
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 647
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 647
DEBUG 2022-02-14 16:45:47,430 idom 507 from label 647
DEBUG 2022-02-14 16:45:47,430 find_def_from_bottom label 507
DEBUG 2022-02-14 16:45:47,430 find_def_from_top label 507
DEBUG 2022-02-14 16:45:47,430 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 507
DEBUG 2022-02-14 16:45:47,431 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:47,431 incoming_def binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,431 find_def_from_bottom label 643
DEBUG 2022-02-14 16:45:47,431 incoming_def binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,431 replaced with: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2.2
DEBUG 2022-02-14 16:45:47,431 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,431 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,431 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,431 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,431 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,431 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,431 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,431 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,431 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,431 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,431 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,431 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,431 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,431 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,431 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,432 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,432 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,432 find_def var='binom_prod.2' stmt=$binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,432 find_def_from_top label 643
DEBUG 2022-02-14 16:45:47,432 idom 507 from label 643
DEBUG 2022-02-14 16:45:47,432 find_def_from_bottom label 507
DEBUG 2022-02-14 16:45:47,432 replaced with: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,432 on stmt: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,432 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,432 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,432 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,432 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,432 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,432 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,432 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,432 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,432 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,432 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,432 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,432 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,432 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,432 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,432 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,433 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,433 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,433 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,433 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,433 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,433 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,433 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,433 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,433 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,433 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,433 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,433 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,433 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,433 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,433 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,433 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,433 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,433 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,433 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,434 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,434 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,434 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,434 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,434 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,434 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,434 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,434 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,434 Running <numba.core.ssa._FixSSAVars object at 0x7f71b949d730>
DEBUG 2022-02-14 16:45:47,434 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,434 Fix SSA violator on var H__batch_2
DEBUG 2022-02-14 16:45:47,434 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,434 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,434 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,434 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,434 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,434 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,434 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,434 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,434 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,434 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,434 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,434 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,434 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,434 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,434 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,434 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,434 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,435 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,435 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,435 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,435 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,435 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,435 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,435 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,435 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,435 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,435 first assign: H__batch_2
DEBUG 2022-02-14 16:45:47,435 replaced with: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,435 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,435 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,435 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,435 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,435 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,435 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,435 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,435 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,435 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,435 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,435 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,435 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,435 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,435 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,435 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,435 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,435 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,436 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,436 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,436 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,436 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,436 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,436 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,436 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,436 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,436 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,436 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,436 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,436 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,436 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,436 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,436 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,436 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,436 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,436 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,436 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,436 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,436 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,436 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,436 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,437 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,437 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,437 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,437 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,437 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,437 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,437 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,437 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,437 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,437 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,437 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,437 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,437 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,437 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,437 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,437 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,437 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,437 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,437 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,437 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,437 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,437 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,437 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,437 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,438 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,438 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,438 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,438 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,438 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,438 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,438 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,438 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,438 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,438 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,438 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,438 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,438 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,438 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,438 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,438 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,438 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,438 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,438 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,438 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,438 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,438 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,438 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,439 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,439 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,439 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,439 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,439 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,439 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,439 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,439 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,439 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,439 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,439 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,439 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,439 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,439 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,439 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,439 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,439 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,439 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,439 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,439 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,439 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,439 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,439 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,439 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,439 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,439 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,440 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,440 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,440 on stmt: H__batch_2 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,440 replaced with: H__batch_2.1 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,440 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,440 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,440 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,440 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,440 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,440 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,440 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,440 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,440 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,440 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,440 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,440 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,440 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,440 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,440 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,440 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,440 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,440 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,440 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,440 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,440 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,440 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,441 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,441 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,441 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,441 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,441 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,441 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,441 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,441 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2.2
DEBUG 2022-02-14 16:45:47,441 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,441 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,441 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,441 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,441 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,441 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,441 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2, loop_hafnian_batch_gamma.py:48), Var(binom_prod.2.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[50, 643])
DEBUG 2022-02-14 16:45:47,441 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,441 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,441 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,441 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,441 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,441 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,441 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,441 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,441 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,441 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,441 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,441 on stmt: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,442 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,442 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,442 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,442 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,442 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,442 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,442 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,442 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,442 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,442 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,442 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,442 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,442 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,442 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,442 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,442 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,442 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,442 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,442 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,442 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,442 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,442 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,442 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,442 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,443 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,443 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,443 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,443 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,443 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,443 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,443 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,443 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,443 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,443 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,443 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,443 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,443 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,443 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,443 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,443 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,443 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,443 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949db20>
DEBUG 2022-02-14 16:45:47,443 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,443 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b949d550>],
             1224: [<numba.core.ir.Assign object at 0x7f71b949d9d0>]})
DEBUG 2022-02-14 16:45:47,443 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,443 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,443 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,443 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,443 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,443 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,443 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,444 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,444 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,444 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,444 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,444 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,444 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,444 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,444 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,444 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,444 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,444 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,444 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,444 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,444 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,444 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,444 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,444 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,444 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,444 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,444 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,444 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,444 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,444 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,444 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,444 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,444 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,444 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,444 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,444 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,445 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,445 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,445 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,445 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,445 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,445 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,445 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,445 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,445 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,445 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,445 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,445 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,445 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,445 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,445 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,445 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,445 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,445 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,445 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,445 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,445 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,445 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,445 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,445 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,445 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,445 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,445 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,446 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,446 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,446 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,446 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,446 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,446 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,446 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,446 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,446 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,446 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,446 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,446 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,446 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,446 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,446 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,446 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,447 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,447 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,447 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,447 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,447 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,447 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,447 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,447 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,447 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,447 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,447 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,447 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,447 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,447 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,447 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,447 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,447 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,447 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,447 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,447 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,447 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,447 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,447 find_def var='H__batch_2' stmt=$58binary_subscr.5.2256 = getitem(value=H__batch_2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,447 find_def_from_top label 1371
DEBUG 2022-02-14 16:45:47,447 idom 40 from label 1371
DEBUG 2022-02-14 16:45:47,447 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:47,447 find_def_from_top label 40
DEBUG 2022-02-14 16:45:47,448 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-02-14 16:45:47,448 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:47,448 incoming_def H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,448 find_def_from_bottom label 1263
DEBUG 2022-02-14 16:45:47,448 find_def_from_top label 1263
DEBUG 2022-02-14 16:45:47,448 idom 1224 from label 1263
DEBUG 2022-02-14 16:45:47,448 find_def_from_bottom label 1224
DEBUG 2022-02-14 16:45:47,448 incoming_def H__batch_2.1 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,448 replaced with: $58binary_subscr.5.2256 = getitem(value=H__batch_2.2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,448 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,448 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,448 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,448 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,448 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,448 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,448 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,448 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,448 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,448 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,448 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,448 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,449 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,449 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,449 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,449 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,449 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,449 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,449 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,449 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,449 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,449 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,449 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,449 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,449 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,449 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,449 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,449 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,449 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,449 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,449 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,450 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,450 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,450 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,450 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,450 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,450 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,450 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,450 find_def var='H__batch_2' stmt=$H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 1224
DEBUG 2022-02-14 16:45:47,450 idom 681 from label 1224
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 681
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 681
DEBUG 2022-02-14 16:45:47,450 idom 667 from label 681
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 667
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 667
DEBUG 2022-02-14 16:45:47,450 idom 647 from label 667
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 647
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 647
DEBUG 2022-02-14 16:45:47,450 idom 507 from label 647
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 507
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 507
DEBUG 2022-02-14 16:45:47,450 idom 50 from label 507
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 50
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 50
DEBUG 2022-02-14 16:45:47,450 idom 42 from label 50
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 42
DEBUG 2022-02-14 16:45:47,450 find_def_from_top label 42
DEBUG 2022-02-14 16:45:47,450 idom 40 from label 42
DEBUG 2022-02-14 16:45:47,450 find_def_from_bottom label 40
DEBUG 2022-02-14 16:45:47,450 replaced with: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,451 on stmt: H__batch_2.1 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,451 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,451 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,451 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,451 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,451 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,451 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,451 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,451 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,451 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,451 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,451 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,451 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,451 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,451 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,451 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,451 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,451 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,451 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,451 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,451 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,451 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,451 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,451 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,452 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,452 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,452 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,452 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,452 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,452 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,452 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2.2
DEBUG 2022-02-14 16:45:47,452 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,452 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,452 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,452 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,452 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,452 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,452 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2, loop_hafnian_batch_gamma.py:48), Var(binom_prod.2.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[50, 643])
DEBUG 2022-02-14 16:45:47,452 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,452 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,452 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,452 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,452 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,452 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,452 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,452 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,452 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,452 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,452 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,453 on stmt: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,453 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,453 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,453 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,453 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,453 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,453 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,453 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,453 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,453 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,453 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,453 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,453 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,453 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,453 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,453 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,453 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,453 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,453 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,453 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,453 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,453 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,453 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,453 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,453 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,453 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,453 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,454 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,454 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,454 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,454 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,454 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,454 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,454 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,454 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,454 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,454 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,454 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,454 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,454 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,454 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,454 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,454 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,454 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,454 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,454 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb370>
DEBUG 2022-02-14 16:45:47,454 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,454 Fix SSA violator on var delta.2
DEBUG 2022-02-14 16:45:47,454 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,454 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,454 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,454 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,454 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,455 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,455 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,455 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,455 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,455 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,455 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,455 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,455 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,455 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,455 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,455 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,455 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,455 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,455 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,455 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,455 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,455 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,455 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,455 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,455 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,455 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,455 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,455 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,455 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,455 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,455 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,455 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,455 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,455 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,456 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,456 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,456 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,456 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,456 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,456 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,456 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,456 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,456 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,456 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,456 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,456 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,456 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,456 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,456 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,456 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,456 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,456 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,456 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,456 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,456 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,456 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,456 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,456 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,456 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,456 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,456 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,456 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,457 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,457 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,457 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,457 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,457 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,457 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,457 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,457 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,457 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,457 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,457 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,457 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,457 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,457 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,457 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,457 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,457 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,458 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,458 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,458 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,458 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,458 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,458 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,458 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 1263])
DEBUG 2022-02-14 16:45:47,458 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,458 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,458 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,458 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,458 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,458 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,458 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,458 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,458 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,458 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,458 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,458 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,458 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,458 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,458 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,458 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2.2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,458 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,458 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,458 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,458 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,458 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,459 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,459 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,459 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,459 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,459 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,459 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,459 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,459 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,459 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,459 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,459 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,459 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,459 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,459 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,459 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,459 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,459 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,459 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,459 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,459 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,459 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,459 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,459 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,459 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,459 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,459 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,459 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,459 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,460 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,460 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,460 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,460 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,460 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,460 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,460 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,460 on stmt: H__batch_2.1 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,460 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,460 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,460 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,460 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,460 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,460 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,460 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,460 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,460 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,460 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,460 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,461 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,461 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,461 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,461 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,461 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,461 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,461 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,461 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,461 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,461 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,461 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,461 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,461 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,461 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,461 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,461 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,461 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,461 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2.2
DEBUG 2022-02-14 16:45:47,461 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,461 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,461 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,461 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,461 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,461 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,461 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2, loop_hafnian_batch_gamma.py:48), Var(binom_prod.2.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[50, 643])
DEBUG 2022-02-14 16:45:47,461 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,461 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,461 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,461 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,462 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,462 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,462 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,462 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,462 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,462 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,462 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,462 on stmt: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,462 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,462 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,462 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,462 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,462 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,462 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,462 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,462 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,462 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,462 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,462 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,462 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,462 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,462 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,462 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,462 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,462 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,462 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,462 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,463 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,463 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,463 first assign: delta.2
DEBUG 2022-02-14 16:45:47,463 replaced with: delta.2 = delta
DEBUG 2022-02-14 16:45:47,463 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,463 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,463 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,463 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:45:47,463 replaced with: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:47,463 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,463 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,463 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,463 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,463 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,463 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,463 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,463 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,463 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,463 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,463 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,463 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,463 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,463 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,463 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,463 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,463 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,464 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,464 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,464 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b949d790>
DEBUG 2022-02-14 16:45:47,464 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,464 Replaced assignments: defaultdict(<class 'list'>,
            {651: [<numba.core.ir.Assign object at 0x7f71b8ceb250>],
             661: [<numba.core.ir.Assign object at 0x7f71b8ce81c0>]})
DEBUG 2022-02-14 16:45:47,464 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,464 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,464 on stmt: sched.2232 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:47,464 on stmt: _156binary__add_69 = arg(1, name=_156binary__add_69)
DEBUG 2022-02-14 16:45:47,464 on stmt: _const10_5 = arg(2, name=_const10_5)
DEBUG 2022-02-14 16:45:47,464 on stmt: A = arg(3, name=A)
DEBUG 2022-02-14 16:45:47,464 on stmt: D = arg(4, name=D)
DEBUG 2022-02-14 16:45:47,464 on stmt: D__size0_1403 = arg(5, name=D__size0_1403)
DEBUG 2022-02-14 16:45:47,464 on stmt: D__size1_1404 = arg(6, name=D__size1_1404)
DEBUG 2022-02-14 16:45:47,464 on stmt: D__size1_1646 = arg(7, name=D__size1_1646)
DEBUG 2022-02-14 16:45:47,464 on stmt: N__fixed = arg(8, name=N__fixed)
DEBUG 2022-02-14 16:45:47,464 on stmt: N__max = arg(9, name=N__max)
DEBUG 2022-02-14 16:45:47,464 on stmt: batch__max = arg(10, name=batch__max)
DEBUG 2022-02-14 16:45:47,464 on stmt: binoms = arg(11, name=binoms)
DEBUG 2022-02-14 16:45:47,464 on stmt: edge__reps = arg(12, name=edge__reps)
DEBUG 2022-02-14 16:45:47,464 on stmt: edge__reps__size0_1418 = arg(13, name=edge__reps__size0_1418)
DEBUG 2022-02-14 16:45:47,464 on stmt: glynn = arg(14, name=glynn)
DEBUG 2022-02-14 16:45:47,464 on stmt: n = arg(15, name=n)
DEBUG 2022-02-14 16:45:47,464 on stmt: n__D = arg(16, name=n__D)
DEBUG 2022-02-14 16:45:47,464 on stmt: oddV = arg(17, name=oddV)
DEBUG 2022-02-14 16:45:47,464 on stmt: odd__cutoff = arg(18, name=odd__cutoff)
DEBUG 2022-02-14 16:45:47,464 on stmt: oddloop = arg(19, name=oddloop)
DEBUG 2022-02-14 16:45:47,465 on stmt: H__batch_2__arr = arg(20, name=H__batch_2__arr)
DEBUG 2022-02-14 16:45:47,465 on stmt: $2load_global.0.2233 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,465 on stmt: $4load_method.1.2234 = getattr(value=$2load_global.0.2233, attr=copy)
DEBUG 2022-02-14 16:45:47,465 on stmt: H__batch_2 = call $4load_method.1.2234(H__batch_2__arr, func=$4load_method.1.2234, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,465 on stmt: $12load_global.4.2235 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,465 on stmt: $const16.6.2236 = const(int, 0)
DEBUG 2022-02-14 16:45:47,465 on stmt: $18binary_subscr.7.2237 = getitem(value=sched.2232, index=$const16.6.2236, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,465 on stmt: $const22.9.2238 = const(int, 1)
DEBUG 2022-02-14 16:45:47,465 on stmt: $24binary_subscr.10.2239 = getitem(value=sched.2232, index=$const22.9.2238, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,465 on stmt: $26load_global.11.2240 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,465 on stmt: $28load_method.12.2241 = getattr(value=$26load_global.11.2240, attr=uint8)
DEBUG 2022-02-14 16:45:47,465 on stmt: $const30.13.2242 = const(int, 1)
DEBUG 2022-02-14 16:45:47,465 on stmt: $32call_method.14.2243 = call $28load_method.12.2241($const30.13.2242, func=$28load_method.12.2241, args=[Var($const30.13.2242, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,465 on stmt: $34binary_add.15.2244 = $24binary_subscr.10.2239 + $32call_method.14.2243
DEBUG 2022-02-14 16:45:47,465 on stmt: $36call_function.16.2245 = call $12load_global.4.2235($18binary_subscr.7.2237, $34binary_add.15.2244, func=$12load_global.4.2235, args=[Var($18binary_subscr.7.2237, <string>:3), Var($34binary_add.15.2244, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,465 on stmt: $38get_iter.17.2246 = getiter(value=$36call_function.16.2245)
DEBUG 2022-02-14 16:45:47,465 on stmt: $phi40.0.2247 = $38get_iter.17.2246
DEBUG 2022-02-14 16:45:47,465 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f71beab0160>))
DEBUG 2022-02-14 16:45:47,465 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,465 on stmt: zero.1686 = const(int, 0)
DEBUG 2022-02-14 16:45:47,465 on stmt: replacement_slice.1687 = call $372build_slice.9(zero.1686, D__size1_1646, func=$372build_slice.9, args=(Var(zero.1686, loop_hafnian_batch_gamma.py:61), Var(D__size1_1646, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,465 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f71beb25940>))
DEBUG 2022-02-14 16:45:47,465 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f71beb25af0>))
DEBUG 2022-02-14 16:45:47,466 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,466 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:45:47,466 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:45:47,466 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:45:47,466 on stmt: $442binary_multiply.43 = $const438.41 * batch__max
DEBUG 2022-02-14 16:45:47,466 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd__cutoff
DEBUG 2022-02-14 16:45:47,466 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:45:47,466 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:45:47,466 on stmt: msg.1467 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (76))
DEBUG 2022-02-14 16:45:47,466 on stmt: assert.1468 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,466 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:45:47,466 on stmt: $194binary_multiply.7 = $const190.5 * batch__max
DEBUG 2022-02-14 16:45:47,466 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd__cutoff
DEBUG 2022-02-14 16:45:47,466 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:45:47,466 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:45:47,466 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f71beb25700>))
DEBUG 2022-02-14 16:45:47,466 on stmt: $tuple_var.1498 = build_tuple(items=[Var(D__size0_1403, loop_hafnian_batch_gamma.py:23), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:45:47,466 on stmt: $np_g_var.1499 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,466 on stmt: $empty_attr_attr.1500 = getattr(value=$np_g_var.1499, attr=empty)
DEBUG 2022-02-14 16:45:47,466 on stmt: $np_typ_var.1501 = getattr(value=$np_g_var.1499, attr=complex128)
DEBUG 2022-02-14 16:45:47,466 on stmt: Hnew = call $empty_attr_attr.1500($tuple_var.1498, $np_typ_var.1501, func=$empty_attr_attr.1500, args=[Var($tuple_var.1498, loop_hafnian_batch_gamma.py:42), Var($np_typ_var.1501, loop_hafnian_batch_gamma.py:42)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,466 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,466 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,466 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:45:47,467 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:45:47,467 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:45:47,467 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,467 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,467 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:45:47,467 on stmt: msg.1429 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52))
DEBUG 2022-02-14 16:45:47,467 on stmt: assert.1430 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:45:47,467 on stmt: $np_g_var.1505 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:47,467 on stmt: $empty_attr_attr.1506 = getattr(value=$np_g_var.1505, attr=empty)
DEBUG 2022-02-14 16:45:47,467 on stmt: $np_typ_var.1507 = getattr(value=$np_g_var.1505, attr=int64)
DEBUG 2022-02-14 16:45:47,467 on stmt: delta = call $empty_attr_attr.1506(edge__reps__size0_1418, $np_typ_var.1507, func=$empty_attr_attr.1506, args=[Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31), Var($np_typ_var.1507, loop_hafnian_batch_gamma.py:52)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,467 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f71beb25ca0>))
DEBUG 2022-02-14 16:45:47,467 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,467 on stmt: zero.1433 = const(int, 0)
DEBUG 2022-02-14 16:45:47,467 on stmt: replacement_slice.1434 = call $320build_slice.8(zero.1433, D__size1_1404, func=$320build_slice.8, args=(Var(zero.1433, loop_hafnian_batch_gamma.py:56), Var(D__size1_1404, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,467 on stmt: replacement_build_tuple.1439 = build_tuple(items=[Var(_const10_5, loop_hafnian_batch_gamma.py:23), Var(replacement_slice.1434, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:45:47,467 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f71beab03a0>))
DEBUG 2022-02-14 16:45:47,467 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:47,467 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,467 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:45:47,467 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,468 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 1263])
DEBUG 2022-02-14 16:45:47,468 on stmt: $40for_iter.1.2248 = iternext(value=$phi40.0.2247)
DEBUG 2022-02-14 16:45:47,468 on stmt: $40for_iter.2.2249 = pair_first(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,468 on stmt: $40for_iter.3.2250 = pair_second(value=$40for_iter.1.2248)
DEBUG 2022-02-14 16:45:47,468 on stmt: $phi42.1.2251 = $40for_iter.2.2249
DEBUG 2022-02-14 16:45:47,468 on stmt: branch $40for_iter.3.2250, 42, 1371
DEBUG 2022-02-14 16:45:47,468 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:45:47,468 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,468 on stmt: parfor__index_1521 = $phi42.1.2251
DEBUG 2022-02-14 16:45:47,468 on stmt: jump 50
DEBUG 2022-02-14 16:45:47,468 ==== SSA block rewrite pass on 1371
DEBUG 2022-02-14 16:45:47,468 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,468 on stmt: $const52.1.2252 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $const54.2.2253 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $56build_slice.3.2254 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,468 on stmt: $56build_slice.4.2255 = call $56build_slice.3.2254($const52.1.2252, $const54.2.2253, func=$56build_slice.3.2254, args=(Var($const52.1.2252, <string>:5), Var($const54.2.2253, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $58binary_subscr.5.2256 = getitem(value=H__batch_2.2, index=$56build_slice.4.2255, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,468 on stmt: $const62.7.2257 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $const64.8.2258 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $66build_slice.9.2259 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:45:47,468 on stmt: $66build_slice.10.2260 = call $66build_slice.9.2259($const62.7.2257, $const64.8.2258, func=$66build_slice.9.2259, args=(Var($const62.7.2257, <string>:5), Var($const64.8.2258, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,468 on stmt: H__batch_2__arr[$66build_slice.10.2260] = $58binary_subscr.5.2256
DEBUG 2022-02-14 16:45:47,468 on stmt: $const70.11.2261 = const(NoneType, None)
DEBUG 2022-02-14 16:45:47,468 on stmt: $72return_value.12.2262 = cast(value=$const70.11.2261)
DEBUG 2022-02-14 16:45:47,468 on stmt: return $72return_value.12.2262
DEBUG 2022-02-14 16:45:47,468 ==== SSA block rewrite pass on 1167
DEBUG 2022-02-14 16:45:47,468 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,468 on stmt: $566build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,469 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,469 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,469 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,469 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:45:47,469 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,469 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:45:47,469 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,469 ==== SSA block rewrite pass on 1206
DEBUG 2022-02-14 16:45:47,469 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,469 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,469 ==== SSA block rewrite pass on 1208
DEBUG 2022-02-14 16:45:47,469 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,469 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,469 ==== SSA block rewrite pass on 683
DEBUG 2022-02-14 16:45:47,469 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,469 on stmt: replacement_build_tuple.1692 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var(replacement_slice.1687, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:45:47,469 on stmt: $376binary_subscr.12 = getitem(value=D, index=replacement_build_tuple.1692, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,469 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,469 find_def var='delta.2' stmt=$378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,469 find_def_from_top label 683
DEBUG 2022-02-14 16:45:47,469 idom 681 from label 683
DEBUG 2022-02-14 16:45:47,469 find_def_from_bottom label 681
DEBUG 2022-02-14 16:45:47,469 find_def_from_top label 681
DEBUG 2022-02-14 16:45:47,469 idom 667 from label 681
DEBUG 2022-02-14 16:45:47,469 find_def_from_bottom label 667
DEBUG 2022-02-14 16:45:47,469 find_def_from_top label 667
DEBUG 2022-02-14 16:45:47,469 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 667
DEBUG 2022-02-14 16:45:47,470 find_def_from_bottom label 651
DEBUG 2022-02-14 16:45:47,470 incoming_def delta.2 = delta
DEBUG 2022-02-14 16:45:47,470 find_def_from_bottom label 661
DEBUG 2022-02-14 16:45:47,470 incoming_def delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:47,470 replaced with: $378call_function.13 = call $360load_global.3(delta.2.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2.2, loop_hafnian_batch_gamma.py:60), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,470 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:45:47,470 on stmt: $XD_S.1.1542 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,470 on stmt: $D_S.1.1537 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,470 on stmt: f_even = call $386load_global.17(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,470 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=$k.1547, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,470 on stmt: f_odd = call $402load_global.24(E, $AX_S.1543, $XD_S.1.1542, $D_S.1.1537, N__max, $418binary_subscr.32, $oddVX_S.1539, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var($AX_S.1543, loop_hafnian_batch_gamma.py:56), Var($XD_S.1.1542, loop_hafnian_batch_gamma.py:61), Var($D_S.1.1537, loop_hafnian_batch_gamma.py:61), Var(N__max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var($oddVX_S.1539, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,470 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,470 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:45:47,470 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,470 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:45:47,470 on stmt: jump 729
DEBUG 2022-02-14 16:45:47,470 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:45:47,470 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,470 on stmt: ret.1469 = call assert.1468(msg.1467, _156binary__add_69, $202binary_add.11, func=assert.1468, args=[Var(msg.1467, loop_hafnian_batch_gamma.py:76), Var(_156binary__add_69, loop_hafnian_batch_gamma.py:38), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,470 on stmt: $H_batch.2.1972 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,470 on stmt: H__batch_2.1 = $H_batch.2.1972
DEBUG 2022-02-14 16:45:47,470 on stmt: jump 1263
DEBUG 2022-02-14 16:45:47,471 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:45:47,471 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,471 on stmt: j = parfor__index_1521
DEBUG 2022-02-14 16:45:47,471 on stmt: id=14[LoopNest(index_variable = parfor_index.1496, range = (0, D__size0_1403, 1)), LoopNest(index_variable = parfor_index.1497, range = (0, $202binary_add.11, 1))]{1369: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (42)>}Var($parfor_index_tuple_var.1503, loop_hafnian_batch_gamma.py:42)
DEBUG 2022-02-14 16:45:47,471 on stmt: kept_edges = call $216load_global.17(j, edge__reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge__reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,471 on stmt: kept_edges_shape.1426 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:45:47,471 on stmt: kept_edges_size0.1427 = static_getitem(value=kept_edges_shape.1426, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,471 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:45:47,471 on stmt: id=19[LoopNest(index_variable = parfor_index.1519, range = (0, kept_edges_size0.1427, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1519, parfor.py:256)
DEBUG 2022-02-14 16:45:47,471 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,471 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:45:47,471 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,471 ==== SSA block rewrite pass on 729
DEBUG 2022-02-14 16:45:47,471 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,471 on stmt: $456for_iter.3 = iternext(value=$454get_iter.49)
DEBUG 2022-02-14 16:45:47,471 on stmt: $N_det.1550 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,471 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:45:47,471 on stmt: branch $456for_iter.5, 1149, 1208
DEBUG 2022-02-14 16:45:47,471 ==== SSA block rewrite pass on 1149
DEBUG 2022-02-14 16:45:47,471 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,471 on stmt: N = N__fixed + $N_det.1550
DEBUG 2022-02-14 16:45:47,471 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:45:47,471 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - val.1264
DEBUG 2022-02-14 16:45:47,471 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:45:47,472 on stmt: $490binary_floor_divide.17 = $N_det.1550 // $const488.16
DEBUG 2022-02-14 16:45:47,472 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,472 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:45:47,472 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,472 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2.2
DEBUG 2022-02-14 16:45:47,472 on stmt: $512binary_modulo.27 = $N_det.1550 % $const510.26
DEBUG 2022-02-14 16:45:47,472 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:45:47,472 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,472 on stmt: branch $518pred, 1151, 1167
DEBUG 2022-02-14 16:45:47,472 ==== SSA block rewrite pass on 507
DEBUG 2022-02-14 16:45:47,472 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,472 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2, loop_hafnian_batch_gamma.py:48), Var(binom_prod.2.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[50, 643])
DEBUG 2022-02-14 16:45:47,472 on stmt: $252for_iter.2 = iternext(value=$250get_iter.31)
DEBUG 2022-02-14 16:45:47,472 on stmt: $i.1551 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,472 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:45:47,472 on stmt: branch $252for_iter.4, 643, 647
DEBUG 2022-02-14 16:45:47,472 ==== SSA block rewrite pass on 643
DEBUG 2022-02-14 16:45:47,472 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,472 on stmt: $264binary_subscr.7 = getitem(value=edge__reps, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,472 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=$i.1551, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,472 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:45:47,472 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,472 on stmt: $binom_prod.2.1974 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,472 on stmt: binom_prod.2.1 = $binom_prod.2.1974
DEBUG 2022-02-14 16:45:47,472 on stmt: jump 507
DEBUG 2022-02-14 16:45:47,472 ==== SSA block rewrite pass on 647
DEBUG 2022-02-14 16:45:47,473 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,473 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,473 on stmt: branch $284pred, 651, 661
DEBUG 2022-02-14 16:45:47,473 ==== SSA block rewrite pass on 1151
DEBUG 2022-02-14 16:45:47,473 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,473 on stmt: $528build_tuple.6 = build_tuple(items=[Var($k.1547, loop_hafnian_batch_gamma.py:60), Var($N_det.1550, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:45:47,473 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,473 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:45:47,473 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:45:47,473 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,473 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:45:47,473 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,473 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:45:47,473 on stmt: jump 1206
DEBUG 2022-02-14 16:45:47,473 ==== SSA block rewrite pass on 651
DEBUG 2022-02-14 16:45:47,473 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,473 on stmt: ret.1431 = call assert.1430(msg.1429, kept_edges_size0.1427, edge__reps__size0_1418, func=assert.1430, args=[Var(msg.1429, loop_hafnian_batch_gamma.py:52), Var(kept_edges_size0.1427, loop_hafnian_batch_gamma.py:44), Var(edge__reps__size0_1418, loop_hafnian_batch_gamma.py:31)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,473 on stmt: id=15[LoopNest(index_variable = parfor_index.1504, range = (0, edge__reps__size0_1418, 1))]{1370: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch_gamma.py (52)>}Var(parfor_index.1504, loop_hafnian_batch_gamma.py:52)
DEBUG 2022-02-14 16:45:47,473 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:45:47,474 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,474 ==== SSA block rewrite pass on 661
DEBUG 2022-02-14 16:45:47,474 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,474 on stmt: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:45:47,474 on stmt: jump 667
DEBUG 2022-02-14 16:45:47,474 ==== SSA block rewrite pass on 667
DEBUG 2022-02-14 16:45:47,474 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,474 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=replacement_build_tuple.1439, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,474 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,474 find_def var='delta.2' stmt=$328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,474 replaced with: $328call_function.13 = call $306load_global.1(delta.2.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2.2, loop_hafnian_batch_gamma.py:60), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,474 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:45:47,474 on stmt: $AX_S.1543 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,474 on stmt: $oddVX_S.1539 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:47,474 on stmt: E = call $340load_global.19($AX_S.1543, func=$340load_global.19, args=[Var($AX_S.1543, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,474 on stmt: $352call_function.24 = call $348load_global.22(n__D, func=$348load_global.22, args=[Var(n__D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,474 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:45:47,474 on stmt: jump 681
DEBUG 2022-02-14 16:45:47,474 ==== SSA block rewrite pass on 681
DEBUG 2022-02-14 16:45:47,474 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,475 on stmt: $356for_iter.2 = iternext(value=$354get_iter.25)
DEBUG 2022-02-14 16:45:47,475 on stmt: $k.1547 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,475 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:45:47,475 on stmt: branch $356for_iter.4, 683, 1224
DEBUG 2022-02-14 16:45:47,475 ==== SSA block rewrite pass on 1263
DEBUG 2022-02-14 16:45:47,475 Running <numba.core.ssa._FixSSAVars object at 0x7f71b8ceb490>
DEBUG 2022-02-14 16:45:47,475 on stmt: jump 40
DEBUG 2022-02-14 16:45:47,484 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,484 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,484 stack: []
DEBUG 2022-02-14 16:45:47,484 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,484 stack []
DEBUG 2022-02-14 16:45:47,484 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,484 stack []
DEBUG 2022-02-14 16:45:47,484 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,484 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,484 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,484 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:47,484 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,484 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:47,484 end state. edges=[]
DEBUG 2022-02-14 16:45:47,484 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,484 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,484 defmap: {}
DEBUG 2022-02-14 16:45:47,484 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,485 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,485 keep phismap: {}
DEBUG 2022-02-14 16:45:47,485 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,485 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,485 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,485 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:45:47,486 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,486 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b98105e0>
DEBUG 2022-02-14 16:45:47,486 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:47,486 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:47,486 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,486 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:45:47,486 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:45:47,487 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b9810c40>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f71b9802be0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f71b9802880>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b9810dc0>]})
DEBUG 2022-02-14 16:45:47,487 SSA violators set()
DEBUG 2022-02-14 16:45:47,520 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,520 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,520 stack: []
DEBUG 2022-02-14 16:45:47,521 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack []
DEBUG 2022-02-14 16:45:47,521 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack []
DEBUG 2022-02-14 16:45:47,521 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:47,521 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:45:47,521 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:45:47,521 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:45:47,521 stack ['$8call_function.3']
DEBUG 2022-02-14 16:45:47,521 end state. edges=[]
DEBUG 2022-02-14 16:45:47,521 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,521 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,521 defmap: {}
DEBUG 2022-02-14 16:45:47,521 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,521 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,521 keep phismap: {}
DEBUG 2022-02-14 16:45:47,521 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,521 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,521 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,522 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:45:47,523 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,523 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b95998e0>
DEBUG 2022-02-14 16:45:47,523 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:45:47,523 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:45:47,523 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:45:47,523 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,523 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:45:47,523 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:45:47,523 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f71b956d820>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f71b956de20>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f71b956dac0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f71b95990a0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f71b95993a0>]})
DEBUG 2022-02-14 16:45:47,523 SSA violators set()
DEBUG 2022-02-14 16:45:47,926 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:47,926 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,927 stack: []
DEBUG 2022-02-14 16:45:47,927 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:45:47,927 stack []
DEBUG 2022-02-14 16:45:47,927 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:47,927 stack []
DEBUG 2022-02-14 16:45:47,927 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:47,927 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:45:47,927 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:45:47,927 stack ['$6call_function.2']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:47,927 stack []
DEBUG 2022-02-14 16:45:47,927 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:47,927 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:45:47,927 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:45:47,927 stack ['$14call_function.5']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:45:47,927 stack []
DEBUG 2022-02-14 16:45:47,927 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:45:47,927 stack ['$b18.6']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:45:47,927 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:45:47,927 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:45:47,928 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:45:47,928 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,928 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,928 stack: []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:47,928 stack []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:45:47,928 stack ['$const26.0']
DEBUG 2022-02-14 16:45:47,928 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:45:47,928 stack []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:45:47,928 stack ['$b30.1']
DEBUG 2022-02-14 16:45:47,928 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:45:47,928 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:45:47,928 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:45:47,928 stack []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:45:47,928 stack ['$exp36.3']
DEBUG 2022-02-14 16:45:47,928 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:45:47,928 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:45:47,928 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:45:47,928 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:45:47,928 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,928 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,928 stack: []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:45:47,928 stack []
DEBUG 2022-02-14 16:45:47,928 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:45:47,929 stack ['$const98.0']
DEBUG 2022-02-14 16:45:47,929 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:45:47,929 stack []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:45:47,929 stack ['$b102.1']
DEBUG 2022-02-14 16:45:47,929 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,929 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,929 stack: []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:45:47,929 stack []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:45:47,929 stack ['$44load_global.0']
DEBUG 2022-02-14 16:45:47,929 end state. edges=[]
DEBUG 2022-02-14 16:45:47,929 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,929 stack: []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:45:47,929 stack []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:45:47,929 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:45:47,929 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,929 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,929 stack: []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:47,929 stack []
DEBUG 2022-02-14 16:45:47,929 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:45:47,929 stack ['$exp106.0']
DEBUG 2022-02-14 16:45:47,929 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:45:47,929 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:45:47,930 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:45:47,930 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:45:47,930 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,930 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,930 stack: []
DEBUG 2022-02-14 16:45:47,930 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:45:47,930 stack []
DEBUG 2022-02-14 16:45:47,930 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:47,930 stack ['$a52.0']
DEBUG 2022-02-14 16:45:47,930 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:45:47,930 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:45:47,930 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:45:47,930 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:45:47,930 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,930 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,930 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,930 stack: []
DEBUG 2022-02-14 16:45:47,930 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:47,930 stack []
DEBUG 2022-02-14 16:45:47,930 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:45:47,930 stack ['$114load_global.0']
DEBUG 2022-02-14 16:45:47,930 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:45:47,930 stack ['$116load_method.1']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:45:47,931 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:47,931 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:45:47,931 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:45:47,931 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:45:47,931 stack ['$126call_method.6']
DEBUG 2022-02-14 16:45:47,931 end state. edges=[]
DEBUG 2022-02-14 16:45:47,931 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,931 stack: []
DEBUG 2022-02-14 16:45:47,931 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:45:47,931 stack []
DEBUG 2022-02-14 16:45:47,931 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:45:47,931 stack ['$exp130.0']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:45:47,931 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:45:47,931 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:45:47,931 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:45:47,931 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,932 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,932 stack: []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:45:47,932 stack []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:45:47,932 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:45:47,932 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,932 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,932 stack: []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:47,932 stack []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:45:47,932 stack ['$a76.0']
DEBUG 2022-02-14 16:45:47,932 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:47,932 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:45:47,932 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:47,932 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:45:47,932 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,932 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,932 stack: []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:45:47,932 stack []
DEBUG 2022-02-14 16:45:47,932 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:45:47,932 stack ['$exp138.0']
DEBUG 2022-02-14 16:45:47,932 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:45:47,933 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:45:47,933 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:45:47,933 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:45:47,933 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,933 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,933 stack: []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:45:47,933 stack []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:45:47,933 stack ['$invert172.0']
DEBUG 2022-02-14 16:45:47,933 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,933 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,933 stack: []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:45:47,933 stack []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:45:47,933 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:45:47,933 end state. edges=[]
DEBUG 2022-02-14 16:45:47,933 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,933 stack: []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:47,933 stack []
DEBUG 2022-02-14 16:45:47,933 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:45:47,933 stack ['$68load_global.0']
DEBUG 2022-02-14 16:45:47,933 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:47,934 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:45:47,934 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:45:47,934 stack ['$72call_function.2']
DEBUG 2022-02-14 16:45:47,934 end state. edges=[]
DEBUG 2022-02-14 16:45:47,934 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,934 stack: []
DEBUG 2022-02-14 16:45:47,934 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:45:47,934 stack []
DEBUG 2022-02-14 16:45:47,934 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:45:47,934 stack ['$a84.0']
DEBUG 2022-02-14 16:45:47,934 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:45:47,934 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:45:47,934 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:45:47,934 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:45:47,934 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,934 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,934 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,934 stack: []
DEBUG 2022-02-14 16:45:47,934 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:47,934 stack []
DEBUG 2022-02-14 16:45:47,934 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:45:47,934 stack ['$r146.0']
DEBUG 2022-02-14 16:45:47,934 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:45:47,935 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:45:47,935 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:45:47,935 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,935 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,935 stack: []
DEBUG 2022-02-14 16:45:47,935 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:47,935 stack []
DEBUG 2022-02-14 16:45:47,935 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:45:47,935 stack ['$exp154.0']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:45:47,935 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:45:47,935 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:47,935 stack []
DEBUG 2022-02-14 16:45:47,935 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:47,935 stack ['$a162.3']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:45:47,935 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:45:47,935 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:45:47,935 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:45:47,935 stack []
DEBUG 2022-02-14 16:45:47,935 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:47,935 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,936 stack: []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack ['$const176.0']
DEBUG 2022-02-14 16:45:47,936 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:45:47,936 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:45:47,936 end state. edges=[]
DEBUG 2022-02-14 16:45:47,936 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,936 stack: []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:45:47,936 stack ['$r184.0']
DEBUG 2022-02-14 16:45:47,936 end state. edges=[]
DEBUG 2022-02-14 16:45:47,936 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,936 stack: []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:45:47,936 stack []
DEBUG 2022-02-14 16:45:47,936 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:45:47,936 stack ['$const92.0']
DEBUG 2022-02-14 16:45:47,936 end state. edges=[]
DEBUG 2022-02-14 16:45:47,936 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,936 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,936 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:45:47,937 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:47,937 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:47,937 defmap: {}
DEBUG 2022-02-14 16:45:47,937 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,937 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:45:47,937 keep phismap: {}
DEBUG 2022-02-14 16:45:47,937 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:45:47,937 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:47,937 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:45:47,937 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:45:47,937 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,937 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,938 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:47,940 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:45:47,948 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:47,948 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,948 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,948 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,948 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,948 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,948 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,948 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,948 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,948 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,948 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,948 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,948 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,948 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,948 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:45:47,948 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,949 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,949 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,949 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,949 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,949 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,949 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,949 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,949 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:45:47,949 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,949 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,949 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,949 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:45:47,949 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,949 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,949 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,949 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,949 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,949 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:45:47,949 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,949 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:47,949 on stmt: exp = b
DEBUG 2022-02-14 16:45:47,949 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,949 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:45:47,949 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,949 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,949 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:47,950 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,950 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,950 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,950 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:45:47,950 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,950 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,950 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,950 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,950 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,950 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,950 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,950 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,950 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:45:47,950 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,950 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,950 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:47,950 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,950 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,950 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,950 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:45:47,950 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,950 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,950 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:47,950 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,950 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,951 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,951 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:45:47,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,951 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,951 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,951 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,951 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:45:47,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,951 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,951 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,951 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,951 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,951 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,951 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,951 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:45:47,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,951 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,951 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,951 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,951 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:45:47,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,951 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,951 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,951 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,951 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,951 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:45:47,951 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b90a6f10>
DEBUG 2022-02-14 16:45:47,951 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,951 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,952 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7f71b90d85b0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7f71b90ba880>],
             '$112pred': [<numba.core.ir.Assign object at 0x7f71b90baaf0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7f71b90bad30>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7f71b90baeb0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7f71b90aaa30>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7f71b90aaee0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7f71b90aa250>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7f71b90aa7f0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7f71b90aa2b0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7f71b90aa3d0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7f71b90ab3a0>],
             '$144pred': [<numba.core.ir.Assign object at 0x7f71b90ab610>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7f71b90abac0>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7f71b90ae040>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7f71b90ae4c0>],
             '$174pred': [<numba.core.ir.Assign object at 0x7f71b90ae970>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f71b90aee80>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7f71b90aefd0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7f71b90a6370>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7f71b90d8dc0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f71b90e0070>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f71b90cac70>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7f71b90e0ac0>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f71b90e0d30>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f71b90e0e50>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7f71b90cb190>],
             '$50pred': [<numba.core.ir.Assign object at 0x7f71b90cb430>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7f71b90ba6d0>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7f71b90aa4f0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7f71b90ab1f0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7f71b90abe50>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7f71b90aebb0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7f71b90d8c10>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7f71b90e0910>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f71b90d8190>],
             'a': [<numba.core.ir.Assign object at 0x7f71b90d6130>],
             'a.1': [<numba.core.ir.Assign object at 0x7f71b90d88b0>,
                     <numba.core.ir.Assign object at 0x7f71b90ae580>],
             'b': [<numba.core.ir.Assign object at 0x7f71b90ca160>],
             'bool112': [<numba.core.ir.Assign object at 0x7f71b90ba9d0>],
             'bool136': [<numba.core.ir.Assign object at 0x7f71b90aa040>],
             'bool144': [<numba.core.ir.Assign object at 0x7f71b90ab4f0>],
             'bool174': [<numba.core.ir.Assign object at 0x7f71b90ae850>],
             'bool24': [<numba.core.ir.Assign object at 0x7f71b90d8f10>],
             'bool42': [<numba.core.ir.Assign object at 0x7f71b90e0c10>],
             'bool50': [<numba.core.ir.Assign object at 0x7f71b90cb310>],
             'exp': [<numba.core.ir.Assign object at 0x7f71b90e0550>,
                     <numba.core.ir.Assign object at 0x7f71b90ba460>,
                     <numba.core.ir.Assign object at 0x7f71b90ae100>],
             'invert': [<numba.core.ir.Assign object at 0x7f71b90e0190>,
                        <numba.core.ir.Assign object at 0x7f71b90ba190>],
             'r': [<numba.core.ir.Assign object at 0x7f71b90d8370>,
                   <numba.core.ir.Assign object at 0x7f71b90abb80>]})
DEBUG 2022-02-14 16:45:47,952 SSA violators {'exp', 'invert', 'r', 'a.1'}
DEBUG 2022-02-14 16:45:47,952 Fix SSA violator on var exp
DEBUG 2022-02-14 16:45:47,952 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,952 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,952 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,952 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,952 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,952 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,952 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,952 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,952 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,953 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,953 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,953 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,953 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,953 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,953 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,953 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,953 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,953 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,953 first assign: exp
DEBUG 2022-02-14 16:45:47,953 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,953 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,953 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,953 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,953 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,953 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,953 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,953 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,953 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,953 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,953 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,953 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,953 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,953 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,953 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,953 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,953 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,953 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,953 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:47,954 on stmt: exp = b
DEBUG 2022-02-14 16:45:47,954 replaced with: exp.1 = b
DEBUG 2022-02-14 16:45:47,954 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,954 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,954 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,954 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,954 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:47,954 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,954 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,954 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,954 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,954 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,954 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,954 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,954 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,954 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,954 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,954 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,954 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,954 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,954 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,954 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,954 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:47,954 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,954 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,954 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,954 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,955 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,955 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:47,955 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,955 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,955 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,955 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,955 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,955 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,955 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,955 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,955 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,955 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,955 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,955 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,955 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,955 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,955 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,955 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,955 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,955 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,955 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,955 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,955 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,955 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,955 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,956 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,956 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,956 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,956 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,956 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,956 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,956 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b90a6130>],
             98: [<numba.core.ir.Assign object at 0x7f71b90a68e0>],
             154: [<numba.core.ir.Assign object at 0x7f71b90a6640>]})
DEBUG 2022-02-14 16:45:47,956 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,956 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,956 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,956 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,956 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,956 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,956 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,956 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,956 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,956 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,956 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,956 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,956 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,956 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,956 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,956 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,956 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,956 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,957 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,957 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,957 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,957 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,957 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,957 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,957 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,957 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,957 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,957 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,957 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,957 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,957 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,957 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,957 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,957 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,957 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,957 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,957 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:47,957 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,957 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,957 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,957 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,957 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,957 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:47,957 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:45:47,957 find_def_from_top label 106
DEBUG 2022-02-14 16:45:47,957 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:47,958 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:47,958 find_def_from_top label 48
DEBUG 2022-02-14 16:45:47,958 idom 26 from label 48
DEBUG 2022-02-14 16:45:47,958 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:47,958 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,958 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:47,958 incoming_def exp.1 = b
DEBUG 2022-02-14 16:45:47,958 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,958 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,958 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,958 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,958 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,958 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,958 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,958 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,958 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,958 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,958 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,958 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,958 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,958 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,958 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,958 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,958 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:47,959 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:45:47,959 find_def_from_top label 130
DEBUG 2022-02-14 16:45:47,959 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:47,959 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:47,959 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,959 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:47,959 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,959 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,959 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,959 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,959 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,959 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,959 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,959 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,959 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:47,959 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:45:47,959 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,959 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,959 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,959 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,959 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,959 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,959 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,959 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,959 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,959 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,960 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,960 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,960 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,960 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,960 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,960 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,960 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,960 find_def_from_top label 154
DEBUG 2022-02-14 16:45:47,960 idom 138 from label 154
DEBUG 2022-02-14 16:45:47,960 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:47,960 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,960 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,960 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,960 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,960 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,960 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,960 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,960 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,960 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,960 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,960 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,960 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,960 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,960 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,960 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,960 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,960 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,961 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,961 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,961 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,961 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90a69a0>
DEBUG 2022-02-14 16:45:47,961 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,961 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,961 Fix SSA violator on var invert
DEBUG 2022-02-14 16:45:47,961 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,961 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,961 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,961 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,961 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,961 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,961 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,961 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,961 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,961 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,961 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,961 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,961 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,961 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,961 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,961 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,961 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,961 first assign: invert
DEBUG 2022-02-14 16:45:47,961 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,961 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,961 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,962 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,962 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,962 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,962 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,962 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,962 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,962 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,962 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,962 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,962 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,962 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,962 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,962 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,962 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,962 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,962 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,962 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:45:47,962 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,962 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,962 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,962 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,962 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,962 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,962 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,962 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,962 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,962 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,962 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,962 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,963 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,963 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,963 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,963 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,963 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,963 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,963 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,963 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,963 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,963 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,963 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,963 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,963 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,963 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,963 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,963 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,963 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,963 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,963 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,963 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,963 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,963 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,963 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,963 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,964 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,964 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,964 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,964 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,964 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,964 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,964 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,964 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,964 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,964 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,964 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,964 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,964 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,964 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,964 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,964 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,964 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,964 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,964 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,964 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,964 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,964 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a60>
DEBUG 2022-02-14 16:45:47,964 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,964 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,964 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f71b90a6520>],
             98: [<numba.core.ir.Assign object at 0x7f71b90a67f0>]})
DEBUG 2022-02-14 16:45:47,964 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,964 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,964 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,965 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,965 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,965 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,965 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,965 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,965 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,965 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,965 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,965 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,965 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,965 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,965 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,965 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,965 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,965 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,965 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,965 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,965 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,965 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,965 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,965 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,965 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,966 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,966 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,966 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,966 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,966 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,966 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,966 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,966 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,966 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,966 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,966 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,966 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,966 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,966 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,966 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,966 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,966 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,966 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,966 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,966 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,966 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,966 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,966 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,966 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,966 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,967 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,967 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,967 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,967 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,967 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,967 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,967 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,967 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,967 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,967 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,967 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,967 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,967 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,967 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,967 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,967 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,967 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,967 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,967 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,967 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,967 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,967 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,967 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,967 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,967 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,968 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,968 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,968 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,968 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,968 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,968 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,968 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,968 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,968 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,968 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,968 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,968 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,968 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,968 find_def_from_top label 172
DEBUG 2022-02-14 16:45:47,968 idom 130 from label 172
DEBUG 2022-02-14 16:45:47,968 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,968 find_def_from_top label 130
DEBUG 2022-02-14 16:45:47,968 idom 106 from label 130
DEBUG 2022-02-14 16:45:47,968 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:47,968 find_def_from_top label 106
DEBUG 2022-02-14 16:45:47,968 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:45:47,968 find_def_from_bottom label 48
DEBUG 2022-02-14 16:45:47,968 find_def_from_top label 48
DEBUG 2022-02-14 16:45:47,968 idom 26 from label 48
DEBUG 2022-02-14 16:45:47,968 find_def_from_bottom label 26
DEBUG 2022-02-14 16:45:47,968 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,968 find_def_from_bottom label 98
DEBUG 2022-02-14 16:45:47,968 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,968 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,969 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,969 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,969 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,969 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,969 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,969 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,969 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,969 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,969 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6e20>
DEBUG 2022-02-14 16:45:47,969 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,969 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,969 Fix SSA violator on var r
DEBUG 2022-02-14 16:45:47,969 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,969 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,969 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,969 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,969 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,969 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,969 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,969 first assign: r
DEBUG 2022-02-14 16:45:47,969 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,969 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,969 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,969 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,969 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,969 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,970 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,970 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,970 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,970 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,970 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,970 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,970 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,970 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,970 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,970 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,970 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,970 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,970 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,970 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,970 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,970 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,970 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,970 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,970 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,970 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,970 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,970 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,970 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,970 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,970 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,970 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,970 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,970 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,970 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,971 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,971 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,971 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,971 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,971 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,971 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,971 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,971 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,971 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,971 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,971 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,971 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,971 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,971 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,971 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,971 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,971 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,971 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,971 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,971 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,971 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,971 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,971 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,971 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,971 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,971 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,971 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,972 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,972 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,972 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,972 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,972 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,972 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,972 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,972 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,972 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,972 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,972 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,972 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,972 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,972 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,972 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,972 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,972 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,972 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,972 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,972 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,972 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,972 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,972 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,972 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,972 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,972 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,972 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,972 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,973 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,973 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6670>
DEBUG 2022-02-14 16:45:47,973 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,973 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,973 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b90a64f0>],
             146: [<numba.core.ir.Assign object at 0x7f71b90a5100>]})
DEBUG 2022-02-14 16:45:47,973 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,973 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,973 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,973 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,973 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,973 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,973 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,973 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,973 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,973 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,973 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,973 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,973 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,973 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,973 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,973 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,973 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,973 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,973 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,973 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,973 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,973 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,974 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,974 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,974 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,974 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,974 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,974 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,974 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,974 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,974 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,974 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,974 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,974 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,974 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,974 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,974 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,974 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,974 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,974 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,974 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,974 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,974 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,974 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,974 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,974 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,974 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,974 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,974 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,975 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,975 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,975 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,975 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,975 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,975 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,975 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,975 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,975 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,975 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,975 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,975 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,975 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,975 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,975 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,975 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,975 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,975 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,975 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,975 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,975 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,975 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,975 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,975 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,975 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,976 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 146
DEBUG 2022-02-14 16:45:47,976 idom 138 from label 146
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,976 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 130
DEBUG 2022-02-14 16:45:47,976 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 106
DEBUG 2022-02-14 16:45:47,976 idom 0 from label 106
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:47,976 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 154
DEBUG 2022-02-14 16:45:47,976 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:47,976 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,976 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,976 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:45:47,976 find_def_from_bottom label 146
DEBUG 2022-02-14 16:45:47,976 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,976 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:47,976 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,976 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,976 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,976 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,977 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,977 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,977 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,977 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,977 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,977 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,977 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,977 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,977 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,977 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,977 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,977 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,977 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,977 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,977 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,977 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,977 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:45:47,977 find_def_from_top label 176
DEBUG 2022-02-14 16:45:47,977 idom 172 from label 176
DEBUG 2022-02-14 16:45:47,977 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:47,977 find_def_from_top label 172
DEBUG 2022-02-14 16:45:47,978 idom 130 from label 172
DEBUG 2022-02-14 16:45:47,978 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,978 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:47,978 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,978 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,978 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,978 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6a90>
DEBUG 2022-02-14 16:45:47,978 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,978 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:45:47,978 find_def_from_top label 184
DEBUG 2022-02-14 16:45:47,978 idom 172 from label 184
DEBUG 2022-02-14 16:45:47,978 find_def_from_bottom label 172
DEBUG 2022-02-14 16:45:47,978 find_def_from_top label 172
DEBUG 2022-02-14 16:45:47,978 idom 130 from label 172
DEBUG 2022-02-14 16:45:47,978 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,978 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:47,978 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,978 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:45:47,978 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,978 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,978 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,978 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,978 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,978 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,978 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,978 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,978 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,979 first assign: a.1
DEBUG 2022-02-14 16:45:47,979 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,979 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,979 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,979 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,979 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,979 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,979 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,979 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,979 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,979 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,979 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,979 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,979 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,979 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,979 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,979 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,979 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,979 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,979 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,979 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,979 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,979 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,979 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,979 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,980 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,980 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,980 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,980 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,980 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,980 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,980 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,980 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,980 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,980 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,980 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,980 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,980 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,980 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,980 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,980 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,980 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,980 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,980 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,981 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,981 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,981 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,981 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,981 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,981 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,981 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,981 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,981 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,981 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,981 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,981 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,981 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,981 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,981 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,981 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,982 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,982 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,982 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,982 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,982 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,982 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,982 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,982 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,982 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,982 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,982 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,982 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,982 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:47,982 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,982 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,982 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,982 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,982 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,982 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,982 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,982 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,982 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,983 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,983 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,983 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,983 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,983 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,983 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,983 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:47,983 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,983 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,983 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,983 Running <numba.core.ssa._FreshVarHandler object at 0x7f71b90a6a00>
DEBUG 2022-02-14 16:45:47,983 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:47,983 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:47,983 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f71b90a6700>],
             154: [<numba.core.ir.Assign object at 0x7f71b90a5340>]})
DEBUG 2022-02-14 16:45:47,983 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:45:47,983 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,983 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:45:47,983 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:45:47,983 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,983 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,983 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,984 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:45:47,984 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,984 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:45:47,984 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:45:47,984 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,984 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,984 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:45:47,984 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:45:47,984 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,984 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:45:47,984 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:45:47,984 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:45:47,984 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:45:47,984 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,984 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,984 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:45:47,984 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:45:47,984 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,984 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:45:47,984 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:45:47,985 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:45:47,985 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,985 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:45:47,985 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,985 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,985 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,985 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:45:47,985 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,985 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:45:47,985 on stmt: exp.1 = b
DEBUG 2022-02-14 16:45:47,985 on stmt: jump 106
DEBUG 2022-02-14 16:45:47,985 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:45:47,985 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,985 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,985 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:45:47,985 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:45:47,985 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:45:47,985 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,985 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,985 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:45:47,985 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:45:47,986 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,986 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:45:47,986 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:45:47,986 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:45:47,986 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,986 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,986 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,986 find_def_from_top label 114
DEBUG 2022-02-14 16:45:47,986 idom 106 from label 114
DEBUG 2022-02-14 16:45:47,986 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:47,986 find_def_from_top label 106
DEBUG 2022-02-14 16:45:47,986 idom 0 from label 106
DEBUG 2022-02-14 16:45:47,986 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:47,986 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:45:47,986 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:45:47,986 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:45:47,986 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,986 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,986 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:45:47,986 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:45:47,987 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:45:47,987 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,987 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,987 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:45:47,987 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:45:47,987 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,987 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,987 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:45:47,987 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,987 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,987 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:45:47,987 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:45:47,987 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,987 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,987 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,987 find_def_from_top label 146
DEBUG 2022-02-14 16:45:47,987 idom 138 from label 146
DEBUG 2022-02-14 16:45:47,987 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:47,987 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,987 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,987 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,987 find_def_from_top label 130
DEBUG 2022-02-14 16:45:47,988 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:45:47,988 find_def_from_bottom label 106
DEBUG 2022-02-14 16:45:47,988 find_def_from_top label 106
DEBUG 2022-02-14 16:45:47,988 idom 0 from label 106
DEBUG 2022-02-14 16:45:47,988 find_def_from_bottom label 0
DEBUG 2022-02-14 16:45:47,988 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,988 find_def_from_bottom label 154
DEBUG 2022-02-14 16:45:47,988 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,988 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,988 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:45:47,988 on stmt: jump 154
DEBUG 2022-02-14 16:45:47,988 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:45:47,988 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,988 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:45:47,988 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:45:47,988 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,988 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:45:47,988 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,988 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,988 find_def_from_top label 154
DEBUG 2022-02-14 16:45:47,988 idom 138 from label 154
DEBUG 2022-02-14 16:45:47,989 find_def_from_bottom label 138
DEBUG 2022-02-14 16:45:47,989 find_def_from_top label 138
DEBUG 2022-02-14 16:45:47,989 idom 130 from label 138
DEBUG 2022-02-14 16:45:47,989 find_def_from_bottom label 130
DEBUG 2022-02-14 16:45:47,989 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:45:47,989 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:45:47,989 on stmt: jump 130
DEBUG 2022-02-14 16:45:47,989 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:45:47,989 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,989 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:45:47,989 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:47,989 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:45:47,989 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:45:47,989 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,989 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:45:47,989 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:45:47,989 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:45:47,989 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:45:47,989 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:45:47,989 Running <numba.core.ssa._FixSSAVars object at 0x7f71b90d6df0>
DEBUG 2022-02-14 16:45:47,989 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:45:47,989 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:45:55,964 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=3, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=4, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:55,964 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:45:55,964 stack: []
DEBUG 2022-02-14 16:45:55,964 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack []
DEBUG 2022-02-14 16:45:55,964 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack []
DEBUG 2022-02-14 16:45:55,964 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack ['$2load_global.0']
DEBUG 2022-02-14 16:45:55,964 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-02-14 16:45:55,964 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-02-14 16:45:55,964 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:45:55,964 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-02-14 16:45:55,965 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-02-14 16:45:55,965 stack ['$26call_function.12']
DEBUG 2022-02-14 16:45:55,965 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:55,966 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:55,966 stack: ['$phi30.0']
DEBUG 2022-02-14 16:45:55,966 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-02-14 16:45:55,966 stack ['$phi30.0']
DEBUG 2022-02-14 16:45:55,966 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:55,966 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:55,966 stack: []
DEBUG 2022-02-14 16:45:55,966 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-02-14 16:45:55,966 stack []
DEBUG 2022-02-14 16:45:55,966 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:45:55,966 stack ['$const40.0']
DEBUG 2022-02-14 16:45:55,966 end state. edges=[]
DEBUG 2022-02-14 16:45:55,966 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:45:55,966 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:55,966 dispatch pc=32, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-02-14 16:45:55,966 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:45:55,966 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:45:55,966 stack ['$phi32.0']
DEBUG 2022-02-14 16:45:55,966 dispatch pc=36, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-02-14 16:45:55,967 stack ['$phi32.0', '$const34.2']
DEBUG 2022-02-14 16:45:55,967 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-02-14 16:45:55,967 stack ['$phi32.0']
DEBUG 2022-02-14 16:45:55,967 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:45:55,967 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:45:55,967 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:45:55,967 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:45:55,967 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-02-14 16:45:55,967 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:55,967 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:55,968 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:55,968 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:45:55,968 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-02-14 16:45:55,968 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-02-14 16:45:55,968 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:45:55,968 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-02-14 16:45:55,968 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-02-14 16:45:55,969 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-02-14 16:45:55,969 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:45:55,969 label 0:
    sched = arg(0, name=sched)               ['sched']
    _668inplace__multiply_20 = arg(1, name=_668inplace__multiply_20) ['_668inplace__multiply_20']
    _subarr_1478 = arg(2, name=_subarr_1478) ['_subarr_1478']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_1479 = $phi32.1            ['$phi32.1', 'parfor__index_1479']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:45:55,974 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:45:55,974 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,974 on stmt: sched.2565 = arg(0, name=sched)
DEBUG 2022-02-14 16:45:55,974 on stmt: _668inplace__multiply_20 = arg(1, name=_668inplace__multiply_20)
DEBUG 2022-02-14 16:45:55,974 on stmt: _subarr_1478 = arg(2, name=_subarr_1478)
DEBUG 2022-02-14 16:45:55,974 on stmt: $2load_global.0.2566 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:45:55,974 on stmt: $const6.2.2567 = const(int, 0)
DEBUG 2022-02-14 16:45:55,974 on stmt: $8binary_subscr.3.2568 = getitem(value=sched.2565, index=$const6.2.2567, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:55,974 on stmt: $const12.5.2569 = const(int, 1)
DEBUG 2022-02-14 16:45:55,974 on stmt: $14binary_subscr.6.2570 = getitem(value=sched.2565, index=$const12.5.2569, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:55,974 on stmt: $16load_global.7.2571 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:45:55,974 on stmt: $18load_method.8.2572 = getattr(value=$16load_global.7.2571, attr=uint8)
DEBUG 2022-02-14 16:45:55,974 on stmt: $const20.9.2573 = const(int, 1)
DEBUG 2022-02-14 16:45:55,975 on stmt: $22call_method.10.2574 = call $18load_method.8.2572($const20.9.2573, func=$18load_method.8.2572, args=[Var($const20.9.2573, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:55,975 on stmt: $24binary_add.11.2575 = $14binary_subscr.6.2570 + $22call_method.10.2574
DEBUG 2022-02-14 16:45:55,975 on stmt: $26call_function.12.2576 = call $2load_global.0.2566($8binary_subscr.3.2568, $24binary_add.11.2575, func=$2load_global.0.2566, args=[Var($8binary_subscr.3.2568, <string>:2), Var($24binary_add.11.2575, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:45:55,975 on stmt: $28get_iter.13.2577 = getiter(value=$26call_function.12.2576)
DEBUG 2022-02-14 16:45:55,975 on stmt: $phi30.0.2578 = $28get_iter.13.2577
DEBUG 2022-02-14 16:45:55,975 on stmt: jump 30
DEBUG 2022-02-14 16:45:55,975 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:45:55,975 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,975 on stmt: $30for_iter.1.2579 = iternext(value=$phi30.0.2578)
DEBUG 2022-02-14 16:45:55,975 on stmt: $30for_iter.2.2580 = pair_first(value=$30for_iter.1.2579)
DEBUG 2022-02-14 16:45:55,975 on stmt: $30for_iter.3.2581 = pair_second(value=$30for_iter.1.2579)
DEBUG 2022-02-14 16:45:55,975 on stmt: $phi32.1.2582 = $30for_iter.2.2580
DEBUG 2022-02-14 16:45:55,975 on stmt: branch $30for_iter.3.2581, 32, 1357
DEBUG 2022-02-14 16:45:55,975 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:45:55,975 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,975 on stmt: parfor__index_1479 = $phi32.1.2582
DEBUG 2022-02-14 16:45:55,975 on stmt: jump 40
DEBUG 2022-02-14 16:45:55,975 ==== SSA block analysis pass on 1357
DEBUG 2022-02-14 16:45:55,975 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,975 on stmt: $const40.0.2583 = const(NoneType, None)
DEBUG 2022-02-14 16:45:55,975 on stmt: $42return_value.1.2584 = cast(value=$const40.0.2583)
DEBUG 2022-02-14 16:45:55,976 on stmt: return $42return_value.1.2584
DEBUG 2022-02-14 16:45:55,976 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:45:55,976 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,976 on stmt: $value_var.1480 = getitem(value=_668inplace__multiply_20, index=parfor__index_1479, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:45:55,976 on stmt: _subarr_1478[parfor__index_1479] = $value_var.1480
DEBUG 2022-02-14 16:45:55,976 on stmt: jump 1356
DEBUG 2022-02-14 16:45:55,976 ==== SSA block analysis pass on 1356
DEBUG 2022-02-14 16:45:55,976 Running <numba.core.ssa._GatherDefsHandler object at 0x7f71b8cfb550>
DEBUG 2022-02-14 16:45:55,976 on stmt: jump 30
DEBUG 2022-02-14 16:45:55,976 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.2570': [<numba.core.ir.Assign object at 0x7f71b97f8e20>],
             '$16load_global.7.2571': [<numba.core.ir.Assign object at 0x7f71b97f85e0>],
             '$18load_method.8.2572': [<numba.core.ir.Assign object at 0x7f71b97f80a0>],
             '$22call_method.10.2574': [<numba.core.ir.Assign object at 0x7f71b97f8a00>],
             '$24binary_add.11.2575': [<numba.core.ir.Assign object at 0x7f71b97f8c10>],
             '$26call_function.12.2576': [<numba.core.ir.Assign object at 0x7f71b97f8d60>],
             '$28get_iter.13.2577': [<numba.core.ir.Assign object at 0x7f71b97f8eb0>],
             '$2load_global.0.2566': [<numba.core.ir.Assign object at 0x7f71b98107c0>],
             '$30for_iter.1.2579': [<numba.core.ir.Assign object at 0x7f71b9807d90>],
             '$30for_iter.2.2580': [<numba.core.ir.Assign object at 0x7f71b9807d60>],
             '$30for_iter.3.2581': [<numba.core.ir.Assign object at 0x7f71b98078e0>],
             '$42return_value.1.2584': [<numba.core.ir.Assign object at 0x7f71b98079a0>],
             '$8binary_subscr.3.2568': [<numba.core.ir.Assign object at 0x7f71b9810a00>],
             '$const12.5.2569': [<numba.core.ir.Assign object at 0x7f71b97f8460>],
             '$const20.9.2573': [<numba.core.ir.Assign object at 0x7f71b97f8700>],
             '$const40.0.2583': [<numba.core.ir.Assign object at 0x7f71b9807850>],
             '$const6.2.2567': [<numba.core.ir.Assign object at 0x7f71b9810310>],
             '$phi30.0.2578': [<numba.core.ir.Assign object at 0x7f71b98105b0>],
             '$phi32.1.2582': [<numba.core.ir.Assign object at 0x7f71b97f8190>],
             '$value_var.1480': [<numba.core.ir.Assign object at 0x7f71b992a910>],
             '_668inplace__multiply_20': [<numba.core.ir.Assign object at 0x7f71b8ceb250>],
             '_subarr_1478': [<numba.core.ir.Assign object at 0x7f71b9564880>],
             'parfor__index_1479': [<numba.core.ir.Assign object at 0x7f71b9807220>],
             'sched.2565': [<numba.core.ir.Assign object at 0x7f71b8ceb8e0>]})
DEBUG 2022-02-14 16:45:55,976 SSA violators set()
